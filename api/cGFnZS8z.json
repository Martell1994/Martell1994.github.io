{"per_page":10,"total":3,"current":3,"data":[{"title":"『2016』莫愁前路无知己","date":"2016-12-31T15:59:01.000Z","date_formatted":{"ll":"Dec 31, 2016","L":"12/31/2016","MM-DD":"12-31"},"excerpt":"<p>城西银泰喧闹的跨年倒计时还在进行，明晃晃的照灯和兴奋的人群。</p>","link":"annual-summary-2016","categories":["总结"]},{"title":"如何在 Xcode8上安装插件","date":"2016-11-30T04:02:20.000Z","date_formatted":{"ll":"Nov 30, 2016","L":"11/30/2016","MM-DD":"11-30"},"excerpt":"<p>正式推出 Xcode8 已有两个多月，也有不少朋友分享了安装插件的方法，笔者在这里整理了一个亲测有效的方法。</p>\n<ol>\n<li><p>更新 Xcode，目前最新版本是8.1；</p>\n</li>\n<li><p>由于安装插件会影响原来的 Xcode 打包上传，我们在应用程序里复制一个 Xcode，并重命名为 XcodeSigner；</p></li></ol>","link":"how-to-install-plugins-on-Xcode8","tags":["Xcode"],"categories":["技巧"]},{"title":"Git 手册之用 .gitignore 忽略文件","date":"2016-11-21T17:34:57.000Z","date_formatted":{"ll":"Nov 22, 2016","L":"11/22/2016","MM-DD":"11-22"},"excerpt":"<p>提交代码后我们经常发现，即使没有任何代码修改，有一些文件也会提示更新，例如：<code>UserInterfaceState.xcuserstate</code>、<code>.DS_Store</code> 等。</p>\n<p>这种情况可以通过添加 <code>.gitignore</code> 文件解决。</p>","link":"git-ignore","tags":[".gitignore"],"categories":["Git"]},{"title":"《Effective Objective-C 2.0》整理（四）：协议与分类","date":"2016-09-28T12:21:06.000Z","date_formatted":{"ll":"Sep 28, 2016","L":"09/28/2016","MM-DD":"09-28"},"excerpt":"<h3 id=\"第23条：通过委托与数据源协议进行对象间通信\">第23条：通过委托与数据源协议进行对象间通信<a href=\"EOC2.0-Chapter-4#第23条：通过委托与数据源协议进行对象间通信\"></a></h3><p>Objective-C 开发中广泛使用“委托模式”来实现对象间的通信，该模式的主旨是：定义一套接口，某对象若想接受另一个对象的委托，则需遵从此接口，以便成为其“委托对象”（delegate）。而“另一个对象”则可以给其委托对象回传一些信息，也可以在发生相关事件时通知委托对象。</p>","link":"EOC2.0-Chapter-4","tags":["《Effective Objective-C 2.0》"],"categories":["iOS"]},{"title":"《Effective Objective-C 2.0》整理（三）：接口与 API 设计","date":"2016-09-22T09:55:21.000Z","date_formatted":{"ll":"Sep 22, 2016","L":"09/22/2016","MM-DD":"09-22"},"excerpt":"<h3 id=\"第15条：用前缀避免命名空间冲突\">第15条：用前缀避免命名空间冲突<a href=\"EOC2.0-Chapter-3#第15条：用前缀避免命名空间冲突\"></a></h3><p>Objective-C 没有其他语言那种内置的命名空间（namespace）机制，我们需要变相实现命名空间。</p>\n<p>而 Apple 宣称其保留使用所有“两字母前缀”的权利，因此我们选用的前缀应该是三个字母的，一般选用与公司、应用程序或与二者有关联之名称作为类名的前缀，并在所有代码中均只用这一前缀。</p>","link":"EOC2.0-Chapter-3","tags":["《Effective Objective-C 2.0》"],"categories":["iOS"]},{"title":"《Effective Objective-C 2.0》整理（二）：对象、消息、运行时","date":"2016-09-19T05:20:00.000Z","date_formatted":{"ll":"Sep 19, 2016","L":"09/19/2016","MM-DD":"09-19"},"excerpt":"<h3 id=\"第6条：理解“属性”这一概念\">第6条：理解“属性”这一概念<a href=\"EOC2.0-Chapter-2#第6条：理解“属性”这一概念\"></a></h3><p>实例变量一般通过“存取方法”来访问。</p>\n<ul>\n<li>获取方法（getter）：读取变量值</li>\n<li>设置方法（setter）：写入变量值</li>\n</ul>","link":"EOC2.0-Chapter-2","tags":["《Effective Objective-C 2.0》"],"categories":["iOS"]},{"title":"《Effective Objective-C 2.0》整理（一）：熟悉Objective-C","date":"2016-08-25T14:55:33.000Z","date_formatted":{"ll":"Aug 25, 2016","L":"08/25/2016","MM-DD":"08-25"},"excerpt":"<h3 id=\"第1条：了解-Objective-C-语言的起源\">第1条：了解 Objective-C 语言的起源<a href=\"EOC2.0-Chapter-1#第1条：了解-Objective-C-语言的起源\"></a></h3><p>Objective-C 由消息型语言的鼻祖 <a href=\"https://en.wikipedia.org/wiki/Smalltalk\" target=\"_blank\" rel=\"noopener\">Smalltalk</a> 演化而来，是一门面向对象的语言，具有<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong>的特性。它还包括三大动态特性：</p>\n<ul>\n<li>动态类型：id 类型，静态类型是弱类型，动态类型是强类型</li>\n<li>动态绑定：基于动态类型，一旦类型被确定，对象对应的属性和相应消息都被确定</li>\n<li>动态加载：按需加载，例如不同机型适配，加载图片（1x/2x/3x），按需加载可执行代码，而非所有组件</li>\n</ul>","link":"EOC2.0-Chapter-1","tags":["《Effective Objective-C 2.0》"],"categories":["iOS"]},{"title":"Hello World","date":"2016-08-12T16:00:00.000Z","date_formatted":{"ll":"Aug 13, 2016","L":"08/13/2016","MM-DD":"08-13"},"excerpt":"<p>标题是 Hexo 默认生成的，却没来由得契合。『Hello，World』——计算机发展史上的里程碑式的一笔，每一门编程语言的入门示例，Brian Kernighan 在<a href=\"https://book.douban.com/subject/1139336/\" target=\"_blank\" rel=\"noopener\">《C 程序设计语言》</a>中第一次引用的 Hello World 程序，源自他1973年编写的一部讲授B语言的编程教程：</p>","link":"hello-world","categories":["总结"]}]}