{"title":"0010. Regular Expression Matching","date":"2020-01-14T17:15:48.833Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:15:48.833Z","content":"<p>English ｜ <a href=\"leetcode/0010\">简体中文</a></p>\n<h2 id=\"Q\">Q<a href=\"leetcode/0010-en#Q\"></a></h2><p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p>\n<blockquote>\n<p>‘.’ Matches any single character.<br>‘*‘ Matches zero or more of the preceding element.<br>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li><code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.</li>\n<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>.</code> or <code>*</code>.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><br>s = “aa”<br>p = “a”<br><strong>Output:</strong> false<br><strong>Explanation:</strong> “a” does not match the entire string “aa”.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><br>s = “aa”<br>p = “a*“<br><strong>Output:</strong> true<br><strong>Explanation:</strong> ‘*’ means zero or more of the precedeng element, ‘a’. Therefore, by repeating ‘a’ once, it becomes “aa”.</p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><br>s = “ab”<br>p = “.*“<br><strong>Output:</strong> true<br><strong>Explanation:</strong> “.*“ means “zero or more (*) of any character (.)”.</p>\n</blockquote>\n<p><strong>Example 4:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><br>s = “aab”<br>p = “c<em>a</em>b”<br><strong>Output:</strong> true<br>Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches “aab”.</p>\n</blockquote>\n<p><strong>Example 5:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><br>s = “mississippi”<br>p = “mis*is*p*.”<br><strong>Output:</strong> false</p>\n</blockquote>\n<h2 id=\"A\">A<a href=\"leetcode/0010-en#A\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isMatch</span><span class=\"params\">(<span class=\"number\">_</span> s: String, <span class=\"number\">_</span> p: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> p.isEmpty &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"keyword\">return</span> s.isEmpty</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">let</span> sArr = <span class=\"type\">Array</span>(s), pArr = <span class=\"type\">Array</span>(p)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">let</span> isFirstMatch : <span class=\"type\">Bool</span> = (!s.isEmpty) &amp;&amp; (pArr[<span class=\"number\">0</span>] == sArr[<span class=\"number\">0</span>] || pArr[<span class=\"number\">0</span>] == <span class=\"string\">\".\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (pArr.<span class=\"built_in\">count</span> &gt;= <span class=\"number\">2</span> &amp;&amp; pArr[<span class=\"number\">1</span>] == <span class=\"string\">\"*\"</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"keyword\">return</span> isFirstMatch &amp;&amp; isMatch(<span class=\"type\">String</span>(s.suffix(s.<span class=\"built_in\">count</span> - <span class=\"number\">1</span>)), p) || isMatch(s, <span class=\"type\">String</span>(p.suffix(p.<span class=\"built_in\">count</span> - <span class=\"number\">2</span>)))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"keyword\">return</span> isFirstMatch &amp;&amp; isMatch(<span class=\"type\">String</span>(s.suffix(s.<span class=\"built_in\">count</span> - <span class=\"number\">1</span>)), <span class=\"type\">String</span>(p.suffix(p.<span class=\"built_in\">count</span> - <span class=\"number\">1</span>)))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></div></figure>\n","link":"leetcode/0010-en","plink":"https://blog.fiteen.top/leetcode/0010-en/","toc":[{"title":"Q","id":"Q","index":"1"},{"title":"A","id":"A","index":"2"}],"copyright":{"author":"FiTeen","link":"<a href=\"https://blog.fiteen.top/leetcode/0010-en/\" title=\"0010. Regular Expression Matching\">https://blog.fiteen.top/leetcode/0010-en/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}