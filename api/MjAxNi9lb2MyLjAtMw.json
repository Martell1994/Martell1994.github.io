{"title":"《Effective Objective-C 2.0》整理（三）：接口与 API 设计","date":"2016-09-22T17:55:21.000Z","date_formatted":{"ll":"Sep 22, 2016","L":"09/22/2016","MM-DD":"09-22"},"link":"2016/eoc2.0-3","comments":true,"tags":["《Effective Objective-C 2.0》"],"categories":["iOS"],"updated":"2020-02-22T11:11:01.000Z","content":"<h2 id=\"第15条：用前缀避免命名空间冲突\">第15条：用前缀避免命名空间冲突<a href=\"#第15条：用前缀避免命名空间冲突\" title=\"第15条：用前缀避免命名空间冲突\"></a></h2><p>Objective-C 没有其他语言那种内置的命名空间（namespace）机制，我们需要变相实现命名空间。</p>\n<p>而 Apple 宣称其保留使用所有“两字母前缀”的权利，因此我们选用的前缀应该是三个字母的，一般选用与公司、应用程序或与二者有关联之名称作为类名的前缀，并在所有代码中均只用这一前缀。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"第16条：提供全能初始化方法\">第16条：提供“全能初始化方法”<a href=\"#第16条：提供全能初始化方法\" title=\"第16条：提供“全能初始化方法”\"></a></h2><p>所有对象均要初始化。我们将可为对象提供必要信息以便其能完成工作的初始化方法叫做“全能初始化方法”。</p>\n<p>以某个矩形类为例，它的全能初始化方法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)initWithWidth:(float)width andHeight:(float)height&#123;</span><br><span class=\"line\">    if ((self &#x3D; [super init])) &#123;</span><br><span class=\"line\">        _width &#x3D; width;</span><br><span class=\"line\">        _height &#x3D; height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若全能初始化方法与超类不同，则需覆写超类中的对应方法。如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。</p>\n<p>举例，某个正方形类作为矩形类的子类，它需要满足 width 和 height 一致的条件，</p>\n<p>那么它的初始化方法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)initWithDimension:(float)dimension&#123;</span><br><span class=\"line\">    return [super initWithWidth:dimension andHeight:dimension];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后覆写矩形类的全能初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)initWithWidth:(float)width andHeight:(float)height&#123;</span><br><span class=\"line\">    float dimension &#x3D; MAX(width, height);</span><br><span class=\"line\">    return [self initWithDimension:dimension];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并抛出异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)initWithWidth:(float)width andHeight:(float)height&#123;</span><br><span class=\"line\">    @throw [NSException exceptionWithName:NSInternalInconsistencyException reason:@&quot;Must use initWithDimension: instead.&quot; userInfo:nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第17条：实现-description-方法\">第17条：实现 description 方法<a href=\"#第17条：实现-description-方法\" title=\"第17条：实现 description 方法\"></a></h2><p>调试程序时，经常需要打印并查看对象信息。我们通常会使用下面的方法打印：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLog(@&quot;object &#x3D; %@&quot;, object);</span><br></pre></td></tr></table></figure>\n\n<p>假如 object 是个自定义类，输出的信息形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object &#x3D; &lt;CustomClass: 0x7fd9a1600600&gt;</span><br></pre></td></tr></table></figure>\n\n<p>想要看到类中完整的信息，需要在类中覆写 description 方法。建议在该方法中打印出类的名字和指针地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString*)description&#123;</span><br><span class=\"line\">    return [NSString stringWithFormat:@&quot;&lt;%@:%p,\\&quot;%@ %@\\&quot;&gt;&quot;,[self class],self,_parm1,_parm2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NSObject 协议中有一个 debugDescription 方法，它是开发者在调试器中以控制台命令打印对象时才调用的。Foundation 框架的 NSArray 类就是实现了 debugDescription。</p>\n<h2 id=\"第18条：尽量使用不可变对象\">第18条：尽量使用不可变对象<a href=\"#第18条：尽量使用不可变对象\" title=\"第18条：尽量使用不可变对象\"></a></h2><p>设计类时，应充分运用属性来封装数据。默认情况下，属性是 read-write，这样设计出来的类都是“可变的”。</p>\n<p>如果把可变对象放入 collection 之后又修改其内容，那么很容易破坏 set 的内部数据结构，使其失去固有的语义，因此应该尽量减少对象中的可变内容，即定义为 readonly 属性。</p>\n<p>不要把可变的 collection 作为属性公开，而应提供相关方法，一次修改对象中的可变collection。例如，某个 EOCPerson 类，假如要改变 friends 数据集，可通过 addFriend 和 removeFriend 实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface EOCPerson : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy,readonly)NSString *firstName;</span><br><span class=\"line\">@property(nonatomic,copy,readonly)NSString *lastName;</span><br><span class=\"line\">@property(nonatomic,strong,readonly)NSSet *friends;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFirstNmae:(NSString *)firstName</span><br><span class=\"line\">               lastName:(NSString *)lastName;</span><br><span class=\"line\">- (void)addFriend:(EOCPerson*)person;</span><br><span class=\"line\">- (void)removeFriend:(EOCPerson*)person;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第19条：使用清晰而协调的命名方式\">第19条：使用清晰而协调的命名方式<a href=\"#第19条：使用清晰而协调的命名方式\" title=\"第19条：使用清晰而协调的命名方式\"></a></h2><p><strong>方法命名规则：</strong></p>\n<ul><li>如果方法的返回值是新创建的，那么方法名的首个词应是返回值的类型，除非前面还有修饰语，例如localizedString。属性的存取方法不遵循这种命名方式，因为一般认为这些方法不会创建新对象。</li><li>应该把表示参数类型的名词放在次参数前面。</li><li>如果方法要在当前对象上执行操作，那么就应该包含动词；若执行操作时还需要参数，则应该在动词后面加上一个或多个名词。</li><li>不要使用 str 这种简称，应该用 string 这样的全称。</li><li>如果某方法返回非属性的Boolean值，那么应该根据其功能，选用 has 或 is 当前缀。</li><li>将 get 整个前缀留给那些借由“输出参数”来保存返回值的方法，比如说，把返回值填充到“C语言数组”里的那种方法就可以使用这个词做前缀。</li></ul><p><strong>类与协议的命名</strong></p>\n<ul><li>给方法起名时的第一要务就是确保其风格与你自己的代码所要继承的框架相符。</li></ul><ul><li>最重要的一点就是，命名方式要协调一致。如果要从其他框架中集成子类，那么务必遵循其命名惯例。</li></ul><h2 id=\"第20条：为私有方法名加前缀\">第20条：为私有方法名加前缀<a href=\"#第20条：为私有方法名加前缀\" title=\"第20条：为私有方法名加前缀\"></a></h2><p>编写类的实现代码时，经常要写一些只在内部使用的方法。为这种方法的名称加上某些前缀，这就可以轻易将公共方法和私有方法区分开，有助于调试。</p>\n<p>例如，使用 _p 作为前缀，p 表示 “private”，而下划线可以把这个字母和真正的方法名区隔开：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface EOCObject : NSObject</span><br><span class=\"line\">- (void)publicMethod;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation EOCObject</span><br><span class=\"line\">- (void)publicMethod &#123;&#125;</span><br><span class=\"line\">- (void)p_privateMethod &#123;&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>但是，需要注意的是，<strong>不要单用一个下划线做私有方法的前缀</strong>，因为这种做法是预留给苹果公司的。</p>\n<h2 id=\"第21条：理解-objective-c-错误模型\">第21条：理解 Objective-C 错误模型<a href=\"#第21条：理解-objective-c-错误模型\" title=\"第21条：理解 Objective-C 错误模型\"></a></h2><p>不同于 Java 等编程语言，面对异常处理，Objective-C 现在采用的方法是：只有在极其罕见的情况下抛出异常，异常抛出之后，无须考虑恢复问题，而且应用程序此时也应该退出。</p>\n<p>而出现“不那么严重的错误”时，Objective-C 语言所使用的编程范式为：令方法返回 nil/0，或是使用 NSError，以表明其中有错误发生。</p>\n<p>NSError 的用法更加灵活，因为经由此对象，我们可以把导致错误的原因反馈给调用者。NSError 对象里封装了三条信息：</p>\n<ul><li>Error domain（错误范围，类型为字符串）</li><li>Error code（错误码，类型为整数）</li><li>User info（用户信息/有关此错误的额外信息，类型为字典）</li></ul><p>NSError 经常由“输出参数”返回给调用者，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)doSomething:(NSError**)error &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Do something that may cause an error</span><br><span class=\"line\">    </span><br><span class=\"line\">    if ( &#x2F;* there was an error*&#x2F; ) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; Pass the &#39;error&#39; through the out-parameter</span><br><span class=\"line\">            *error &#x3D; [NSError errorWithDomain:domain code:code userInfo:userInfo];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return NO; &#x2F;&#x2F;&#x2F;&lt; Indicate failure</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return YES; &#x2F;&#x2F;&#x2F;&lt; Indicate success</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用者可以根据错误类型分别处理各种错误，错误范围应该定义成 NSString 型的全局常量，而错误码则定义成枚举类型为佳，如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; EOCErrors.h</span><br><span class=\"line\">extern NSString *const EocErrorDomain;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef NS_ENUM(NSUInteger,EOCError) &#123;</span><br><span class=\"line\">    EOCErrorUnknown              &#x3D; -1;</span><br><span class=\"line\">    EOCErrorInternalInconsistency&#x3D; 100;</span><br><span class=\"line\">    EOCErrorGeneralFault         &#x3D; 105;</span><br><span class=\"line\">    EOCErrorBadInput             &#x3D; 500;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#x2F;&#x2F; EOCErrors.m</span><br><span class=\"line\">NSString *const EOCErrorDomain &#x3D; @&quot;EOCErrorDomain&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第22条：理解-nscopying-协议\">第22条：理解 NSCopying 协议<a href=\"#第22条：理解-nscopying-协议\" title=\"第22条：理解 NSCopying 协议\"></a></h2><p>在 Objective-C 中，对象的拷贝通过 copy 完成。如果想要自定义的类支持拷贝，那就要实现 NSCopying 协议，该协议只有一个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)copyWithZone:(NSZone *)zone;</span><br></pre></td></tr></table></figure>\n\n<p>如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 NSCopying 与 NSMutableCopying 协议。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)mutableCopyWithZone:(NSZone *)zone;</span><br></pre></td></tr></table></figure>\n\n<p>复制对象时需决定采用浅拷贝和深拷贝。</p>\n<p><strong>深拷贝：在拷贝对象自身时，将其底层数据也一并复制过去；</strong></p>\n<p><strong>浅拷贝：只拷贝容器对象本身，而不复制其中数据。</strong></p>\n<p>一般情况下应该尽量执行浅拷贝，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)copyWithZone:(NSZone *)zone &#123;</span><br><span class=\"line\">    EOCPerson *copy &#x3D; [[[self class] allocWithZone:zone] initWithFirstNmae:_firstName lastName:_lastName];</span><br><span class=\"line\">    copy-&gt;_friends &#x3D; [_friends mutableCopy];</span><br><span class=\"line\">    return copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你写的对象需要深拷贝，那么可以考虑新增一个专门执行深拷贝的方法，如下：。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)deepCopy &#123;</span><br><span class=\"line\">    EOCPerson *copy &#x3D; [[[self class] alloc]initWithFirstNmae:_firstName lastName:_lastName];</span><br><span class=\"line\">    copy-&gt;_friends &#x3D; [[NSMutableSet alloc]initWithSet:_friends copyItems:YES];</span><br><span class=\"line\">    return copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<p>参考资料：<a href=\"https://book.douban.com/subject/25829244/\" target=\"_blank\">《Effective Objective-C 2.0》编写高质量iOS与OS X代码的52个有效方法</a></p>\n","prev":{"title":"《Effective Objective-C 2.0》整理（四）：协议与分类","link":"2016/eoc2.0-4"},"next":{"title":"《Effective Objective-C 2.0》整理（二）：对象、消息、运行时","link":"2016/eoc2.0-2"},"plink":"https://blog.fiteen.top/2016/eoc2.0-3/","toc":[{"id":"第15条：用前缀避免命名空间冲突","title":"第15条：用前缀避免命名空间冲突","index":"1"},{"id":"第16条：提供全能初始化方法","title":"第16条：提供“全能初始化方法”","index":"2"},{"id":"第17条：实现-description-方法","title":"第17条：实现 description 方法","index":"3"},{"id":"第18条：尽量使用不可变对象","title":"第18条：尽量使用不可变对象","index":"4"},{"id":"第19条：使用清晰而协调的命名方式","title":"第19条：使用清晰而协调的命名方式","index":"5"},{"id":"第20条：为私有方法名加前缀","title":"第20条：为私有方法名加前缀","index":"6"},{"id":"第21条：理解-objective-c-错误模型","title":"第21条：理解 Objective-C 错误模型","index":"7"},{"id":"第22条：理解-nscopying-协议","title":"第22条：理解 NSCopying 协议","index":"8"}],"reward":true,"copyright":{"author":"FiTeen","link":"<a href=\"https://blog.fiteen.top/2016/eoc2.0-3/\" title=\"《Effective Objective-C 2.0》整理（三）：接口与 API 设计\">https://blog.fiteen.top/2016/eoc2.0-3/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}