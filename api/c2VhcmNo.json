[{"title":"『2019』未来可期","date":"2019-12-31T14:12:43.000Z","date_formatted":{"ll":"Dec 31, 2019","L":"12/31/2019","MM-DD":"12-31"},"updated":"2020-01-13T15:02:28.717Z","content":"年纪越大，越感受到时光易逝。\n\n\n经历工作随着 ReactNative、Weex 与 Flutter 等跨端框架的发展，大前端渐渐成为了我们客户端开发者的转型之路，由于近年来过审情况严峻、金融合规转型等问题，我司大部分的 iOS 开发工程师都或多或少地兼任了 Android 、前端和小程序的开发工作，或者直接转型成前端开发工程师。所以这一年，我的主要工作内容也就涵盖了 App 的主导开发上架和部分前端项目的开发维护，与此同时，接触了 Flutter 混编、H5 首屏加载优化、重签名、多渠道包方案、抓包与防抓包技术等。\n买房从2018年10月份准备买房以来，前前后后参加了二十多次摇号，就在准备放弃摇号选择二手房的时候，终于在今年十月底摇到比较心仪的房子，在父母的帮助下多付了一些首付，贷款也顺利办理下来。中签那天，有一种不可言喻的预感，相信玄学，听了一早上的“好运来”，果然就看到了摇中的结果。实现了人生的一件大事，总算可以舒一口气，参加工作以来，一直抠抠索索，想要尽可能多地去攒些首付，如今竟然有了财务自由的感觉。\n理财考虑到买房的时候，需要不定时进行验资登记，加之去年 P2P 暴雷至今没有兑付的惨痛经历，今年没有分配太多的资产放在基金股票上面，基本上还是选择保本的活期/短期低收益理财。值得欣慰的是，年中还负百分之十几的基金理财的如今终于回本了。\n有人说，理财是最好的副业。希望接下来能多抽一些时间来修习好这门功课。\n游戏游戏方面，自我感觉不是很有天赋的人，为了和朋友同事有更多共同语言，开始打王者荣耀，关注电竞行业。精打细算的我，居然也成为了氪金玩家，为了不浪费花钱升级的战令，S16赛季排位打上了一次最强王者。谈及王者荣耀的火爆，很多人认为不过是抄袭英雄联盟，但不得不说，腾讯在这款游戏的产品设计和运营上确实是非常成功的。它很大程度上弥补了竞技对战类游戏在MOBA类手游的空缺，游戏内的丰富场景、排位机制、氪金模式，以及游戏社交更是保证了玩家的持续活跃和留存。\n因为欣赏职业选手 Cat，今年九月份还去上海现场看了 KPL 秋季赛 eStarPro 和 RW 侠的揭幕战。这个刚满21岁的男孩，颜值并不高，操作不是顶尖，英雄池也常被诟病，却是联盟里现役选手中人气最高的。三年职业生涯，他去过巅峰，也曾坠入低谷，外界对他的质疑从未间断。但是三百六十行，行行出状元，只要有恒心有毅力，总有看到光明的一天。\n旅游这个命题，对于我来说，几年间基本上都是接近空白的，今年除了去上海看比赛的时候顺道去外滩和南京步行街逛了逛，就是 Outing 时去千岛湖感受了一下五星级酒店。没错，贫穷限制了我的消费欲望。但是，我一直相信眼界决定胸怀，胸怀决定高度。希望下一年，有时间多去看看外面的风景，多尝试新的挑战。\n感悟2019年的成长，最多地来源于心态和思维方式上的成长。\n很多领悟是经历带给我的，我开始学会思考，过去的人生里，到底做错了什么选择，到底遗失过什么，到底想到什么样的生活。\n选择有人说，选择比努力更重要。从前，我对这个说法嗤之以鼻，一度傻傻地认为努力可以弥补所有的缺憾。可以回过头来看看，发现自己已然因为一些目光短浅的选择，需要付出成倍的努力去弥补。比如实习期为了一个月多五百元的薪资放弃了大公司，而选择了一家没有太大上升空间的小公司；比如以为房地产行业会继续下行，而错过了置业的最佳时机。\n没有方向的船，任何方向都是逆风。那时的我只是愚蠢地想着要比同学的工资高一些，却忘记了，大学里辛辛苦苦熬夜写的论文、做的视频、写的项目、获的奖项，不过是第一份实习工作的敲门砖，做错了选择，很多努力就失去了价值。\n人生的岔路口上，如果明确知道自己想要什么，那就筚路蓝缕，以启山林，如果感到迷茫和困惑，不如沉下心来好好思考，或者多听取他人的经验，世事总不能万般如意，有舍才有得。\n忧患《论语》里说道：人无远虑，必有近忧。在经历资本狂欢以后，烧钱、补贴、大跃进的扩张模式，互联网的寒冬真的来了。身边的朋友、同事也相继产生了强烈的危机感，受到影响的我也开始谨慎思考自己现在应该何去何从，等五年后步入而立未来又将去往哪里。\n做技术的这几年，我深切地感受到了持续学习和自我驱动的重要性。人生就是一个不断学习的过程，有时候工作促使你不得不开始学习，而学习又能令你不断进步，从而遇到更好的工作，只有在这样的良性循环中，才能找到更适合自己的位置。但愿新的一年，能够不辜负曾经的辛苦，实现心中的愿景。\n","thumbnail":"2019/annual-summary-2019/2019.png","plink":"https://blog.fiteen.top/2019/annual-summary-2019/"},{"title":"动画详解十大经典排序算法（C语言版）","date":"2019-12-27T14:58:49.000Z","date_formatted":{"ll":"Dec 27, 2019","L":"12/27/2019","MM-DD":"12-27"},"updated":"2019-12-28T12:22:39.429Z","content":"排序算法是程序员必备的基础知识，弄明白它们的原理和实现很有必要。本文中将通过非常细节的动画展示出算法的原理，配合代码更容易理解。\n\n\n概述由于待排序的元素数量不同，使得排序过程中涉及的存储器不同，可将排序方法分为两类：一类是内部排序，指的是待排序列存放在计算机随机存储器中进行的排序过程；另一类是外部排序，指的是待排序的元素的数量很大，以致内存一次不能容纳全部记录，在排序过程中尚需对外存进行访问的排序过程。\n我们可以将常见的内部排序算法可以分成两类：\n\n\n比较类排序：通过比较来决定元素间的相对次序，时间复杂度为 O(nlogn)～O(n²)。属于比较类的有：\n\n\n\n排序算法\n时间复杂度\n最差情况\n最好情况\n空间复杂度\n排序方式\n稳定性\n\n\n\n冒泡排序\nO(n²)\nO(n²)\nO(n)\nO(1)​\nIn-place\n✔\n\n\n快速排序\nO(nlogn)​\nO(n²)\nO(nlogn)​\nO(logn)​\nIn-place\n✘\n\n\n插入排序\nO(n²)\nO(n²)\nO(n)​\nO(1)​\nIn-place\n✔\n\n\n希尔排序\nO(nlog²n)​\nO(n²)\nO(n)​\nO(1)​\nIn-place\n✘\n\n\n选择排序\nO(n²)\nO(n²)\nO(n²)\nO(1)​\nIn-place\n✘\n\n\n堆排序\nO(nlogn)​\nO(nlogn)\nO(nlogn)​\nO(1)​\nIn-place\n✘\n\n\n归并排序\nO(nlogn)​\nO(nlogn)\nO(nlogn)​\nO(n)​\nOut-place\n✔\n\n\n非比较类排序：不通过比较来决定元素间的相对次序，其时间复杂度可以突破 O(nlogn)，以线性时间运行。属于非比较类的有：\n\n\n\n排序算法\n时间复杂度\n最差情况\n最好情况\n空间复杂度\n排序方式\n稳定性\n\n\n\n桶排序\nO(n+nlog(n/r))​\nO(n²)\nO(n)​\nO(n+r)​\nOut-place\n✔\n\n\n计数排序\nO(n+r)​\nO(n+r)​\nO(n+r)​\nO(n+r)​\nOut-place\n✔\n\n\n基数排序\nO(d(n+r))​\nO(d(n+r))\nO(d(n+r))\nO(n+r)​\nOut-place\n✔\n\n\n名次解释：\n时间/空间复杂度：描述一个算法执行时间/占用空间与数据规模的增长关系\nn：待排序列的个数\nr：“桶”的个数（上面的三种非比较类排序都是基于“桶”的思想实现的）\nd：待排序列的最高位数\nIn-place：原地算法，指的是占用常用内存，不占用额外内存。空间复杂度为 O(1) 的都可以认为是原地算法\nOut-place：非原地算法，占用额外内存\n稳定性：假设待排序列中两元素相等，排序前后这两个相等元素的相对位置不变，则认为是稳定的。\n冒泡排序冒泡排序（Bubble Sort），顾名思义，就是指越小的元素会经由交换慢慢“浮”到数列的顶端。\n算法原理\n从左到右，依次比较相邻的元素大小，更大的元素交换到右边；\n从第一组相邻元素比较到最后一组相邻元素，这一步结束最后一个元素必然是参与比较的元素中最大的元素；\n按照大的居右原则，重新从左到后比较，前一轮中得到的最后一个元素不参与比较，得出新一轮的最大元素；\n按照上述规则，每一轮结束会减少一个元素参与比较，直到没有任何一组元素需要比较。\n\n动图演示\n代码实现12345678910void bubble_sort(int arr[], int n) &#123;    int i, j;    for (i = 0; i &lt; n - 1; i++) &#123;        for (j = 0; j &lt; n - i - 1; j++) &#123;            if (arr[j] &gt; arr[j + 1]) &#123;                swap(arr, j, j+1);            &#125;        &#125;    &#125;&#125;\n算法分析冒泡排序属于交换排序，是稳定排序，平均时间复杂度为 O(n²)，空间复杂度为 O(1)。\n但是我们常看到冒泡排序的最优时间复杂度是 O(n)，那要如何优化呢？\n我们可以用一个 flag 参数记录新一轮的排序中元素是否做过交换，如果没有，说明前面参与比较过的元素已经是正序，那就没必要再从头比较了。代码实现如下：\n12345678910111213void bubble_sort_quicker(int arr[], int n) &#123;    int i, j, flag;    for (i = 0; i &lt; n - 1; i++) &#123;        flag = 0;        for (j = 0; j &lt; n - i - 1; j++) &#123;            if (arr[j] &gt; arr[j + 1]) &#123;                swap(arr, j, j+1);                flag = 1;            &#125;        &#125;        if (!flag) return;    &#125;&#125;\n\n\n快速排序快速排序（Quick Sort），是冒泡排序的改进版，之所以“快速”，是因为使用了分治法。它也属于交换排序，通过元素之间的位置交换来达到排序的目的。\n基本思想在序列中随机挑选一个元素作基准，将小于基准的元素放在基准之前，大于基准的元素放在基准之后，再分别对小数区与大数区进行排序。\n一趟快速排序的具体做法是：\n\n设两个指针 i 和 j，分别指向序列的头部和尾部；\n先从 j 所指的位置向前搜索，找到第一个比基准小的值，把它与基准交换位置；\n再从 i 所指的位置向后搜索，找到第一个比基准大的值，把它与基准交换位置；\n重复 2、3 两步，直到 i = j。\n\n仔细研究一下上述算法我们会发现，在排序过程中，对基准的移动其实是多余的，因为只有一趟排序结束时，也就是 i = j 的位置才是基准的最终位置。\n由此可以优化一下算法：\n\n设两个指针 i 和 j，分别指向序列的头部和尾部；\n先从 j 所指的位置向前搜索，找到第一个比基准小的数值后停下来，再从 i 所指的位置向后搜索，找到第一个比基准大的数值后停下来，把 i 和 j 指向的两个值交换位置；\n重复步骤2，直到 i = j，最后将相遇点指向的值与基准交换位置。\n\n动图演示\n代码实现这里取序列的第一个元素为基准。\n123456789101112131415161718192021/* 选取序列的第一个元素作为基准 */int select_pivot(int arr[], int low) &#123;    return arr[low];&#125;void quick_sort(int arr[], int low, int high) &#123;    int i, j, pivot;    if (low &gt;= high) return;    pivot = select_pivot(arr, low);    i = low;    j = high;    while (i != j) &#123;        while (arr[j] &gt;= pivot &amp;&amp; i &lt; j) j--;        while (arr[i] &lt;= pivot &amp;&amp; i &lt; j) i++;        if (i &lt; j) swap(arr, i, j);    &#125;    arr[low] = arr[i];    arr[i] = pivot;    quick_sort(arr, low, i - 1);    quick_sort(arr, i + 1, high);&#125;\n算法分析快速排序是不稳定排序，它的平均时间复杂度为 O(nlogn)，平均空间复杂度为 O(logn)。\n快速排序中，基准的选取非常重要，它将影响排序的效率。举个例子，假如序列本身顺序随机，快速排序是所有同数量级时间复杂度的排序算法中平均性能最好的，但如果序列本身已经有序或基本有序，直接选取固定位置，例如第一个元素作为基准，会使快速排序就会沦为冒泡排序，时间复杂度为 O(n^2)。为了避免发生这种情况，引入下面两种获取基准的方法：\n随机选取\n就是选取序列中的任意一个数为基准的值。\n12345678/* 随机选择基准的位置，区间在 low 和 high 之间 */int select_pivot_random(int arr[], int low, int high) &#123;    srand((unsigned)time(NULL));    int pivot = rand()%(high - low) + low;    swap(arr, pivot, low);        return arr[low];&#125;\n\n三者取中\n就是取起始位置、中间位置、末尾位置指向的元素，对这三个元素排序后取中间数作为基准。\n1234567891011/* 取起始位置、中间位置、末尾位置指向的元素三者的中间值作为基准 */int select_pivot_median_of_three(int arr[], int low, int high) &#123;    // 计算数组中间的元素的下标    int mid = low + ((high - low) &gt;&gt; 1);    // 排序，使 arr[mid] &lt;= arr[low] &lt;= arr[high]    if (arr[mid] &gt; arr[high]) swap(arr, mid, high);    if (arr[low] &gt; arr[high]) swap(arr, low, high);    if (arr[mid] &gt; arr[low]) swap(arr, low, mid);    // 使用 low 位置的元素作为基准    return arr[low];&#125;\n\n经验证明，三者取中的规则可以大大改善快速排序在最坏情况下的性能。\n插入排序直接插入排序（Straight Insertion Sort），是一种简单直观的排序算法，它的基本操作是不断地将尚未排好序的数插入到已经排好序的部分，好比打扑克牌时一张张抓牌的动作。在冒泡排序中，经过每一轮的排序处理后，序列后端的数是排好序的；而对于插入排序来说，经过每一轮的排序处理后，序列前端的数都是排好序的。\n基本思想先将第一个元素视为一个有序子序列，然后从第二个元素起逐个进行插入，直至整个序列变成元素非递减有序序列为止。如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入大相等元素的后面。整个排序过程进行 n-1 趟插入。\n动图演示\n代码实现123456789void insertion_sort(int arr[], int n) &#123;    int i, j, temp;    for (i = 1; i &lt; n; i++) &#123;        temp = arr[i];        for (j = i; j &gt; 0 &amp;&amp; arr[j - 1] &gt; temp; j--)            arr[j] = arr[j - 1];        arr[j] = temp;    &#125;&#125;\n\n算法分析插入排序是稳定排序，平均时间复杂度为 O(n²)，空间复杂度为 O(1)。\n希尔排序希尔排序（Shell’s Sort）是第一个突破 O(n²) 的排序算法，是直接插入排序的改进版，又称“缩小增量排序”（Diminishing Increment Sort）。它与直接插入排序不同之处在于，它会优先比较距离较远的元素。\n基本思想先将整个待排序列分割成若干个字序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行一次直接插入排序。\n子序列的构成不是简单地“逐段分割”，将相隔某个增量的记录组成一个子序列，让增量逐趟缩短，直到增量为 1 为止。\n动图演示\n代码实现增量序列可以有各种取法，例如上面动图所示，增量序列满足 [n / 2, n / 2 / 2, …, 1]，n 是序列本身的长度，这也是一种比较流行的增量序列定义方式。这时希尔排序的算法可以通过下面的代码实现：\n1234567891011void shell_sort_split_half(int arr[], int n) &#123;    int i, j, dk, temp;    for (dk = n &gt;&gt; 1; dk &gt; 0; dk = dk &gt;&gt; 1) &#123;        for (i = dk; i &lt; n; i++) &#123;            temp = arr[i];            for (j = i - dk; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j -= dk)                arr[j + dk] = arr[j];            arr[j + dk] = temp;        &#125;    &#125;&#125;\n\n增量序列也可以有其它的定义方式，那么希尔排序的实现可以归纳成这样：\n1234567891011121314151617181920void shell_insert(int arr[], int n, int dk) &#123;    int i, j, temp;    for (i = dk; i &lt; n; i += dk) &#123;        temp = arr[i];        j = i - dk;        while (j &gt;= 0 &amp;&amp; temp &lt; arr[j]) &#123;            arr[j + dk] = arr[j];            j -= dk;        &#125;        arr[j + dk] = temp;    &#125;&#125;void shell_sort(int arr[], int n, int dlta[], int t) &#123;    int k;    for (k = 0; k &lt; t; ++k) &#123;        // 一趟增量为 dlta[k] 的插入排序        shell_insert(arr, n, dlta[k]);    &#125;&#125;\n\n算法分析希尔排序是不稳定排序，它的分析是一个复杂的问题，因为它的运行时间依赖于增量序列的选择，它的平均时间复杂度为O(n^1.3)，最好情况是 O(n)，最差情况是 O(n²)。空间复杂度为 O(1)。\n选择排序选择排序（Selection Sort）是一种简单直观的排序算法。它的基本思想就是，每一趟 n-i+1(i=1,2,…,n-1)个记录中选取关键字最小的记录作为有序序列的第 i 个记录。\n算法步骤简单选择排序：\n\n在未排序序列中找到最小（大）元素，存放到排序序列的起始位置;\n在剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾;\n重复步骤2，直到所有元素排序完毕。\n\n动图演示\n代码实现1234567891011void selection_sort(int arr[], int n) &#123;    int i, j;    for (i = 0; i &lt; n - 1; i++) &#123;        int min = i;        for (j = i + 1; j &lt; n; j++) &#123;            if (arr[j] &lt; arr[min])                min = j;        &#125;        swap(arr, min, i);    &#125;&#125;\n\n算法分析选择排序是不稳定排序，时间复杂度固定为 O(n²)，因此它不适用于数据规模较大的序列。不过它也有优点，就是不占用额外的内存空间。\n堆排序堆排序（Heap Sort）是指利用堆这种数据结构所设计的一种排序算法。堆的特点：\n\n一颗完全二叉树（也就是会所生成节点的顺序是：从上往下、从左往右）\n每一个节点必须满足父节点的值不大于/不小于子节点的值\n\n基本思想实现堆排序需要解决两个问题：\n\n如何将一个无序序列构建成堆？\n\n如何在输出堆顶元素后，调整剩余元素成为一个新的堆？\n\n\n以升序为例，算法实现的思路为：\n\n建立一个 build_heap 函数，将数组 tree[0,…n-1] 建立成堆，n 表示数组长度。函数里需要维护的是所有节点的父节点，最后一个子节点下标为 n-1，那么它对应的父节点下标就是(n-1-1)/2。\n构建完一次堆后，最大元素就会被存放在根节点 tree[0]。将 tree[0] 与最后一个元素交换，每一轮通过这种不断将最大元素后移的方式，来实现排序。\n而交换后新的根节点可能不满足堆的特点了，因此需要一个调整函数 heapify 来对剩余的数组元素进行最大堆性质的维护。如果 tree[i] 表示其中的某个节点，那么 tree[2*i+1] 是左孩子，tree[2*i+2] 是右孩子，选出三者中的最大元素的下标，存放于 max 值中，若 max 不等于 i，则将最大元素交换到 i 下标的位置。但是，此时以 tree[max] 为根节点的子树可能不满足堆的性质，需要递归调用自身。\n\n动图演示\n代码实现12345678910111213141516171819202122232425262728293031323334353637void heapify(int tree[], int n, int i) &#123;    // n 表示序列长度，i 表示父节点下标    if (i &gt;= n) return;    // 左侧子节点下标    int left = 2 * i + 1;    // 右侧子节点下标    int right = 2 * i + 2;    int max = i;    if (left &lt; n &amp;&amp; tree[left] &gt; tree[max]) max = left;    if (right &lt; n &amp;&amp; tree[right] &gt; tree[max]) max = right;    if (max != i) &#123;        swap(tree, max, i);        heapify(tree, n, max);    &#125;&#125;void build_heap(int tree[], int n) &#123;    // 树最后一个节点的下标    int last_node = n - 1;    // 最后一个节点对应的父节点下标    int parent = (last_node - 1) / 2;    int i;    for (i = parent; i &gt;= 0; i--) &#123;        heapify(tree, n, i);    &#125;&#125;void heap_sort(int tree[], int n) &#123;    build_heap(tree, n);    int i;    for (i = n - 1; i &gt;= 0; i--) &#123;        // 将堆顶元素与最后一个元素交换        swap(tree, i, 0);        // 调整成大顶堆        heapify(tree, i, 0);    &#125;&#125;\n\n算法分析堆排序是不稳定排序，适合数据量较大的序列，它的平均时间复杂度为 Ο(nlogn)，空间复杂度为 O(1)。此外，堆排序仅需一个记录大小供交换用的辅助存储空间。\n归并排序归并排序（Merge Sort）是建立在归并操作上的一种排序算法。它和快速排序一样，采用了分治法。\n基本思想归并的含义是将两个或两个以上的有序表组合成一个新的有序表。也就是说，从几个数据段中逐个选出最小的元素移入新数据段的末尾，使之有序。\n那么归并排序的算法我们可以这样理解：\n假如初始序列含有 n 个记录，则可以看成是 n 个有序的子序列，每个子序列的长度为 1。然后两两归并，得到 n/2 个长度为2或1的有序子序列；再两两归并，……，如此重复，直到得到一个长度为 n 的有序序列为止，这种排序方法称为 二路归并排序，下文介绍的也是这种排序方式。\n动图演示\n代码实现123456789101112131415161718192021222324252627/* 将 arr[L..M] 和 arr[M+1..R] 归并 */void merge(int arr[], int L, int M, int R) &#123;    int LEFT_SIZE = M - L + 1;    int RIGHT_SIZE = R - M;    int left[LEFT_SIZE];    int right[RIGHT_SIZE];    int i, j, k;    // 以 M 为分割线，把原数组分成左右子数组    for (i = L; i &lt;= M; i++) left[i - L] = arr[i];    for (i = M + 1; i &lt;= R; i++) right[i - M - 1] = arr[i];    // 再合并成一个有序数组（从两个序列中选出最小值依次插入）    i = 0; j = 0; k = L;    while (i &lt; LEFT_SIZE &amp;&amp; j &lt; RIGHT_SIZE) arr[k++] = left[i] &lt; right[j] ? left[i++] : right[j++];    while (i &lt; LEFT_SIZE) arr[k++] = left[i++];    while (j &lt; RIGHT_SIZE) arr[k++] = right[j++];&#125;void merge_sort(int arr[], int L, int R) &#123;    if (L == R) return;    // 将 arr[L..R] 平分为 arr[L..M] 和 arr[M+1..R]    int M = (L + R) / 2;    // 分别递归地将子序列排序为有序数列    merge_sort(arr, L, M);    merge_sort(arr, M + 1, R);    // 将两个排序后的子序列再归并到 arr    merge(arr, L, M, R);&#125;\n\n算法分析归并排序是稳定排序，它和选择排序一样，性能不受输入数据的影响，但表现比选择排序更好，它的时间复杂度始终为 O(nlogn)，但它需要额外的内存空间，空间复杂度为 O(n)。\n桶排序桶排序（Bucket sort）是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。\n桶排序的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（也有可能是使用别的排序算法或是以递归方式继续用桶排序进行排序）。\n算法步骤\n设置固定数量的空桶；\n把数据放在对应的桶内；\n分别对每个非空桶内数据进行排序；\n拼接非空的桶内数据，得到最终的结果。\n\n动图演示\n代码实现123456789101112131415161718192021222324252627282930313233void bucket_sort(int arr[], int n, int r) &#123;    if (arr == NULL || r &lt; 1) return;    // 根据最大/最小元素和桶数量，计算出每个桶对应的元素范围    int max = arr[0], min = arr[0];    int i, j;    for (i = 1; i &lt; n; i++) &#123;        if (max &lt; arr[i]) max = arr[i];        if (min &gt; arr[i]) min = arr[i];    &#125;    int range = (max - min + 1) / r + 1;    // 建立桶对应的二维数组，一个桶里最多可能出现 n 个元素    int buckets[r][n];    memset(buckets, 0, sizeof(buckets));    int counts[r];    memset(counts, 0, sizeof(counts));    for (i = 0; i &lt; n; i++) &#123;        int k = (arr[i] - min) / range;        buckets[k][counts[k]++] = arr[i];    &#125;    int index = 0;    for (i = 0; i &lt; r; i++) &#123;        // 分别对每个非空桶内数据进行排序，比如计数排序        if (counts[i] == 0) continue;        counting_sort(buckets[i], counts[i]);        // 拼接非空的桶内数据，得到最终的结果        for (j = 0; j &lt; counts[i]; j++) &#123;            arr[index++] = buckets[i][j];        &#125;    &#125;&#125;\n算法分析桶排序是稳定排序，但仅限于桶排序本身，假如桶内排序采用了快速排序之类的非稳定排序，那么就是不稳定的。\n时间复杂度桶排序的时间复杂度可以这样看：\n\nn 次循环，每个数据装入桶\nr 次循环，每个桶中的数据进行排序（每个桶中平均有 n/r 个数据）\n\n假如桶内排序用的是选择排序这类时间复杂度较高的排序，整个桶排序的时间复杂度就是 O(n)+O(n²)，视作 O(n²)，这是最差的情况；假如桶内排序用的是比较先进的排序算法，时间复杂度为 O(nlogn)，那么整个桶排序的时间复杂度为 O(n)+O(r*(n/r)*log(n/r))=O(n+nlog(n/r))。k=nlog(n/r)，桶排序的平均时间复杂度为 O(n+k)。当 r 接近于 n 时，k 趋近于 0，这时桶排序的时间复杂度是最优的，就可以认为是 O(n)。也就是说如果数据被分配到同一个桶中，排序效率最低；但如果数据可以均匀分配到每一个桶中，时间效率最高，可以线性时间运行。但同样地，桶越多，空间就越大。\n空间复杂度占用额外内存，需要创建 r 个桶的额外空间，以及 n 个元素的额外空间，所以桶排序的空间复杂度为 O(n+r)。\n计数排序计数排序（Counting Sort）是一种非比较性质的排序算法，利用了桶的思想。它的核心在于将输入的数据值转化为键存储在额外开辟的辅助空间中，也就是说这个辅助空间的长度取决于待排序列中的数据范围。\n如何转化成桶思想来理解呢？我们设立 r 个桶，桶的键值分别对应从序列最小值升序到最大值的所有数值。接着，按照键值，依次把元素放进对应的桶中，然后统计出每个桶中分别有多少元素，再通过对桶内数据的计算，即可确定每一个元素最终的位置。\n算法步骤\n找出待排序列中最大值 max 和最小值 min，算出序列的数据范围 r = max - min + 1，申请辅助空间 C[r]；\n遍历待排序列，统计序列中每个值为 i 的元素出现的次数，记录在辅助空间的第 i 位；\n对辅助空间内的数据进行计算（从空间中的第一个元素开始，每一项和前一项相加），以确定值为 i 的元素在数组中出现的位置；\n反向填充目标数组：将每个元素 i 放在目标数组的第 C[i] 位，每放一个元素就将 C[i] 减1，直到 C 中所有值都是 0\n\n动图演示\n代码实现1234567891011121314151617181920212223void counting_sort(int arr[], int n) &#123;    if (arr == NULL) return;    // 定义辅助空间并初始化    int max = arr[0], min = arr[0];    int i;    for (i = 1; i &lt; n; i++) &#123;        if (max &lt; arr[i]) max = arr[i];        if (min &gt; arr[i]) min = arr[i];    &#125;    int r = max - min + 1;    int C[r];    memset(C, 0, sizeof(C));    // 定义目标数组    int R[n];    // 统计每个元素出现的次数    for (i = 0; i &lt; n; i++) C[arr[i] - min]++;    // 对辅助空间内数据进行计算    for (i = 1; i &lt; r; i++) C[i] += C[i - 1];    // 反向填充目标数组    for (i = n - 1; i &gt;= 0; i--) R[--C[arr[i] - min]] = arr[i];    // 目标数组里的结果重新赋值给 arr    for (i = 0; i &lt; n; i++) arr[i] = R[i];&#125;\n算法分析计数排序属于非交换排序，是稳定排序，适合数据范围不显著大于数据数量的序列。\n时间复杂度它的时间复杂度是线性的，为 O(n+r)，r 表示待排序列中的数据范围，也就是桶的个数。可以这样理解：将 n 个数据依次放进对应的桶中，再从 r 个桶中把数据按顺序取出来。\n空间复杂度占用额外内存，还需要 r 个桶，因此空间复杂度是 O(n+r)，计数排序快于任何比较排序算法，但这是通过牺牲空间换取时间来实现的。\n基数排序基数排序（Radix Sort）是非比较型排序算法，它和计数排序、桶排序一样，利用了“桶”的概念。基数排序不需要进行记录关键字间的比较，是一种借助多关键字排序的思想对单逻辑关键字进行排序的方法。比如数字100，它的个位、十位、百位就是不同的关键字。\n那么，对于一组乱序的数字，基数排序的实现原理就是将整数按位数（关键字）切割成不同的数字，然后按每个位数分别比较。对于关键字的选择，有最高位优先法（MSD法）和最低位优先法（LSD法）两种方式。MSD 必须将序列先逐层分割成若干子序列，然后再对各子序列进行排序；而 LSD 进行排序时，不必分成子序列，对每个关键字都是整个序列参加排序。\n算法步骤以 LSD 法为例：\n\n将所有待比较数值（非负整数）统一为同样的数位长度，数位不足的数值前面补零\n从最低位（个位）开始，依次进行一次排序\n从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列\n\n如果要支持负数参加排序，可以将序列中所有的值加上一个常数，使这些值都成为非负数，排好序后，所有的值再减去这个常数。\n动图演示\n代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546// 基数，范围0~9#define RADIX 10void radix_sort(int arr[], int n) &#123;    // 获取最大值和最小值    int max = arr[0], min = arr[0];    int i, j, l;    for (i = 1; i &lt; n; i++) &#123;        if (max &lt; arr[i]) max = arr[i];        if (min &gt; arr[i]) min = arr[i];    &#125;    // 假如序列中有负数，所有数加上一个常数，使序列中所有值变成正数    if (min &lt; 0) &#123;        for (i = 0; i &lt; n; i++) arr[i] -= min;        max -= min;    &#125;    // 获取最大值位数    int d = 0;    while (max &gt; 0) &#123;        max /= RADIX;        d ++;    &#125;    int queue[RADIX][n];    memset(queue, 0, sizeof(queue));    int count[RADIX] = &#123;0&#125;;    for (i = 0; i &lt; d; i++) &#123;        // 分配数据        for (j = 0; j &lt; n; j++) &#123;            int key = arr[j] % (int)pow(RADIX, i + 1) / (int)pow(RADIX, i);            queue[key][count[key]++] = arr[j];        &#125;        // 收集数据        int c = 0;        for (j = 0; j &lt; RADIX; j++) &#123;            for (l = 0; l &lt; count[j]; l++) &#123;                arr[c++] = queue[j][l];                queue[j][l] = 0;            &#125;            count[j] = 0;        &#125;    &#125;    // 假如序列中有负数，收集排序结果时再减去前面加上的常数    if (min &lt; 0) &#123;        for (i = 0; i &lt; n; i++) arr[i] += min;    &#125;&#125;\n\n算法分析基数排序是稳定排序，适用于关键字取值范围固定的排序。\n时间复杂度基数排序可以看作是若干次“分配”和“收集”的过程。假设给定 n 个数，它的最高位数是 d，基数（也就是桶的个数）为 r，那么可以这样理解：共进行 d 趟排序，每趟排序都要对 n 个数据进行分配，再从 r 个桶中收集回来。所以算法的时间复杂度为 O(d(n+r))，在整数的排序中，r = 10，因此可以简化成 O(dn)，是线性阶的排序。\n空间复杂度占用额外内存，需要创建 r 个桶的额外空间，以及 n 个元素的额外空间，所以基数排序的空间复杂度为 O(n+r)。\n计数排序 &amp; 桶排序 &amp; 基数排序这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：\n\n桶排序：每个桶存储一定范围的数值，适用于元素尽可能分布均匀的排序；\n计数排序：每个桶只存储单一键值，适用于最大值和最小值尽可能接近的排序；\n基数排序：根据键值的每位数字来分配桶，适用于非负整数间的排序，且最大值和最小值尽可能接近。\n\n\n本文关联项目地址\n","plink":"https://blog.fiteen.top/2019/sorting-algorithm/"},{"title":"还没抢到 HPV？试试这串 JS","date":"2019-11-20T15:42:11.000Z","date_formatted":{"ll":"Nov 20, 2019","L":"11/20/2019","MM-DD":"11-20"},"updated":"2020-01-13T08:52:03.717Z","content":"年初时候了解到了 HPV，几个月里，经历了若干次失败的尝试，功夫不负有心人，今天终于如愿抢到了疫苗。我决定将我期间的经历和尝试记录下来，如果你也有需要，不妨看一看。\n\n\n什么是 HPVHPV 英文名称 Human papillomavirus，西医学名“人乳头瘤病毒”，是一个拥有一百多种型号的家族。在女性恶性肿瘤中，宫颈癌的发病率仅次于乳腺癌，超过90%的宫颈癌病例都与 HPV 感染有关。HPV 有三种类型：二价、四价、九价，下面是简单的对比表：\n\n\n\n疫苗种类\n二价\n四价\n九价\n\n\n\n有效预防的 HPV 型号\n6，18\n6，11，16，18\n6，11，16，18，31，33，45，52，58\n\n\n国内规定的接种年龄\n9-45周岁\n20-45周岁\n16-26周岁\n\n\n接种时间\n0，1，6个月\n0，2，6个月\n0，2，6个月\n\n\n参考价格（3针）\n1740元\n2394元\n3894元\n\n\n主要功能\n预防84.5%的宫颈癌\n预防84.5%的宫颈癌金和90%的生殖器疣\n预防92.1%的宫颈癌和90%的生殖器疣\n\n\n杭州及周边疫苗预约信息从2019年2月27日至今，我吐血整理了微信公众号“杭州本地宝”中发布过的四价和九价的疫苗预约点，若几次开放的数据不一致，以最近的为准，具体信息如下：\n\n\n\n预约点\nHPV 类型（价）\n预约方式\n预约条件\n开放人数/次\n\n\n\n杭州东新\n四/九\n问卷星\n不限户籍\n100\n\n\n杭州湖滨\n九\n问卷星\n不限户籍\n100\n\n\n杭州凯旋\n九\n支付宝\n不限户籍\n230/350\n\n\n杭州凯旋\n四\n现场\n不限户籍\n100\n\n\n杭州朝晖\n四\n电话/问卷星\n不限户籍\n50～60\n\n\n杭州西溪\n四\n问卷星\n不限户籍\n不明\n\n\n杭州米市巷\n四\n问卷星\n不限户籍\n40\n\n\n杭州灵隐\n九\n问卷星\n不限户籍\n100～300\n\n\n杭州清波\n九\n问卷星\n不限户籍\n100\n\n\n杭州半山\n九\n问卷星\n不限户籍\n20\n\n\n杭州钱塘新区\n九\n网络登记\n不限户籍\n120\n\n\n杭州余杭\n九\n问卷星\n余杭户籍/参保人员/辖区内学生/持居住证\n2000\n\n\n杭州萧山\n九\n摇号\n萧山户籍/参保地在萧山\n100+\n\n\n杭州滨江\n九\n摇号\n滨江户籍/参保地在滨江\n200\n\n\n杭州大江东\n九\n摇号\n大江东范围户籍/住大江东范围满3个月\n100+\n\n\n杭州建德新安江\n九\n现场\n建德户籍/住建德满3个月\n100\n\n\n杭州富阳\n九\n网络预约\n富阳户籍/住富阳满3个月\n120\n\n\n绍兴新昌\n九\n官方微信\n新昌户籍/住新昌满3个月\n200\n\n\n绍兴上虞\n九\n现场\n上虞户籍/住上虞满3个月\n不明\n\n\n绍兴诸暨\n九\n电话\n不限户籍\n不明\n\n\n绍兴越城\n九\n现场\n不限户籍\n150～200\n\n\n绍兴柯桥/市区\n九\n官方微信\n不限户籍，但需先到医院门诊激活就诊卡\n10～100\n\n\n金华\n四/九\n微信小程序\n金华市各区户籍或持金华市社会保障市民卡\n90～225\n\n\n舟山\n九\n电话、现场\n不限户籍、本辖区优先\n不明\n\n\n衢州\n九\n现场\n不限户籍\n800\n\n\n嘉兴\n九\n电话\n户籍地或居住地在南湖（经开）区范围内\n200\n\n\n海宁\n九\n网址\n海宁户籍\n150\n\n\n临海\n九\n网络预约\n不限户籍\n30\n\n\n台州\n九\n问卷星\n不限户籍\n41\n\n\n宁波海曙\n九\n现场\n不限户籍\n不明\n\n\n宁波各区\n九\n金苗宝 App\n不限户籍\n不明\n\n\n…\n四/九\n…\n…\n…\n\n\n这里我要先吐槽一下几个小坑的预约经历：\n\n金苗宝 App，它的使用率在宁波各大医院和社区服务中心的使用率还是蛮高的，尤其是 HPV 疫苗和流感疫苗基本上都是通过这个 App 预约，但是我试过两次，都是接近预约时间，预约功能就处于瘫痪状态，估计服务器内存不够，大量请求同时访问，高并发导致服务器处于超负荷状态（我猜的）。\n杭州钱塘新区7个公众号的疫苗预约，这次预约消息是很早就放出来的，总结了前几次憨憨的失败经验，我决定借助一点技术手段，这次很容易就从页面中抓出了7个POST请求的 Request URL 和 body，查阅网上资料现学写了一个 sh 脚本，摩拳擦掌跃跃欲试，只待良辰一到，可是现实再一次打击了我，居然还是没有抢到？！！后面再 Review 了一下我的脚本，发现应该把七个请求做定时任务，进行异步执行。\n\n现在言归正传，杭州周边地区的预约地点对户籍和居住条件有限制，且多为现场或电话预约。近来疫苗供应有多起来的趋势，如果不是想打九价的女生即将超过26周岁或者有其它急迫的理由，不太建议大家离开自己的所在地区打疫苗，一来是无法刷医保，二来来回交通和时间成本也比较高。因此我建议：\n浙江省内（非杭州）户籍的女生：关注自己户籍所在地的疾控中心微信公众号，如富阳疾控、嘉兴疾控等，及时跟进公众号发布的信息。\n萧山、余杭、大江东、滨江户籍或参保地在这四地的女生：不要错过摇号的时间，毕竟其他区的女生都得不到这个机会。\n其他女生：能尝试的都可以试一下，尤其是江干凯旋中心的支付宝预约和杭州主城区各街道提供的的问卷星预约。输入问卷时，可以事先在输入法里设置快捷键，输入简单的字符串就能弹出个人信息，这样速度又快，也不担心填错。如果还是不行，下面介绍的小技巧，也许对你有帮助。\n支付宝抢疫苗攻略支付宝预约页面和微信不一样，他允许提早填好信息，非本人也可以帮忙预约，且页面上有倒计时，你只需要掐好提交按钮 enable 的时间，就看谁手速更快，网速更好了。\n根据成功人士的建议：一定要提早十多分钟进页面填好信息，千万不要中途退出！！！亲测在有次手贱退出去了，然后就一直在页面上欣赏蚂蚁了（手动微笑）。\n问卷星抢疫苗攻略问卷星是我成功抢到疫苗的渠道，之前几个预约点在微信公众号里提供的问卷星链接是可以在电脑网页里打开的，当时我查看了一下它的前端代码，大概是这样：\n\n\n这令我们发现问卷星的几个输入框其实是有明显规律的，输入的值会成为 id 分别为 q1、q2、q3、q4 的元素的value，哪怕问卷中的问题顺序发生了调整，我们也只需要通过模糊匹配，找到对应的 div id 和 input id 即可。\n基本上预约信息上需要填写的不外乎姓名、联系方式、身份证、年龄等，这样你就可以引用下面这串 JS。\n123456789101112131415161718192021222324252627javascript: void((function() &#123;    if ($(\"div1\") == null) &#123;        setTimeout(function() &#123;            location.reload()        &#125;,        100);        return;    &#125;    var hash = [[\"这里换成你的真实姓名\", /(姓名)|(名字)/], [\"这里换成你的手机号\", /(手机)|(联系方式)/], [\"这里换成你的年龄（周岁）\", /(年龄)/], [\"这里换成你的身份证\", /(身份证)|(证件)/], ];    function $(a) &#123;        return document.getElementById(a)    &#125;    for (var i = 1;; i++) &#123;        if ($(\"div\" + i) == null) break;        if (!$(\"q\" + i)) continue;        var title = $(\"div\" + i).innerHTML;        for (var j = 0; j &lt; hash.length; j++) &#123;            if (hash[j][1].test(title)) &#123;                $(\"q\" + i).value = hash[j][0];                break;            &#125;        &#125;    &#125;&#125;)());function validate() &#123;    return true;&#125;\n\n打开浏览器的开发者模式，在控制台中粘贴这串 JS，回车，网页上就会自动注入信息。\n\n\n10月30日这一天，因为写好了这个“外挂”，我对抢疫苗非常信心满满，不料这次他们设置了“只允许从微信中填写” 和“获取微信用户昵称、性别等（需登录）”，可见问卷设计者也在和我们在斗智斗勇啊🤦‍♀️。\n\n\n第一个解决起来也很简单，只需要用微信开发者工具打开网址即可。但是第二种我暂时没有找到解决方案，因为按照微信官方文档中所说，微信开发者工具只能调试自己绑定过的公众号，不过好在这次下城区东新街道社区卫生服务中心没有强制要求微信登录。\n最后，再感叹一下技术改变生活，nice～\n","thumbnail":"2019/oh-hpv/hpv.png","plink":"https://blog.fiteen.top/2019/oh-hpv/"},{"title":"为你的 GitHub 开源项目制作高大上的徽标","date":"2019-10-01T14:17:23.000Z","date_formatted":{"ll":"Oct 1, 2019","L":"10/01/2019","MM-DD":"10-01"},"updated":"2020-01-17T11:45:32.877Z","content":"经常逛 GitHub 的同学会发现，很多优秀的开源框架里都会出现这样的小徽标。\n\n\n\n它的实现其实非常简单，借助一些小工具即可，比如：shield.io、Badgen、Open Source Badges、Version Badge、FOR THE BADGE 等。这里推荐最经典全面的 shield.io。\n静态徽标一个简单的静态徽标链接的标准格式为：\n1https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;$&#123;label&#125;-$&#123;message&#125;-$&#123;color&#125;.svg\n\nlabel 表示徽标左半部分信息，可选填，message 表示徽标右半部分信息，color 表示徽标右半部分的背景颜色。.svg 可以省略。\n如果徽标里的文字包含 -，需要写成 --，比如：\n那么  徽标，就要这样写：\n1234&#x2F;&#x2F; 加上 .svg![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;language-Objective--C-green.svg)&#x2F;&#x2F; 省略 .svg![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;language-Objective--C-green)\n\n如果你不需要两部分信息，比如我的带链接的博客徽标  ，就可以这样写：\n1[![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;@FiTeen-grey)](https:&#x2F;&#x2F;blog.fiteen.top)\n\ncolor关于 color，你可以直接填入颜色英文，比如：\n             \n也可以用这些特殊词汇来代替颜色：\n    \n或者直接通过十六进制颜色码，比如：\n  \n样式目前支持五种徽标样式，具体实现就是在 svg 路径后面拼接参数。flat 是默认样式。\n\n?style=plastic \n?style=flat \n?style=flat-square \n?style=for-the-badge \n?style=social \n\n除此之外，还有一些 query string 参数：\n\nlabel - 覆盖原有的 label 文本内容。\nlabelColor 或 labelA - 覆盖原有的 label 背景颜色，默认颜色是 grey。注意这里不能用特殊词汇表示颜色。\nlogo - 可以插入以下名称之一的徽标（bitcoin、dependabot、discord、gitlab、npm、paypal、serverfault、stackexchange、superuser、telegram、travis）或简单图标。使用简单图标站点上显示的名称来引用简单图标。如果名称中包含空格，用短划线 - 代替(例如: ?logo=visual-studio-code) 。或者插入自定义徽标 logo 图像（高度≥14px）。\nlogoColor - 设置徽标 logo 的颜色。\nlogoWidth - 设置徽标 logo 的水平宽度。\nlink - 指定徽标左/右侧部分的点击操作，格式为：?link=${label-url}&amp;link=${message-url}。\ncolor 或 colorB - 覆盖原有的 message 背景颜色。\ncacheSeconds - 设置 HTTP 缓存生存期（规则适用于根据每个徽章推断默认值，低于默认值的任何指定值都将被忽略）。还支持传统名称“ maxAge”。\n\n动态徽标动态徽标是指会随着项目状态变化，自动更新状态的徽标。GitHub 项目中常用的动态徽标有：\nbuild 状态\nTravis（.org）：https://travis-ci.org/:user/:repo\n\nTravis（.org）branch：https://travis-ci.org/:user/:repo/:branch\n\nGitHub Workflow Status：/github/workflow/build/:user/:repo/:workflow\n\nGitHub Workflow Status (branch)：https://github.com/:user/:repo/workflows/build/badge.svg?branch=${branch}\n\n\n例如 AFNetworking 的 build 状态为：\n1[![Build Status](https:&#x2F;&#x2F;travis-ci.org&#x2F;AFNetworking&#x2F;AFNetworking.svg)](https:&#x2F;&#x2F;travis-ci.org&#x2F;AFNetworking&#x2F;AFNetworking)\n\n而 Kingfisher-master 分支的 build 状态为：\n1[![Build Status](https:&#x2F;&#x2F;github.com&#x2F;onevcat&#x2F;kingfisher&#x2F;workflows&#x2F;build&#x2F;badge.svg?branch&#x3D;master)](https:&#x2F;&#x2F;github.com&#x2F;onevcat&#x2F;Kingfisher&#x2F;actions?query&#x3D;workflow%3Abuild)\n\n\n要知道项目在其它平台的持续集成状态，具体参照 shields.io - build\n许可协议\nCocoapods：/cocoapods/l/:spec\n\nGitHub：/github/license/:user/:repo\n\nNPM：/npm/l/:packageName\n\n\n比如 Kingfisher 许可协议支持 Cocoapods 和 GitHub 两种写法：  和 \ndebug的许可协议为 \n123456&#x2F;&#x2F; Kingfisher Cocoapods License：[![license](https:&#x2F;&#x2F;img.shields.io&#x2F;cocoapods&#x2F;l&#x2F;Kingfisher?style&#x3D;flat)](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;onevcat&#x2F;Kingfisher&#x2F;master&#x2F;LICENSE)&#x2F;&#x2F; Kingfisher GitHub License[![license](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;license&#x2F;onevcat&#x2F;Kingfisher)](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;onevcat&#x2F;Kingfisher&#x2F;master&#x2F;LICENSE)&#x2F;&#x2F; debug NPM Licese[![license](https:&#x2F;&#x2F;img.shields.io&#x2F;npm&#x2F;l&#x2F;debug)](https:&#x2F;&#x2F;github.com&#x2F;visionmedia&#x2F;debug&#x2F;blob&#x2F;master&#x2F;LICENSE)\n\n要知道项目在其他平台的许可协议，具体参照 shields-license。\n平台&amp;版本支持\nCocoapods Platform：/cocoapods/p/:repo\n\nCocoapods Compatible：/cocoapods/v/:repo\n\n\n比如 Kingfisher 当前支持的平台有 ，pod 版本号为 \n1234&#x2F;&#x2F; Platform Support![platform](https:&#x2F;&#x2F;img.shields.io&#x2F;cocoapods&#x2F;p&#x2F;Kingfisher)&#x2F;&#x2F; Version Support![version](https:&#x2F;&#x2F;img.shields.io&#x2F;cocoapods&#x2F;v&#x2F;Kingfisher)\n\n要知道相关的其它信息，具体参照 shields.io - platform &amp; version support\n代码测试覆盖率针对不同的代码测试平台，有不同的获取方法，例如：\n\nCodecov：https://codecov.io/github/:user/:repo/coverage.svg?token=${token}\n\nCodecov Branch： https://codecov.io/github/:user/:repo/coverage.svg?branch=${branch}&amp;token=${token}\n\n\n以 AFNetworking-master 分支为例：\n1[![codecov.io](https:&#x2F;&#x2F;codecov.io&#x2F;github&#x2F;AFNetworking&#x2F;AFNetworking&#x2F;coverage.svg?branch&#x3D;master)](https:&#x2F;&#x2F;codecov.io&#x2F;github&#x2F;AFNetworking&#x2F;AFNetworking?branch&#x3D;master)\n\n要知道项目在其它平台的测试覆盖率，具体参照 shields.io - coverage。\n项目信息\nGitHub Followers：/github/followers/:user?label=Follow\n\nGitHub Forks：/github/forks/:user/:repo?label=Fork\n\nGitHub Stars：/github/stars/:user/:repo?style=social\n\nGitHub Watchers：/github/watchers/:user/:repo?label=Watch\n\n\n以我本人的 GitHub 和项目 HTCart 为例：\n   \n12345678&#x2F;&#x2F; Followers![followers](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;followers&#x2F;fiteen?label&#x3D;Follow)&#x2F;&#x2F; Forks![forks](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;forks&#x2F;fiteen&#x2F;HTCart?label&#x3D;Fork)&#x2F;&#x2F; Stars![stars](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;stars&#x2F;fiteen&#x2F;HTCart?style&#x3D;social)&#x2F;&#x2F; Watchers![watchers](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;watchers&#x2F;fiteen&#x2F;HTCart.svg?label&#x3D;Watchers)\n\n下载量\nGitHub All Releases：/github/downloads/:user/:repo/total\n\nGitHub Releases：/github/downloads/:user/:repo/:tag/total\n\n\n以 ShadowsocksX-NG 为例：\n \n1234&#x2F;&#x2F; 总下载量![GitHub All Releases](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;downloads&#x2F;shadowsocks&#x2F;ShadowsocksX-NG&#x2F;total)&#x2F;&#x2F; v1.7.1 的下载量![GitHub Releases](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;downloads&#x2F;shadowsocks&#x2F;ShadowsocksX-NG&#x2F;v1.7.1&#x2F;total)\n\n其他当然，可支持动态的徽标还有很多，本文就不一一列举，有兴趣的可以直接在官网查询。\n","plink":"https://blog.fiteen.top/2019/make-badge-via-shields-io/"},{"title":"如何提升 Flutter 项目的开发效率","date":"2019-09-14T17:43:27.000Z","date_formatted":{"ll":"Sep 15, 2019","L":"09/15/2019","MM-DD":"09-15"},"updated":"2020-01-13T16:39:41.153Z","content":"最近参与了一个 Flutter 项目的开发，总结了一些提升开发效率的工具和方法。\n\n\nUI 可视化工具纯客户端开发者一开始可能会对写 Flutter 的界面布局会不太适应，那么这个 https://flutterstudio.app 网站可以帮助你更快熟悉 Flutter 的常用组件，在这个工具上，你可以通过简单的拖拽直接实现布局。\n\n\n代码模版我们发现在开发时，IDE 自带的代码快捷提示都不太丰富，比如要创建一个包含所有生命周期相关方法的完整的 StatefulWidget，如果能一键导入就能快速很多，这时候就可以借助代码模版。我事先在网上找到一份比较全面的模版，有需要的可以参考 code plugins，有时间我会按照自己习惯的风格再整理一份。\n如果你使用的是 VSCode，打开路径：\n\nView → Command Palette… → 输入 &gt;Preferences: Configure User Snippets\n\n\n\n然后输入 dart，这时会打开一个 dart.json 文件，把上面的内容替换进来即可。\n如果你使用的是 Android Studio，依次打开路径：\n\nPreferences → Editor → File and Code Templates\n\n在 Files 下找到 Dart File,将 json 文件里的内容粘贴进去即可。\n\n\n这样我们只需要输入简单的前缀就能直接联想出整个代码块了。 \n布局调试在实现 UI 模块的时候，经常会出现布局错乱的情况，VSCode 也为此提供了界面调试工具，在 Flutter App 调试过程中，打开路径：\n\nView → Command Palette… → 输入 &gt;Flutter: Toggle Debug Painting\n\n\n\n上面的辅助线可以帮助开发者检查布局。\n\n注意：通过 flutter run 方式启动的模拟器/真机是没法开启布局调试的。\n\n不过如果遇到难以定位的问题，建议还是使用 Androidio Studio 进行调试，它提供了下面这两个可视化工具：\nFlutter Inspector\n\n理解和查看现有布局\n诊断布局的问题\n\nFlutter Outline\n\n视图预览\n调整 widget\n\n\n\n巧用快捷键借助 IDE 中的快捷键也是我们提高开发效率的关键之一。以 Android Studio 为例：\n\noption+enter：对 widget 进行特定的操作\n\n\n\n\ncommand+option+L：格式化代码，同时，也建议你在方法尾部尽量加逗号，这有助于自动格式化程序为 Flutter 样式代码插入适当的换行符\n\ncontrol+option+O：一键清除多余的 imports\n\n……\n\n\n常用插件常用的插件基本上都可以在Dart 开源包的网站里找到，选用合适的 package 可以帮你节省不少重复实现的时间。网上的 Coder 朋友们也总结了很多不错的插件，本文里就不一一记录了。\n","thumbnail":"2019/how-to-develop-flutter-projects-more-efficiently/flutter.png","plink":"https://blog.fiteen.top/2019/how-to-develop-flutter-projects-more-efficiently/"},{"title":"V2Ray + CDN 隐藏 IP","date":"2019-09-06T18:43:01.000Z","date_formatted":{"ll":"Sep 7, 2019","L":"09/07/2019","MM-DD":"09-07"},"updated":"2020-01-17T11:34:43.835Z","content":"\n⚠️⚠️⚠️ 声明：本文内容仅限技术交流，若有用作商业或其他违规行为，与本人无关。\n\n\n\nIP 又双叒叕被墙了？\n刚换的 IP 还没捂热又凉了，怎么办？\nJust My Socks 好贵，不想买？\n下面教你一招，为你的 IP 加上双重保护锁，从此躲开“中奖”，快乐省钱又省心！\n原理先在 VPS 服务器上用 V2Ray 伪装成一个网站，再用 CDN 中转。这时流量传递的顺序是这样的：\n\n主要实现就是两点：一、借助 V2Ray 代理，将我们的流量被伪装成网站流量二、利用 CDN 中转 V2Ray 的 WebSocket 流量\n这样，GFW 只知道你与 CDN 之间的联系，不知道 VPS 的实际地址，并且 CDN 会有很多 IP 地址，GFW 也不会随意封这些 IP，毕竟也有很多正规网站在使用，因此可以基本保证 IP 的安全。\n准备工作于是，只要有了 VPS、域名和 CDN，就能实现这套方案：\n\nVPS：推荐 BandwagonHost、Vultr、Hostwinds、HostDare、谷歌免费薅一年。\n域名：通过阿里云/腾讯云/华为云等购买域名，.xyz、.top 都是性价比比较高的选择。如果不想花钱也可以在 freenom 上注册一个免费域名，运气好的话域名免费有效期可以达到12个月。\nCDN：推荐使用美国的 Cloudflare，优点是免费、无需备案。\n\nV2Ray什么是 V2RayV2Ray 是继 Shadowsocks 之后一款非常好用的代理软件，甚至比 Shadowsocks 更优秀，它拥有更多可选择的协议和传输载体，还有强大的路由功能。\n想要知道它的工作机制、本地策略、如何配置等细节可以查看 V2Ray 官网。\n搭建 V2Ray 服务V2Ray 的配置其实是比较繁琐的，可以借助这个一键安装脚本快速配置。\n安装脚本通过 SSH 连接到 VPS 主机，以 root 用户输入以下命令来安装或卸载脚本：\n1bash &lt;(curl -s -L https:&#x2F;&#x2F;git.io&#x2F;v2ray.sh)\n\n管理 V2Ray安装完成后，直接在终端输入 v2ray 就可以进行管理。面板上会出现如下选项：\n1234567891011 1. 查看 V2Ray 配置 2. 修改 V2Ray 配置 3. 下载 V2Ray 配置 &#x2F; 生成配置信息链接 &#x2F; 生成二维码链接 4. 查看 Shadowsocks 配置 &#x2F; 生成二维码链接 5. 修改 Shadowsocks 配置 6. 查看 MTProto 配置 &#x2F; 修改 MTProto 配置 7. 查看 Socks5 配置 &#x2F; 修改 Socks5 配置 8. 启动 &#x2F; 停止 &#x2F; 重启 &#x2F; 查看日志 9. 更新 V2Ray &#x2F; 更新 V2Ray 管理脚本10. 卸载 V2Ray11. 其他\n\n输入 2 进入修改 V2Ray面板，面板上会出现如下选项：\n1234567891. 修改 V2Ray 端口2. 修改 V2Ray 传输协议3. 修改 V2Ray 动态端口 (如果可以)4. 修改 用户ID ( UUID )5. 修改 TLS 域名 (如果可以)6. 修改 分流的路径 (如果可以)7. 修改 伪装的网址 (如果可以)8. 关闭 网站伪装 和 路径分流 (如果可以)9. 开启 &#x2F; 关闭 广告拦截\n\n输入 2 修改 V2Ray 传输协议，终端会输出当前的传输协议，如果不是 WebSocket + TLS，继续在终端输入 4 改成这个协议。如图下所示，依次点击回车键、输入正确的域名、将域名解析到指定的 IPv4 地址。\n\n关于域名解析，以阿里云为例，像这样添加一条 A 记录类型即可。\n\n接下来，你还会被询问是否要设置分流路径和伪装的网址，如果没有特殊要求，回复默认项即可。\n修改配置完成后，终端会输出新的配置信息，形如：\n\n你也可以通过以下命令进行快速管理：\n\nv2ray info 查看 V2Ray 配置信息\nv2ray config 修改 V2Ray 配置\nv2ray link 生成 V2Ray 配置文件链接\nv2ray infolink 生成 V2Ray 配置信息链接\nv2ray qr 生成 V2Ray 配置二维码链接\nv2ray ss 修改 Shadowsocks 配置\nv2ray ssinfo 查看 Shadowsocks 配置信息\nv2ray ssqr 生成 Shadowsocks 配置二维码链接\nv2ray status 查看 V2Ray 运行状态\nv2ray start 启动 V2Ray\nv2ray stop 停止 V2Ray\nv2ray restart 重启 V2Ray\nv2ray log 查看 V2Ray 运行日志\nv2ray update 更新 V2Ray\nv2ray update.sh 更新 V2Ray 管理脚本\nv2ray uninstall 卸载 V2Ray\n\n配置完成后，我们将信息设置到支持 V2Ray 的客户端，比如集成了 v2ray-plugin 的 ShadowsocksX-NG、V2rayU、V2RayX 等。\n这时候挂上代理访问，我们流量被伪装成网站流量，当别人访问你的域名时，打开的将是你设置的伪装网址，终于你的 IP 就不会直接暴露。\n不过我们 ping 一下域名，就会发现，显示的还是原始 IP。那么下面要做的，就是利用 CDN 中转 V2Ray 的 WebSocket 流量。\nCDN 中转这里用到的就是 Cloudflare 的免费的自带防御功能的 CDN 服务。\n注册 Cloudflare 账号前往官网注册一个账号，流程很简单，只需验证一下有效邮箱。\n使用 Cloudflare 管理域名登录后账户就会引导你添加托管域名。\n\n注意这里必须使用根域名，并确保该域名不在于 Cloudflare 官方以及百度云加速以及其他合作商的系统中。\n选择 Free 套餐添加好网站后，选择套餐，这里点击第一个 Free 方案即可。\n\n补全域名的解析纪录Cloudflare 会自动搜索域名的解析记录，如果有我们需要的 DNS 记录但是没有解析出来的，可以手动添加。\n找到伪装域名的解析记录，修改它 DNS 解析记录的代理状态为 Proxied，也就是橘色云朵。\n\n关于 Proxy state：\n\nProxied：解析DNS，同时该记录要经过代理\nDNS only：只解析DNS，不代理\n\n设置完成后，然后点击 Continue。\n替换 DNS 服务器\n我们看到 Cloudflare 提示我们将原来的两台 DNS 服务器换成新分配的服务器。前往自己的域名服务商修改 DNS 之后，等待生效，我10分钟左右就收到了 “Status Active” 的通知邮件，等待时间正常来说不超过 24h。\n效果在IP 地址查询网 上输入域名，看到解析出的 IP 归属地为 CloudFlare 公司CDN 节点。\n\n如此，原始 IP 就被隐藏了。\n同样地，如果 IP 已经被墙，也可以通过这套方案拯救。因为域名托管在 CDN 上，只要 CDN 没有被封，它就可以帮助我们代理访问到 VPS，然后借助 VPS 上的代理科学上网。\n","plink":"https://blog.fiteen.top/2019/hide-ip/"},{"title":"【译】Fucking SwiftUI","date":"2019-07-17T18:31:57.000Z","date_formatted":{"ll":"Jul 18, 2019","L":"07/18/2019","MM-DD":"07-18"},"updated":"2020-01-14T02:52:17.547Z","content":"\n原文：Fucking Swift UI - Cheat Sheet译者的话：翻译过程中，发现了原文中的几个错误，我向作者@sarunw提出意见后，直接在译文中改掉了，如果您发现文中内容有误，欢迎与我联系。\n\n\n\n关于 SwiftUI，您在下文中看到的所有答案并不是完整详细的，它只能充当一份备忘单，或是检索表。\n常见问题关于 SwiftUI 的常见问题：\n是否需要学 SwiftUI？\n是\n是否有必要现在就学 SwiftUI？\n看情况，因为 SwiftUI 目前只能在 iOS 13、macOS 10.15、tvOS 13和 watchOS 6 上运行。如果您要开发的新应用计划仅针对前面提到的 OS 系统，我会说是。 但是，如果您打算找工作或是无法确保会在此 OS 版本的客户端项目上工作，则可能要等一两年，再考虑迁移成 SwiftUI，毕竟大多数客户端工作都希望支持尽可能多的用户，这意味着您的应用必须兼容多个 OS 系统。 因此，一年后再去体验优雅的 SwiftUI 也许是最好的时机。\n是否需要学 UIKit/AppKit/WatchKit？\n是的，就长时间来看，UIKit 仍将是 iOS 架构的重要组成部分。现在的 SwiftUI 并不成熟完善，我认为即使您打算用 SwiftUI 来开发，仍然不时需要用到 UIKit。\nSwiftUI 能代替 UIKit/AppKit/WatchKit 吗?\n现在不行，但将来也许会。SwiftUI 虽然是刚刚推出的，它看起来已经很不错。我希望两者能长期共存，SwiftUI 还很年轻，它还需要几年的打磨成长才能去代替 UIKit/AppKit/WatchKit。\n如果我现在只能学习一种，那么应该选择 UIKit/AppKit/WatchKit 还是 SwiftUI？\nUIKit。 您始终可以依赖 UIKit，它用起来一直不错，且未来一段时间仍然可用。如果您直接从 SwiftUI 开始学习，可能会遗漏了解一些功能。\nSwiftUI 的控制器在哪里？\n没有了。 如今页面间直接通过响应式编程框架 Combine 交互。Combine 也作为新的通信方式替代了 UIViewController。\n要求\nXcode 11 Beta（从 Apple 官网下载）\niOS 13 / macOS 10.15 / tvOS 13 / watchOS 6\nmacOS Catalina，以便在画布上呈现 SwiftUI（从 Apple 官网下载）\n\n\n想要体验 SwiftUI 画布，但不想在您的电脑上安装 macOS Catalina beta 系统您可以与当前的 macOS 版本并行安装 Catalina。这里介绍了如何在单独的 APFS 卷上安装 macOS\n\nSwiftUI 中等效的 UIKit视图控制器\n\n\nUIKit\nSwiftUI\n备注\n\n\n\nUIViewController\nView\n-\n\n\nUITableViewController\nList\n-\n\n\nUICollectionViewController\n-\n目前，还没有 SwiftUI 的替代品，但是您可以像Composing Complex Interfaces’s tutorial里那样，使用 List 的组成来模拟布局\n\n\nUISplitViewController\nNavigationView\nBeta 5中有部分支持，但仍然无法使用。\n\n\nUINavigationController\nNavigationView\n-\n\n\nUIPageViewController\n-\n-\n\n\nUITabBarController\nTabView\n-\n\n\nUISearchController\n-\n-\n\n\nUIImagePickerController\n-\n-\n\n\nUIVideoEditorController\n-\n-\n\n\nUIActivityViewController\n-\n-\n\n\nUIAlertController\nAlert\n-\n\n\n视图和控件\n\n\nUIKit\nSwiftUI\n备注\n\n\n\nUILabel\nText\n-\n\n\nUITabBar\nTabView\n-\n\n\nUITabBarItem\nTabView\nTabView  里的 .tabItem\n\n\nUITextField\nTextField\nBeta 5中有部分支持，但仍然无法使用。\n\n\nUITableView\nList\nVStack 和 Form 也可以\n\n\nUINavigationBar\nNavigationView\nNavigationView 的一部分\n\n\nUIBarButtonItem\nNavigationView\nNavigationView 里的 .navigationBarItems\n\n\nUICollectionView\n-\n-\n\n\nUIStackView\nHStack\n.axis == .Horizontal\n\n\nUIStackView\nVStack\n.axis == .Vertical\n\n\nUIScrollView\nScrollView\n-\n\n\nUIActivityIndicatorView\n-\n-\n\n\nUIImageView\nImage\n-\n\n\nUIPickerView\nPicker\n-\n\n\nUIButton\nButton\n-\n\n\nUIDatePicker\nDatePicker\n-\n\n\nUIPageControl\n-\n-\n\n\nUISegmentedControl\nPicker\nPicker 中的一种样式 SegmentedPickerStyle\n\n\nUISlider\nSlider\n-\n\n\nUIStepper\nStepper\n-\n\n\nUISwitch\nToggle\n-\n\n\nUIToolBar\n-\n-\n\n\n框架集成 - SwiftUI 中的 UIKit将 SwiftUI 视图集成到现有应用程序中，并将 UIKit 视图和控制器嵌入 SwiftUI 视图层次结构中。\n\n\n\nUIKit\nSwiftUI\n备注\n\n\n\nUIView\nUIViewRepresentable\n-\n\n\nUIViewController\nUIViewControllerRepresentable\n-\n\n\n框架集成 - UIKit 中的 SwiftUI将 SwiftUI 视图集成到现有应用程序中，并将 UIKit 视图和控制器嵌入 SwiftUI 视图层次结构中。\n\n\n\nUIKit\nSwiftUI\n备注\n\n\n\nUIView (UIHostingController)\nView\n没有直接转换为 UIView 的方法，但是您可以使用容器视图将 UIViewController 中的视图添加到视图层次结构中\n\n\nUIViewController (UIHostingController)\nView\n-\n\n\nSwiftUI - 视图和控件Text显示一行或多行只读文本的视图。\n1Text(\"Hello World\")\n\n样式:\n12345Text(\"Hello World\")  .bold()  .italic()  .underline()  .lineLimit(2)\n\nText 中填入的字符串也用作 LocalizedStringKey，因此也会直接获得 NSLocalizedString 的特性。\n1Text(\"This text used as localized key\")\n\n直接在文本视图里格式化文本。 实际上，这不是 SwiftUI 的功能，而是 Swift 5的字符串插入特性。\n12345678910static let dateFormatter: DateFormatter = &#123;    let formatter = DateFormatter()    formatter.dateStyle = .long    return formatter&#125;()var now = Date()var body: some View &#123;    Text(\"What time is it?: \\(now, formatter: Self.dateFormatter)\")&#125;\n\n可以直接用 + 拼接 Text 文本:\n1Text(\"Hello \") + Text(\"World!\").bold()\n\n文字对齐方式：\n1Text(\"Hello\\nWorld!\").multilineTextAlignment(.center)\n\n文档\nTextField显示可编辑文本界面的控件。\n123456@State var name: String = \"John\"    var body: some View &#123;    TextField(\"Name's placeholder\", text: $name)        .textFieldStyle(RoundedBorderTextFieldStyle())        .padding()&#125;\n\n文档\nSecureField用户安全地输入私人文本的控件。\n123456@State var password: String = \"1234\"    var body: some View &#123;    SecureField($password)        .textFieldStyle(RoundedBorderTextFieldStyle())        .padding()&#125;\n\n文档\nImage显示图像的视图。\n1Image(\"foo\") //图像名字为 foo\n\n我们可以使用新的 SF Symbols：\n1Image(systemName: \"clock.fill\")\n\n您可以通过为系统图标添加样式，来匹配您使用的字体：\n123456Image(systemName: \"cloud.heavyrain.fill\")    .foregroundColor(.red)    .font(.title)Image(systemName: \"clock\")    .foregroundColor(.red)    .font(Font.system(.largeTitle).bold())\n\n为图片增加样式：\n123Image(\"foo\")    .resizable() // 调整大小，以便填充所有可用空间    .aspectRatio(contentMode: .fit)\n\n文档\nButton在触发时执行操作的控件。\n123456Button(    action: &#123;        // 点击事件    &#125;,    label: &#123; Text(\"Click Me\") &#125;)\n\n如果按钮的标签只有 Text，则可以通过下面这种简单的方式进行初始化：\n123Button(\"Click Me\") &#123;    // 点击事件&#125;\n\n您可以像这样给按钮添加属性：\n1234567891011Button(action: &#123;                &#125;, label: &#123;    Image(systemName: \"clock\")    Text(\"Click Me\")    Text(\"Subtitle\")&#125;).foregroundColor(Color.white).padding().background(Color.blue).cornerRadius(5)\n\n文档\nNavigationLink按下时会触发导航演示的按钮。它用作代替 pushViewController。\n12345678NavigationView &#123;    NavigationLink(destination:        Text(\"Detail\")        .navigationBarTitle(Text(\"Detail\"))    ) &#123;        Text(\"Push\")    &#125;.navigationBarTitle(Text(\"Master\"))&#125;\n\n为了增强可读性，可以把 destination 包装成自定义视图 DetailView 的方式：\n12345NavigationView &#123;    NavigationLink(destination: DetailView()) &#123;        Text(\"Push\")    &#125;.navigationBarTitle(Text(\"Master\"))&#125;\n\n\n但不确定是 Bug 还是设计使然，上述代码 在 Beta 5 中的无法正常执行。尝试像这样把 NavigationLink 包装进列表中试一下：\n1234567NavigationView &#123;   List &#123;       NavigationLink(destination: Text(\"Detail\")) &#123;           Text(\"Push\")       &#125;.navigationBarTitle(Text(\"Master\"))   &#125;&#125; \n\n如果 NavigationLink 的标签只有 Text ，则可以用这样更简单的方式初始化：\n1NavigationLink(\"Detail\", destination: Text(\"Detail\").navigationBarTitle(Text(\"Detail\")))\n\n文档\nToggle在开/关状态之间切换的控件。\n12345@State var isShowing = true // toggle 状态值Toggle(isOn: $isShowing) &#123;    Text(\"Hello World\")&#125;\n\n如果 Toggle 的标签只有 Text，则可以用这样更简单的方式初始化：\n1Toggle(\"Hello World\", isOn: $isShowing)\n\n文档\nPicker从一组互斥值中进行选择的控件。\n选择器样式根据其被父视图进行更改，在表单或列表下作为一个列表行显示，点击可以推出新界面展示所有的选项卡。\n1234567891011121314NavigationView &#123;    Form &#123;        Section &#123;            Picker(selection: $selection, label:                Text(\"Picker Name\")                , content: &#123;                    Text(\"Value 1\").tag(0)                    Text(\"Value 2\").tag(1)                    Text(\"Value 3\").tag(2)                    Text(\"Value 4\").tag(3)            &#125;)        &#125;    &#125;&#125;\n\n您可以使用 .pickerStyle(WheelPickerStyle())覆盖样式。\n在 iOS 13 中， UISegmentedControl 也只是 Picker 的一种样式。\n123456789@State var mapChoioce = 0var settings = [\"Map\", \"Transit\", \"Satellite\"]Picker(\"Options\", selection: $mapChoioce) &#123;    ForEach(0 ..&lt; settings.count) &#123; index in        Text(self.settings[index])            .tag(index)    &#125;&#125;.pickerStyle(SegmentedPickerStyle())\n\n\n分段控制器在iOS 13中也焕然一新了。\n\n文档\nDatePicker选择日期的控件。\n日期选择器样式也会根据其父视图进行更改，在表单或列表下作为一个列表行显示，点击可以扩展到日期选择器（就像日历 App 一样）。\n1234567891011121314151617181920@State var selectedDate = Date()var dateClosedRange: ClosedRange&lt;Date&gt; &#123;    let min = Calendar.current.date(byAdding: .day, value: -1, to: Date())!    let max = Calendar.current.date(byAdding: .day, value: 1, to: Date())!    return min...max&#125;NavigationView &#123;    Form &#123;        Section &#123;            DatePicker(                selection: $selectedDate,                in: dateClosedRange,                displayedComponents: .date,                label: &#123; Text(\"Due Date\") &#125;            )        &#125;    &#125;&#125;\n\n不在表单或列表里，它就可以作为普通的旋转选择器。\n1234567891011121314@State var selectedDate = Date()var dateClosedRange: ClosedRange&lt;Date&gt; &#123;    let min = Calendar.current.date(byAdding: .day, value: -1, to: Date())!    let max = Calendar.current.date(byAdding: .day, value: 1, to: Date())!    return min...max&#125;DatePicker(    selection: $selectedDate,    in: dateClosedRange,    displayedComponents: [.hourAndMinute, .date],    label: &#123; Text(\"Due Date\") &#125;)\n\n如果 DatePicker 的标签只有 Text，则可以用这样更简单的方式初始化：\n1234DatePicker(\"Due Date\",            selection: $selectedDate,            in: dateClosedRange,            displayedComponents: [.hourAndMinute, .date])\n\n可以使用 ClosedRange、PartialRangeThrough 和 PartialRangeFrom 来设置 minimumDate 和 maximumDate 。\n12345678DatePicker(\"Minimum Date\",    selection: $selectedDate,    in: Date()...,    displayedComponents: [.date])DatePicker(\"Maximum Date\",    selection: $selectedDate,    in: ...Date(),    displayedComponents: [.date])\n\n文档\nSlider从有界的线性范围中选择一个值的控件。\n123@State var progress: Float = 0Slider(value: $progress, from: 0.0, through: 100.0, by: 5.0)\n\nSlider 虽然没有 minimumValueImage 和 maximumValueImage 属性， 但可以借助 HStack实现。\n123456@State var progress: Float = 0HStack &#123;    Image(systemName: \"sun.min\")    Slider(value: $progress, from: 0.0, through: 100.0, by: 5.0)    Image(systemName: \"sun.max.fill\")&#125;.padding()\n\n文档\nStepper用于执行语义上递增和递减动作的控件。\n12@State var quantity: Int = 0Stepper(value: $quantity, in: 0...10, label: &#123; Text(\"Quantity \\(quantity)\")&#125;)\n\n如果您的 Stepper 的标签只有 Text，则可以用这样更简单的方式初始化：\n1Stepper(\"Quantity \\(quantity)\", value: $quantity, in: 0...10)\n\n如果您要一个自己管理的数据源的控件，可以这样写：\n123456@State var quantity: Int = 0Stepper(onIncrement: &#123;    self.quantity += 1&#125;, onDecrement: &#123;    self.quantity -= 1&#125;, label: &#123; Text(\"Quantity \\(quantity)\") &#125;)\n\n文档\nSwiftUI - 页面布局与演示HStack水平排列子元素的视图。\n创建一个水平排列的静态列表：\n12345HStack (alignment: .center, spacing: 20)&#123;    Text(\"Hello\")    Divider()    Text(\"World\")&#125;\n\n文档\nVStack垂直排列子元素的视图。\n创建一个垂直排列的静态列表：\n12345VStack (alignment: .center, spacing: 20)&#123;    Text(\"Hello\")    Divider()    Text(\"World\")&#125;\n\n文档\nZStack子元素会在 z轴方向上叠加，同时在垂直/水平轴上对齐的视图。\n12345678910ZStack &#123;    Text(\"Hello\")        .padding(10)        .background(Color.red)        .opacity(0.8)    Text(\"World\")        .padding(20)        .background(Color.red)        .offset(x: 0, y: 40)&#125;\n\n文档\nList用于显示排列一系列数据行的容器。\n创建一个静态可滚动列表：\n12345List &#123;    Text(\"Hello world\")    Text(\"Hello world\")    Text(\"Hello world\")&#125;\n\n表单里的内容可以混搭：\n1234List &#123;    Text(\"Hello world\")    Image(systemName: \"clock\")&#125;\n\n创建一个动态列表：\n1234let names = [\"John\", \"Apple\", \"Seed\"]List(names) &#123; name in    Text(name)&#125;\n\n加入分区：\n123456789List &#123;    Section(header: Text(\"UIKit\"), footer: Text(\"We will miss you\")) &#123;        Text(\"UITableView\")    &#125;    Section(header: Text(\"SwiftUI\"), footer: Text(\"A lot to learn\")) &#123;        Text(\"List\")    &#125;&#125;\n\n要使其成为分组列表，请添加 .listStyle(GroupedListStyle())：\n123456789List &#123;    Section(header: Text(\"UIKit\"), footer: Text(\"We will miss you\")) &#123;        Text(\"UITableView\")    &#125;    Section(header: Text(\"SwiftUI\"), footer: Text(\"A lot to learn\")) &#123;        Text(\"List\")    &#125;&#125;.listStyle(GroupedListStyle())\n\n文档\nScrollView滚动视图。\n1234ScrollView(alwaysBounceVertical: true) &#123;    Image(\"foo\")    Text(\"Hello World\")&#125;\n\n文档\nForm对数据输入的控件进行分组的容器，例如在设置或检查器中。\n您可以往表单中插入任何内容，它将为表单渲染适当的样式。\n12345678910111213141516171819NavigationView &#123;    Form &#123;        Section &#123;            Text(\"Plain Text\")            Stepper(value: $quantity, in: 0...10, label: &#123; Text(\"Quantity\") &#125;)        &#125;        Section &#123;            DatePicker($date, label: &#123; Text(\"Due Date\") &#125;)            Picker(selection: $selection, label:                Text(\"Picker Name\")                , content: &#123;                    Text(\"Value 1\").tag(0)                    Text(\"Value 2\").tag(1)                    Text(\"Value 3\").tag(2)                    Text(\"Value 4\").tag(3)            &#125;)        &#125;    &#125;&#125;\n\n文档\nSpacer一块既能在包含栈布局时沿主轴伸展，也能在不包含栈时沿两个轴展开的灵活空间。\n12345HStack &#123;    Image(systemName: \"clock\")    Spacer()    Text(\"Time\")&#125;\n\n文档\nDivider用于分隔其它内容的可视化元素。\n12345HStack &#123;    Image(systemName: \"clock\")    Divider()    Text(\"Time\")&#125;.fixedSize()\n\n文档\nNavigationView用于渲染视图堆栈的视图，这些视图会展示导航层次结构中的可见路径。\n123456NavigationView &#123;                List &#123;        Text(\"Hello World\")    &#125;    .navigationBarTitle(Text(\"Navigation Title\")) // 默认使用大标题样式&#125;\n\n对于旧样式标题：\n123456NavigationView &#123;                List &#123;        Text(\"Hello World\")    &#125;    .navigationBarTitle(Text(\"Navigation Title\"), displayMode: .inline)&#125;\n\n增加 UIBarButtonItem\n12345678910111213NavigationView &#123;    List &#123;        Text(\"Hello World\")    &#125;    .navigationBarItems(trailing:        Button(action: &#123;            // Add action        &#125;, label: &#123;            Text(\"Add\")        &#125;)    )    .navigationBarTitle(Text(\"Navigation Title\"))&#125;\n\n用 NavigationLink 添加 show/push 功能。\n作为 UISplitViewController：\n123456NavigationView &#123;    List &#123;        NavigationLink(\"Go to detail\", destination: Text(\"New Detail\"))    &#125;.navigationBarTitle(\"Master\")    Text(\"Placeholder for Detail\")&#125;\n\n您可以使用两种新的样式属性：stack 和 doubleColumn 为 NavigationView 设置样式。默认情况下，iPhone 和 Apple TV 上的导航栏上显示导航堆栈，而在 iPad 和 Mac 上，显示的是拆分样式的导航视图。\n您可以通过 .navigationViewStyle 重写样式：\n12345NavigationView &#123;    MyMasterView()    MyDetailView()&#125;.navigationViewStyle(StackNavigationViewStyle())\n\n在 beta 3中，NavigationView 支持拆分视图，但它仅支持非常基本的结构，其中主视图为列表，详细视图为叶视图，我期待在下一个 release 版本中能有优化补充。\n文档\nTabView使用交互式用户界面元素在多个子视图之间切换的视图。\n12345678910TabView &#123;    Text(\"First View\")        .font(.title)        .tabItem(&#123; Text(\"First\") &#125;)        .tag(0)    Text(\"Second View\")        .font(.title)        .tabItem(&#123; Text(\"Second\") &#125;)        .tag(1)&#125;\n\n标签元素支持同时显示图像和文本， 您也可以使用 SF Symbols。\n12345678910111213141516TabView &#123;    Text(\"First View\")        .font(.title)        .tabItem(&#123;            Image(systemName: \"circle\")            Text(\"First\")        &#125;)        .tag(0)    Text(\"Second View\")        .font(.title)        .tabItem(VStack &#123;            Image(\"second\")            Text(\"Second\")        &#125;)        .tag(1)&#125;\n\n您也可以省略 VStack：\n12345678910111213141516TabView &#123;    Text(\"First View\")        .font(.title)        .tabItem(&#123;            Image(systemName: \"circle\")            Text(\"First\")        &#125;)        .tag(0)    Text(\"Second View\")        .font(.title)        .tabItem(&#123;            Image(\"second\")            Text(\"Second\")        &#125;)        .tag(1)&#125;\n\n文档\nAlert一个展示警告信息的容器。\n我们可以根据布尔值显示 Alert 。\n1234567@State var isError: Bool = falseButton(\"Alert\") &#123;    self.isError = true&#125;.alert(isPresented: $isError, content: &#123;    Alert(title: Text(\"Error\"), message: Text(\"Error Reason\"), dismissButton: .default(Text(\"OK\")))&#125;)\n\n它也可与 Identifiable 项目绑定。\n123456789101112131415161718192021222324@State var error: AlertError?var body: some View &#123;    Button(\"Alert Error\") &#123;        self.error = AlertError(reason: \"Reason\")    &#125;.alert(item: $error, content: &#123; error in        alert(reason: error.reason)    &#125;)    &#125;func alert(reason: String) -&gt; Alert &#123;    Alert(title: Text(\"Error\"),            message: Text(reason),            dismissButton: .default(Text(\"OK\"))    )&#125;struct AlertError: Identifiable &#123;    var id: String &#123;        return reason    &#125;        let reason: String&#125;\n\n文档\nModal模态视图的存储类型。\n我们可以根据布尔值显示 Modal 。\n1234567891011@State var isModal: Bool = falsevar modal: some View &#123;    Text(\"Modal\")&#125;Button(\"Modal\") &#123;    self.isModal = true&#125;.sheet(isPresented: $isModal, content: &#123;    self.modal&#125;)\n\n文档\n它也可与 Identifiable 项目绑定。\n123456789101112131415161718192021@State var detail: ModalDetail?var body: some View &#123;    Button(\"Modal\") &#123;        self.detail = ModalDetail(body: \"Detail\")    &#125;.sheet(item: $detail, content: &#123; detail in        self.modal(detail: detail.body)    &#125;)    &#125;func modal(detail: String) -&gt; some View &#123;    Text(detail)&#125;struct ModalDetail: Identifiable &#123;    var id: String &#123;        return body    &#125;        let body: String&#125;\n\n文档\nActionSheet操作表视图的存储类型。\n我们可以根据布尔值显示 ActionSheet 。\n123456789101112131415161718192021@State var isSheet: Bool = falsevar actionSheet: ActionSheet &#123;    ActionSheet(title: Text(\"Action\"),                message: Text(\"Description\"),                buttons: [                    .default(Text(\"OK\"), action: &#123;                                            &#125;),                    .destructive(Text(\"Delete\"), action: &#123;                                            &#125;)                ]    )&#125;Button(\"Action Sheet\") &#123;    self.isSheet = true&#125;.actionSheet(isPresented: $isSheet, content: &#123;    self.actionSheet&#125;)\n\n它也可与 Identifiable 项目绑定。\n12345678910111213141516171819202122232425262728293031@State var sheetDetail: SheetDetail?var body: some View &#123;    Button(\"Action Sheet\") &#123;        self.sheetDetail = ModSheetDetail(body: \"Detail\")    &#125;.actionSheet(item: $sheetDetail, content: &#123; detail in        self.sheet(detail: detail.body)    &#125;)&#125;func sheet(detail: String) -&gt; ActionSheet &#123;    ActionSheet(title: Text(\"Action\"),                message: Text(detail),                buttons: [                    .default(Text(\"OK\"), action: &#123;                                            &#125;),                    .destructive(Text(\"Delete\"), action: &#123;                                            &#125;)                ]    )&#125;struct SheetDetail: Identifiable &#123;    var id: String &#123;        return body    &#125;        let body: String&#125;\n\n文档\n框架集成 - SwiftUI 中的 UIKitUIViewRepresentable表示 UIKit 视图的视图，当您想在 SwiftUI 中使用 UIView 时，请使用它。\n要使任何 UIView 在 SwiftUI 中可用，请创建一个符合 UIViewRepresentable 的包装器视图。\n1234567891011121314151617181920import UIKitimport SwiftUIstruct ActivityIndicator: UIViewRepresentable &#123;    @Binding var isAnimating: Bool        func makeUIView(context: Context) -&gt; UIActivityIndicatorView &#123;        let v = UIActivityIndicatorView()                return v    &#125;        func updateUIView(_ uiView: UIActivityIndicatorView, context: Context) &#123;        if isAnimating &#123;            uiView.startAnimating()        &#125; else &#123;            uiView.stopAnimating()        &#125;    &#125;&#125;\n\n如果您想要桥接 UIKit 里的数据绑定 (delegate, target/action) 就使用 Coordinator， 具体见 SwiftUI 教程。\n123456789101112131415161718192021222324252627282930313233343536373839import SwiftUIimport UIKitstruct PageControl: UIViewRepresentable &#123;    var numberOfPages: Int    @Binding var currentPage: Int    func makeUIView(context: Context) -&gt; UIPageControl &#123;        let control = UIPageControl()        control.numberOfPages = numberOfPages        control.addTarget(            context.coordinator,            action: #selector(Coordinator.updateCurrentPage(sender:)),            for: .valueChanged)        return control    &#125;    func updateUIView(_ uiView: UIPageControl, context: Context) &#123;        uiView.currentPage = currentPage    &#125;    func makeCoordinator() -&gt; Coordinator &#123;        Coordinator(self)    &#125;    // This is where old paradigm located    class Coordinator: NSObject &#123;        var control: PageControl        init(_ control: PageControl) &#123;            self.control = control        &#125;        @objc func updateCurrentPage(sender: UIPageControl) &#123;            control.currentPage = sender.currentPage        &#125;    &#125;&#125;\n\n文档\nUIViewControllerRepresentable表示 UIKit 视图控制器的视图。当您想在 SwiftUI 中使用 UIViewController 时，请使用它。\n要使任何 UIViewController 在 SwiftUI 中可用，请创建一个符合 UIViewControllerRepresentable 的包装器视图，具体见 SwiftUI 教程。\n12345678910111213141516171819import SwiftUIimport UIKitstruct PageViewController: UIViewControllerRepresentable &#123;    var controllers: [UIViewController]    func makeUIViewController(context: Context) -&gt; UIPageViewController &#123;        let pageViewController = UIPageViewController(            transitionStyle: .scroll,            navigationOrientation: .horizontal)        return pageViewController    &#125;    func updateUIViewController(_ pageViewController: UIPageViewController, context: Context) &#123;        pageViewController.setViewControllers(            [controllers[0]], direction: .forward, animated: true)    &#125;&#125;\n\n文档\n框架集成 - UIKit 中的 SwiftUIUIHostingController表示 SwiftUI 视图的 UIViewController。\n12let vc = UIHostingController(rootView: Text(\"Hello World\"))let vc = UIHostingController(rootView: ContentView())\n\n文档\n来源\nAPI 文档\n官方教程\nWWDC 2019\n介绍 SwiftUI: 创建您的第一个 App\nSwiftUI 基础\nSwiftUI 数据流\n使用 SwiftUI 构建自定义视图\n集成 SwiftUI\nSwiftUI 中的可访问性\n所有设备上的 SwiftUI\nwatchOS 上的 SwiftUI\n掌握 Xcode 预览\n\n\n\n","thumbnail":"2019/fucking-swift-ui/swift-ui.png","plink":"https://blog.fiteen.top/2019/fucking-swift-ui/"},{"title":"App 多渠道打包及重签名方案","date":"2019-03-02T18:41:39.000Z","date_formatted":{"ll":"Mar 3, 2019","L":"03/03/2019","MM-DD":"03-03"},"updated":"2019-12-28T12:18:25.020Z","content":"众所周知，渠道包是国内 Android 应用市场中常用的分发方式。渠道包中会包含不同的渠道信息，方便我们后续统计 App 在各分发渠道的下载量、用户量、留存率等，有针对地调整应用内容或是推广方案等。随着国内 iOS 应用上架越来越难，衍生出了很多企业包，为了方便采集数据，也会用多渠道的方案。\n\n\n另外，项目进展过程中，可能会出现一些临时新增渠道的需求，这时回到工程中重新打包是比较费时的，有没有办法加快打包速度呢？下文中分享了一些方案。\niOS 多渠道打包方案iOS 打渠道包目前想到的就只有两种方式，一种是通过多 target 方式，另一种是修改 plist 文件方式。\n多 target 方式点击项目中的 target，右键选择 Duplicate。可以修改下图标红框的三处：target 名称、plist 名称和 scheme 名称。\n\n\n判断当前是哪个 target，可以通过添加宏定义实现，方式就是在 Build Settings 找到 Preprocessor Macros，填入宏定义名。\n代码中这样判断：\n12345#ifdef  TARGET1MACROS    &#x2F;&#x2F; target1#elif defined TARGET2MACROS    &#x2F;&#x2F; target2#endif\n\n具体打包脚本就不介绍了，读者可以自行网上搜索，这种方式的缺点是一个渠道打一次，效率较低。下面着重分享修改 plist 的批量打包方式。\n修改 plist 方式下面用一个简单的 Demo 演示一下：\n第一步：创建工程名为 MultiChannelDemo 的项目，并在项目中新建一个 Channel.plist 文件，plist 中设置 Channel 字段，值为 channel01。然后在页面上设置一个 label 标签用于显示当前的渠道名称，渠道名可以通过下面的代码获取到：\n12NSDictionary *channelDic &#x3D; [NSDictionary dictionaryWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&quot;Channel&quot; ofType:@&quot;plist&quot;]];NSString *channel &#x3D; channelDic[@&quot;Channel&quot;];\n第二步：把这个项目用可用的证书正常打一个母包，解压这个 ipa 包可以获得一个名为 Payload 的文件夹，里面是一个 .app 文件，右键显示其包内容，内容如下：。\n\n\n可以看到，里面的 Channel.plist 也就是在前面工程中新建的存储渠道信息的 plist，我们会修改里面的 Channel 再生成新的渠道包。\n第三步：提取描述文件用于重签名，上一步中 Payload 的文件夹里有一个 embedded.mobileprovision 文件，这就是我们需要的文件。\n第四步：新建一个纯文本，里面输入你要新增的渠道号，如：\n\n\n第五步：写一个脚本文件，内容如下：\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#!/bin/bash# 输入的包名name=\"MultiChannelDemo\"echo \"------SDK渠道包----------\"appName=\"$&#123;name&#125;.app\"plistBuddy=\"/usr/libexec/PlistBuddy\"configName=\"Payload/$&#123;appName&#125;/Channel.plist\"ipa=\"$&#123;name&#125;.ipa\"# 输出的新包所在的文件夹名outUpdateAppDir=\"ChannelPackages\"# entitlements.plist路径entitlementsDir=\"entitlements.plist\"# 切换到当前目录currDir=$&#123;PWD&#125;cd $&#123;currDir&#125;echo \"-----$&#123;currDir&#125;\"rm -rf Payload# 解压缩-o：覆盖文件 -q：不显示解压过程unzip -o -q $&#123;ipa&#125;# 删除旧的文件夹，重新生成rm -rf $&#123;outUpdateAppDir&#125;mkdir $&#123;outUpdateAppDir&#125;# 删除旧的 entitlements.plist，重新生成rm -rf $&#123;entitlementsDir&#125;/usr/libexec/PlistBuddy -x -c \"print :Entitlements \" /dev/stdin &lt;&lt;&lt; $(security cms -D -i Payload/$&#123;appName&#125;/embedded.mobileprovision) &gt; entitlements.plistecho \"------------------------开始打包程序------------------------\"# 渠道列表文件开始打包for line in $(cat ChannelList.txt)# 循环数组，修改渠道信息do# 修改 plist 中的 Channel 值$plistBuddy -c \"Set :Channel $line\" $&#123;configName&#125;# app 重签名rm -rf Payload/$&#123;appName&#125;/_CodeSignaturecp embedded.mobileprovision \"Payload/$&#123;appName&#125;/embedded.mobileprovision\"# 填入可用的证书 IDcodesign -f -s \"iPhone Distribution: XXXXXX.\" Payload/$&#123;appName&#125;  --entitlements $&#123;entitlementsDir&#125;# 若输出 Payload/MultiChannelDemo.app: replacing existing signature 说明重签名完成# 压缩 -r:递归处理，将指定目录下的所有文件和子目录一并处理 -q:不显示处理过程zip -rq \"$&#123;outUpdateAppDir&#125;/$line.ipa\" Payloadecho \"........渠道$&#123;line&#125;打包已完成\"done\n脚本里的信息请根据你实际情况修改，。到这里准备工作都完成了，需要的文件如下图所示：\n\n\n第六步：在当前目录下执行脚本文件：\n1sh ChannelPackage.sh\n\n打包完成后生成的 ChannelPackages 文件夹下，就是我们需要的渠道包：\n\n\n这种自动化打包的方式，可以规避掉 Xcode 本身打包编译的部分时间，快速出包。\nAndroid 多渠道打包方案下文介绍的是美团技术团队开源的 Walle，它有 Gradle 插件和命令行两种使用方式，前者快速集成，后者满足自定义需求。\nGladle 插件方式配置 build.gradle在项目根目录下的 build.gradle 文件中添加 Walle 插件依赖：\n12345buildscript &#123;    dependencies &#123;        classpath 'com.meituan.android.walle:plugin:1.1.6'    &#125;&#125;\n\n在 app 目录下的 build.gradle 文件中 apply 插件：\n12345apply plugin: 'walle'dependencies &#123;    compile 'com.meituan.android.walle:library:1.1.6'&#125;\n\n配置插件在 app 目录下的 build.gradle 文件中进行渠道配置：\n12345678walle &#123;    // 指定渠道包的输出路径    apkOutputFolder = new File(\"$&#123;project.buildDir&#125;/outputs/channels\");    // 定制渠道包的APK的文件名称    apkFileNameFormat = '$&#123;appName&#125;_v$&#123;versionName&#125;_$&#123;channel&#125;.apk';    // 渠道配置文件    channelFile = new File(\"$&#123;project.getProjectDir()&#125;/channel\")&#125;\n渠道配置文件里的内容格式详见：渠道配置文件示例。\n如何获取渠道信息在需要填写渠道信息的地方引用这段代码：\n1String channel = WalleChannelReader.getChannel(this.getApplicationContext());\n\n如何生成渠道包用 assemble${variantName}Channels 指令，导出 apk 包。\n命令行方式通过命令行方式，可以不打开 IDE，直接导出新渠道的 apk。步骤如下：\n首先，新建一个文件夹，取用一个上面步骤导出的 apk 包，再下载 walle-cli-all.jar，两者都放置在这个文件夹目录下。\n然后，在文件夹目录下执行命令：\n1java -jar walle-cli-all.jar put -c $&#123;channelName&#125; $&#123;apkName&#125;.apk\n\n若上面的命令执行成功，会在当前目录下生成新的渠道包，名称为 ${apkName}_${channelName}.apk\n如果要批量写入渠道，可以这样，渠道之间用逗号隔开：\n1java -jar walle-cli-all.jar batch -c $&#123;channelName0&#125;,$&#123;channelName1&#125;,$&#123;channelName2&#125; $&#123;apkName&#125;.apk\n\n或者指定渠道配置文件：\n1java -jar walle-cli-all.jar batch -c $&#123;channelFile&#125; $&#123;apkName&#125;.apk\n\n\n如果要写入额外信息，参考官方文档。\n\n如果要检查/显示渠道，命令为：\n1java -jar walle-cli-all.jar show $&#123;apkName&#125;.apk\n\nWalle 现在既能满足新应用签名方案对安全性的要求，也能满足对渠道包打包时间的要求，有需要的可以尝试。\n","plink":"https://blog.fiteen.top/2019/solution-of-app-muti-channel-pack/"},{"title":"海外开发者账号上架总结","date":"2019-02-17T09:59:18.000Z","date_formatted":{"ll":"Feb 17, 2019","L":"02/17/2019","MM-DD":"02-17"},"updated":"2020-01-14T03:07:11.970Z","content":"\n⚠️⚠️⚠️ 声明：本文仅供技术交流，勿企图上架违法 App，否则后果自负，谢谢！\n\n\n\n背景众所周知，国内的 App 上架形势愈发严峻。尤其是金融、医疗、博彩类的 App，审核非常严格，只要开发者缺少相关资质，想通过正常流程上架基本不可能；游戏方面，新政策又要求游戏版号需要广电审批，向大批游戏公司泼了一盆冷水；随着苹果机审算法的优化，苹果爸爸可以不费人力轻松看穿你的马甲包；甚至一些不存在任何违反审核规则的应用，也有可能因为开发者账号是新号被审核人员怀疑。\n\n\n相信不少开发者对上面的“四大酷刑”都不陌生，最怕苹果爸爸深夜邮件的关心，最怕上包率要写上 kpi。\n\n\n于是，为了很多开发者将目光抛向企业包，但是企业包成本来说比较高，根据企业签的稳定性，收费从每月几百到几千不等，遇到苹果封号密集的时期，甚至会出现每日掉签的情况。一个独立的企业签名，稳定周期基本也只能保持在2-3个月左右。因此企业包的方案仅适用于一些不受限于用户留存的 App，想要一款稳定运营的 App，依然需要上架 AppStore，下面介绍的就是使用海外开发者账号上架的方案。\n如何申请账号海外个人账号的申请方式和国内的大同小异：\n\n外国人身份证信息\n国外地区的信用卡一张\n国外的联系方式（手机号码）\n海外邮箱（gmail、hotmail、Yeah等邮箱均可）\n\n申请时候记得挂海外 VPN，且在后续登录开发者中心时也是用这个 IP，频繁更换 IP 尤其是用国内的很容易被封。\n如果没有渠道获得海外个人开发者的身份信息，可以直接找第三方（某宝）购买，大约1100元人民币，对方会告知你最近哪个地区的账号比较容易上架。\n\n注意：现在使用开发者账号都强制要求进行双重验证，用自己国内的手机号是没问题的。\n\n如果你的应用涉及到内购，需要关注一下账户所属国家。因为一些国家（美国，加拿大，澳大利亚）需要去税务局报税，没法用内购，其他国家是可以正常收款的。建议使用招行的储蓄卡，其次是建行的。满$150以后苹果就会汇款给你。\n还有一个非常值得注意的问题——如何避免被封号：\n\n登录开发者账号时关闭你的 Mac/iPhone 上的 iCloud 功能和系统定位服务\n使用海外区域的 VPN，勤换 IP\n最好不要在同一台电脑，同一个IP登录多个开发者账号\n\nApp 设计主题App 设计的方案很简单，就是“挂羊头卖狗肉”，你需要先设计一个对审核人员显示的壳，它要符合苹果爸爸心中“核心价值”的主题，尽量避讳直接表现一些敏感功能（如支付、教育、用户隐私权限等）。以下主题可供参考:\n\n记录类（记账（不太推荐，市面上用得比较多，容易被怀疑）、行程/心情/车票/电影票记录等）\n提醒类（备忘录、提醒事项、番茄ToDo）\n创意类（发挥你的 idea 做一些小工具之类）\n\n这些主题的特点就是可以做成单机类，但如果不得不涉及到网络请求数据，最好搞一台国外的服务器，不容易引起怀疑。\n如果你的 App 不可避免地要涉及要一些权限，比如联网、推送、通讯录、麦克风、相册、相机、定位、运动与健身等，需要将权限自然地设计进去。\nUI相比于主题来说，UI 的优劣可能更能影响审核人员的判断。千万不要认为只是一个壳而粗制滥造，优美的视觉真的可以在很大程度上帮助你过审。\n\n\n如上所示，海外 App 的风格和国内还是有比较大的差异，相对更简约，且海外 App 更看重动效的丰富性，如果你的 App 能令审核人员得到视觉上的愉悦感，就成功了一半。\n语言App 语言的选择需要得到重视，大部分情况下选择英文是没问题的，毕竟是全球通用的语言，但也要考虑上架地区的母语。我在第一次提审海外版 App 时就犯了一个错误，我将 App 语言设定为英文，为了避开中国审核，将面向上架地区时指定了墨西哥，结果收到了苹果的拒审邮件，他认定 App 违反了 Guideline 1.1.6，即存在虚假内容。为了不露馅，我通过找了在国外的朋友与苹果电话沟通，费了一番周折才确定原因在于“墨西哥的母语是西班牙语”。\n \n\n由于 App 上架后是要面向国内推广的，基本上都要做国际化（例如 App 名称、权限文案等），这一步建议在顺利过审2个版本后再加入。\nApp 上架与迭代前面做的一切准备当然只是为了让我们想要的 App 上架，因为选择合适的时机做审核切换是非常关键的。假如你的 App 本身包体积比较大，千万不要在某一次迭代中一次性加入所有代码，容易引起审核人员的怀疑。在 App 稳定更新2～3次后（这里的稳定指的是审核速度较快，一次通过，未卡审），你可以在 App 中加入审核开关，这个开关可以在接口里检测 ip 所属地。但假如是单机类的壳，用网络请求来判断就会很明显，这里也推荐了一种方案——借助时间戳延迟打开开关。\n根据前几次的审核经验，设定一个保险的时间节点，在那个时间点打开审核开关请求，尽量确保苹果在审核时候拦截不到任何可疑内容。同时为了防止苹果复审发现问题，可以再加一层判断，就是本地语言。因为国外工作人员的测试机基本上不会将中文设为默认语言，因此如下图所示，只要满足国内IP+默认中文两个条件的，才允许打开切换开关。\n\n\n\n以上就是我海外版 App 上架的经验，欢迎给我 E-mail 留言交流，最后祝大家都过包顺利！\n\n","plink":"https://blog.fiteen.top/2019/how-to-use-an-overseas-developer-account-to-launch-an-ios-app/"},{"title":"『2018』勿忘初心","date":"2018-12-31T10:01:19.000Z","date_formatted":{"ll":"Dec 31, 2018","L":"12/31/2018","MM-DD":"12-31"},"updated":"2020-01-13T10:30:06.883Z","content":"时间飞逝，又到了写小作文的时候。2018 年用一个词语概括，就是“忙碌”。\n\n\n工作关键词——“尝试”。\n受到整个金融大环境的影响，公司里的大量移动端产品（尤其是 iOS 端）遇到了上架难的问题，和公司里很多的iOSer 一样，开始转型大前端，参与Android、h5、小程序的产品开发。由于没有完整的学习周期来过渡，基本上都是被直接排期启动开发，这段时间的压力还是比较大。为了保证开发进度，只能通过模仿项目里原有的代码的风格和写法去进行快速迭代，期间一度出现“我能实现这个功能，但我不清楚为什么这么做”的情况，很没有成就感。不过经历了三四个月的适应和学习，也慢慢弄清楚各种技术的框架和逻辑，也能独立完成项目并解决一些棘手的遗留问题。\n因为资质、监管的影响，产品的设计受到了极大的限制，团队也一直在找寻合适的方向。希望接下来的时间，我可以利用自己的专业为产品的进步提一些建设性的意见。\n最近和领导聊了一写东西，他说公司有的时候更愿意招聘1-3年经验的开发，因为这些人脑子灵活，开发速度快，“性价比”高，能够被提拔，给予高薪的，一定不只是因为他能够开发。本身女性在行业里会处于劣势一些，曾经的同学、幼年的伙伴，很多也已经迈入婚姻和家庭。学无止尽，我希望自己对工作和生活的热爱还能持续下去，也相信能为自己创造一片天地。\n投资关键词——“惨烈”。\n基金跌、股票跌、p2p暴雷，吃一堑、长一智。磨难让人成长，打不倒我们的才会令我们更强大！\n买房关键词——“迷茫”。\n杭州的房价在 G20 前后开始呈现节节攀升的态势，虽然政府一再提出限价，还是抑不住房价放飞的趋势。今天杭州开始实行摇号买房政策，身边一些朋友，也在万人摇中分到一杯羹。不过我参与了好几个红盘的摇号，也并没有摇到，但其实有的红盘位置并不是我目前以及未来很长一段时间的生活和工作情况，回过头来想一想，我为什么要摇这个房子呢？不了解楼面价、容积率、得房率，甚至连样板房都没有看过，就登记报名了，仅仅为了所谓的差价，为了实现买房的目标，为了凑个热闹，看看自己运气好不好？也许也有很多人像我这样，也许这个社会就是这样，人性就是这样，模仿是人类的本能，但是我想我真的要知道自己是什么样，想要的到底是什么，自我认知是一辈子长久的修行，但愿我们都能修好这门课。\n","thumbnail":"2018/annual-summary-2018/2018.png","plink":"https://blog.fiteen.top/2018/annual-summary-2018/"},{"title":"手把手教你免费搭建 Shadowsocks 服务","date":"2018-12-27T13:43:02.000Z","date_formatted":{"ll":"Dec 27, 2018","L":"12/27/2018","MM-DD":"12-27"},"updated":"2020-01-14T17:46:23.959Z","content":"一、申请免费试用GCP每位新注册的用户可以在谷歌云平台 GCP (Google Cloud Platform)获得第一年$300 的免费赠送额度。一年后若不主动选择继续使用不会扣费的。（如果谷歌云免费到期，你也可以通过亚马逊AWS再薅一年羊毛。）\n\n\n注册账户的准备工作：\n1、可用的 VPN，用于正常访问 GCP；\n2、具有 VISA、MasterCard 等海外支付功能的信用卡一张；\n有账户的可以直接登录，没有的就创建一个。\n \n\n如果阅读英文不习惯，可以将左下方的语言改成简体中文。登录成功后进入 GCP 试用申请：\n第1步 - 同意条款：注意选择国家/地区时避免选择“中国”，因为根据 Google Cloud 的政策，不支持中国使用，直接使用默认的“美国”即可。\n \n\n第2步 - 填写客户信息和付款方式\n客户信息的账户类型选择“个人”，通过虚拟美国人信息生成工具，补充完成“姓名和地址”信息。\n \n\n填写付款方式时，务必填入正确真实的信用卡信息，不能再使用生成工具里的虚拟信息。可以取消“信用卡或借记卡账单邮寄地址与上述地址相同”的勾选，输入真实的地址。\n \n\n申请成功会扣除$1，验证后将返回。至此，试用 GCP 免费申请完成。\n二、部署虚拟机1、修改防火墙在菜单中依次点击 【网络】 –&gt;【VPC 网络】 –&gt;【防火墙规则】–&gt;【创建防火墙规则】，如下图创建一条入站规则：\n \n\n注意点：\n\n目标：网络中的所有实例；如果选择指定标签，需要在后续的配置中输入标签\n\nIP地址范围： 0.0.0.0/0\n\n协议和端口：全部允许\n\n\n2、保留静态地址在菜单中依次点击 【网络】 –&gt;【VPC 网络】 –&gt;【外部 IP 地址】–&gt;【保留静态 IP】\n \n\n静态 IP 只能申请一个。区域可以选择亚洲东部、欧洲、美国等地，推荐使用 asia-east1，对应台湾地区，访问速度较快。\n3、创建计算引擎在菜单中依次点击 【计算】 –&gt;【Compute Engine】 –&gt;【VM 实例】–&gt;【创建实例】\n \n\n注意点：\n\n区域：与创建静态地址时一致\n\n机器类型：最便宜的“微型”即可\n\n启动磁盘：Ubuntu 16.04 LTS Minimal\n\n\n展开“管理、安全、磁盘、网络、单独租用”，外部 IP 选择第2步的静态 IP。到这里，虚拟机部署完成。\n \n\n\n\n三、搭建 SSR + BBR在 VM 实例列表中找到刚才创建好的实例，点击上图红框内的 SSH，会弹出终端，如下图所示。如果用的是谷歌浏览器可以使用 SSH 插件\n \n\n\n获得 root 权限\n\n1sudo -i\n\n\n检查内核版本\n\n1uname –sr\n\n正常情况下，当前的内核版本都是超过 4.9，无需升级，可以直接进入下一步；如果需要升级，按照以下步骤进行\n123456789101112131415// 更新系统apt updateapt upgrade// 安装指定的新内核apt install linux-image-4.10.0-20// 卸载旧内核apt autoremove// 启用新内核update-grub// 重启reboot// 获得 root 权限sudo -i// 验证内核版本uname –r\n\n\n写入配置\n\n12echo &quot;net.core.default_qdisc&#x3D;fq&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.confecho &quot;net.ipv4.tcp_congestion_control&#x3D;bbr&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf\n\n\n配置生效\n\n1sysctl -p\n\n\n检验是否开启成功\n\n1lsmod | grep bbr\n\n如果看到回显tcp_bbr 20480说明已经成功开启 BBR。\n四、搭建 Shadowsocks Server\n更新 apt-get 软件包\n\n1sudo apt-get update\n\n\n通过 apt-get 安装 python-pip\n\n1sudo apt-get install python-pip\n\n\n使用 pip 安装 shadowsocks 服务\n\n1sudo pip install shadowsocks\n\n如果出现类似 Successfullying installed shadowsocks - x.x.x的提示说明安装成功。\n\n创建  Shadowsocks Server 配置文件\n\n1sudo vim /etc/ss-conf.json\n\n回车之后会进入这个创建的文件，windows 下点击键盘上的 insert 键进入编辑，mac 系统则随便输入一个字母可以进入编辑。输入以下内容：\n1234567891011&#123;&quot;server&quot;:&quot;0.0.0.0&quot;,&quot;server_port&quot;:8838,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;password&quot;:&quot;fiteen&quot;,&quot;timeout&quot;:600,&quot;method&quot;:&quot;aes-256-cfb&quot;&#125;&#x2F;&#x2F; server_port 与 password 分别对应 Shadowsocks 客户端上配置使用的端口和密码，内容请自定义\n\n点击 ESC 键，左下角的 insert 标志消失，同时按下”shift” 和”:”键，左下角出现”:” 标志，输入”wq”，接着回车即保存退出文件。\n\n用配置文件启动 Shadowsocks Server\n\n1sudo ssserver -c /etc/ss-conf.json -d start\n\n如果要设置开机启动，可以参考这篇文章。\n服务搭建已经完成了，在 SSR（Mac 端）上输入上面配置的内容，确定后开启服务便可以科学上网了。\n \n\n如果你的 iPhone 客户端也需要下载小火箭，可以用美区账号 App Store 购买/ TB 购买礼品卡，如果不想花钱，可以尝试一下这个方案。（2019-12-31 更新）\n","thumbnail":"2018/build-a-free-shadowsocks-service/google-cloud.png","plink":"https://blog.fiteen.top/2018/build-a-free-shadowsocks-service/"},{"title":"Git 手册之 Mac 上给 Git 设置 SOCKS5/HTTP 代理","date":"2018-09-02T10:59:02.000Z","date_formatted":{"ll":"Sep 2, 2018","L":"09/02/2018","MM-DD":"09-02"},"updated":"2020-01-14T02:42:29.781Z","content":"我们常会遇到从 GitHub 上 clone 代码的时候龟速的情况，这时如果手上有不错的代理，可以借助代理来获取更快下载/上传资源的速度。\n\n\n通常我们 clone 代码时有以下两种方式：\n1234&#x2F;&#x2F; HTTPS 方式https:&#x2F;&#x2F;github.com&#x2F;accountname&#x2F;projectname.git&#x2F;&#x2F; SSH 方式git@github.com:accountname&#x2F;projectname.git\n\n设置 HTTP 方式的代理由于 Shadowsocks 客户端就提供一个本地的 SOCKS5 代理，代理地址是 127.0.0.1:1080。在终端输入以下配置：\n12git config --global http.proxy \"socks5://127.0.0.1:1080\"git config --global https.proxy \"socks5://127.0.0.1:1080\"\n\n取消代理则：\n12git config --global --unset http.proxygit config --global --unset https.proxy\n\n也可以直接修改用户主目录下的  .gitconfig 文件，插入如下内容：\n1234[http]        proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080[https]        proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080\n\n如果你用的不是 SOCKS5，而是 HTTP 代理，就把上面命令中的 socks5 换成 http ，同时改成正确的端口号。\n设置 SSH 方式的代理修改用户目录下文件  ~/.ssh/config 里的内容，对 GitHub 域名作单独处理：\n1234567891011Host github.com    # 若使用的是默认端口，设置如下    HostName           github.com    # 如果想用443端口，设置如下    # Hostname         ssh.github.com    # Port             443    User               git    # 如果是 SOCKS5 代理，取消下面这行注释，并把 1080 改成自己 SOCKS5 代理的端口    # ProxyCommand     nc -x localhost:1080 %h %p    # 如果是 HTTP 代理，取消下面这行注释，并把 6666 改成自己 HTTP 代理的端口    # ProxyCommand     socat - PROXY:127.0.0.1:%h:%p,proxyport&#x3D;6666\n\n直接在终端设置临时代理或者我们可以在 ~/.bashrc文件中，直接写入以下内容并保存：\n123alias setproxy&#x3D;&quot;export ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;alias unsetproxy&#x3D;&quot;unset ALL_PROXY&quot;alias ip&#x3D;&quot;curl -i http:&#x2F;&#x2F;ip.cn&quot;\n\nclone 之前先在终端执行  setproxy 命令，结束后执行  unsetproxy 命令如果终端提示 command not found: setproxy，说明配置没有生效，执行一下  source ~/.bashrc 即可。\n","thumbnail":"2018/set-up-sock5-or-http-proxy-for-git-on-mac/github.png","plink":"https://blog.fiteen.top/2018/set-up-sock5-or-http-proxy-for-git-on-mac/"},{"title":"借助 Safari 调试苹果手机上的 webView","date":"2018-07-25T07:21:07.000Z","date_formatted":{"ll":"Jul 25, 2018","L":"07/25/2018","MM-DD":"07-25"},"updated":"2020-01-14T02:53:44.946Z","content":"iPhone 真机/模拟器设置需要如下图所示，点击“设置” → 点击 “Safari 浏览器” → 点击“高级” → 打开“Web 检查器”。\n\n\n\n\n若模拟器中无“Web 检查器”选项，无需设置。\nSafari 设置打开 Mac 电脑中的 Safari 浏览器，打开偏好设置，点击菜单中的“高级”选项卡，勾选“在菜单栏中显示“开发”菜单”\n\n\n进入检查器在手机/模拟器中打开浏览器/App中的某个网页，在 Mac 中打开 Safari，在“开发”中找到目标设备。\n\n\n\n如果你选择的是模拟器，但是开发列表中未出现，重启 Safari 即可。因为必须确保先打开模拟器，再打开 Safari。\n\n点击目标设备中需要查看的网址，便会弹出这个页面对应的检查器。\n","plink":"https://blog.fiteen.top/2018/debug-webview-with-safari/"},{"title":"App Store 审核经验","date":"2018-06-14T07:56:22.000Z","date_formatted":{"ll":"Jun 14, 2018","L":"06/14/2018","MM-DD":"06-14"},"updated":"2019-12-04T12:31:48.115Z","content":"相关资料审核指南\n《App Store 审核指南》 \n《苹果开发者计划许可协议》\n\n\n\n苹果官方会不定期更新 Guidelines 和 PLA，请及时关注。\n关键概念\niTunes Connect\niTunes Connect 是一套以网页为基础的工具，用于管理在 App Store 上销售的面向 iPhone、iPad、Mac、Apple Watch、Apple TV 和 iMessage 的 app；同时也用于管理 iTunes Store 和 iBooks Store 上的内容。开发者通过 iTunes Connect 提交和管理 app，邀请用户使用 TestFlight 进行测试，添加税务和银行信息，以及访问销售报告等。\n\n元数据\n元数据指的是 iTunes Connect 中输入的 App 信息和平台版本信息——例如，App 名称、描述、关键词和屏幕快照。此信息的部分显示在 App Store 产品页面，并且可以被本地化。\n\n二进制文件\n包含在 ipa 包中的一个可执行文件，提审时需重点检查包括但不限于 info.plist、包／文件大小、icon 规格、私有 API、第三方 SDK、64位等内容。\n\n\n审核状态开发者在审核过程中需要特别关注的两个 App 状态为：\n\n正在等待审核（Waiting For Review）\n您已经提交了一个新的 App 或者更新了一个版本。Apple 已经收到了您的 App 但还没有开始审核。在该状态下可以： \n\n将构建版本从审核中移除\n编辑某些 App 信息\n\n\n正在审核（In Review）\nApple 正在审核您的 App。您可以将构建版本从审核中移除。\n\n\n一般这两个过程都会在24-48小时内完成，即从你提交到审核完成正常应在2天内结束，App 首次提交除外。\n当 App 被拒超过三次，“正在等待审核”过程会延长，极有可能持续一周；若未按照苹果的要求操作，可能被拉入黑名单，“正在审核”过程无限延长。\n近期被拒案例及应对措施账号资质问题对于监管敏感的行业和应用，App Store 的审核会更为苛刻。这类案例主要体现在理财、借贷、医疗类的 App，相关的应对方法有：\n\n证明你的公司，有提供相关资质。\n如果 App 的公司主体具备资质，直接讲资质证明（如营业执照、政府背书）发给苹果审核团队；若不具备，需要将 App 放在有资质的公司主体的账号下提交。\n如果苹果审核团队方面对 App 的性质存在误解，提供相关证明并及时沟通。\n\n如果是个人开发者账号提交的应用，须升级为企业开发者账号后再提交。\n\n如果是其他开发者账号（比如外包）替你开发，须将其他开发账号添加到你的苹果开发者账号下（在“用户和职能-添加iTunes Connect用户”操作）。\n\n尽可能体现 App 产品与公司品牌的关联性，包括但不限于以下几点：\n\nApp 名称的择定\n在 App 的“关于我们”中，中英文介绍公司\n提交“软件著作权登记证书”，或者“商标证书”\n向苹果审核团队阐述 App 功能的运营主体、技术支持网站等\n\n\n设置开关，将敏感内容在审核期间隐藏，审核过后再显示。但近期苹果已经发现这一现象，会不定期抽查过审应用。这种做法也有被竞争对手举报的可能，一旦被查到可能面临被直接下架的风险。\n\n\n元数据不规范2018年伊始，苹果爸爸就抛出了重磅炸弹——苹果2.1狗年大礼包。我们需要对照元数据规范对本地信息进行修改和调整。\n如果不需要更新 ipa 包，可以直接在被拒信息下面回复，明确告知对方：App 不存在这些问题或者我们已经对相关资源和功能作出了调整，请重新审核。切勿不沟通，直接重新提包，会被苹果认定默认存在大礼包中提及的问题。\niTC 中在上传屏幕快照时，以 5.5 寸为基准，条件允许时，为不同机型定制不同的屏幕快照更佳。\n内购订阅、游戏内货币、游戏关卡、课程、会员等非实物交换类的虚拟物品，必须且只允许走内购渠道。此外，需要注意以下几点：\n\n支付页面不能使用网页作为载体，苹果会认为存在变更支付方式的可能\n类别（如消耗型/非消耗性、自动续订/非续订）需要选择正确\n提高产品审核通过率，iTC 中信息尽可能补充完整\n\n隐私在 Apple 生态体系中，保护用户隐私总是第一要务。当需要访问用户的相册、相机、通讯录、位置、日历等，App 描述中应当注明 app 会要求访问哪些内容类型 (例如，位置、通讯录和日历等)，并说明当用户不授予许可时，app 的哪些功能会无法正常工作。\n如何提高过审速度沟通原则\n尊重\n回复时称对方为审核员，沟通过程中保持严肃、友好、认同的态度，对给出任何审核结果表示感谢。\n\n积极\n及时主动告知审核员我方的处理进度。中英文表达皆可，面对积极回复且礼貌的开发者，审核人员更愿意给出直接的意见。\n\n\n以往经验\nIn Review 状态不要手动撤回，可能会导致后续审核速度变慢。\n对被拒原因不认可，可以直接在被拒消息后申诉。即使回复后直接重新提交新版本，审核员也会看到消息，可以在消息中告知，已经按照要求进行修改，这种情况下苹果的处理效率会高一些。\n处理当前的审核结果一般是同一个审核员，提审后及时查看审核状态，一旦被拒及时回复，可以得到尽可能快对回应和处理。\n提审之前，请先反复检查，避免低级问题或常见问题遗漏到苹果审核人员手中。若连续审核通过，后续审核速度会越来越快，反之，若连续被拒极有可能进入黑名单，审核速度越来越慢。\n遇到竞争对手侵权可以向苹果投诉，但不要多人重复投诉，不然可能会拉长处理时间。\n\n","plink":"https://blog.fiteen.top/2018/review-experience/"},{"title":"Mac 下避免 rm 引发的血案","date":"2018-04-12T13:53:11.000Z","date_formatted":{"ll":"Apr 12, 2018","L":"04/12/2018","MM-DD":"04-12"},"updated":"2020-01-15T10:29:19.928Z","content":"习惯使用终端的用户，常会用 rm -fr 命令执行删除操作，但是这种删除的方式不会出现在废纸篓中，一旦误删，要想找回就比较麻烦。近期听说的此类血案也比较多，为了避免造成悲剧，推荐使用 trash 命令来执行删除。\n\n\n安装 trash通过 Homebrew 安装 Trash\n1$ brew install trash\n\n安装成功后，可以通过 trash -fr filename命令删除文件，且文件会移到废纸篓中。\n用 trash 替换 rm 命令打开 ~/.bash_profile 文件\n1$ vim ~/.bash_profile\n\n在文件中加入以下代码后保存文件：\n1alias rm&#x3D;&quot;trash&quot;\n\n使命令生效：\n1$ source ~/.bash_profile\n\n这时执行 rm 命令，被删除的文件就会存放在废纸篓中了，废纸篓里的文件虽无法执行“放回原处”的方法，但可以通过鼠标拖拽恢复。\n","plink":"https://blog.fiteen.top/2018/avoid-rm-induced-bloody-cases/"},{"title":"iOS 中 framework 和 bundle 的制作","date":"2018-01-05T05:57:10.000Z","date_formatted":{"ll":"Jan 5, 2018","L":"01/05/2018","MM-DD":"01-05"},"updated":"2020-01-17T11:32:39.045Z","content":"FrameworkFramework 是资源的集合，将静态库和其头文件包含到一个结构中，让 Xcode 可以方便地把它纳入到你的项目中。\n\n\n在运行时，库中按你的想法暴露需要的头文件，整个工程都可以调用暴露出来的接口和参数，这样减少了内存消耗，提高了系统的性能。\n为什么使用 framework与别人分享自己开发的组件，有两种方式。\n\n直接提供源代码。\n将组件代码编译成静态库，供他人调用。\n\n第一种方式容易被人看到具体实现的细节，这些可能是你不想暴露出来的。此外，开发者也可能并不想看到你的所有代码，而仅仅是希望将功能的一部分植入到自己的应用中。\n因此很多组件的封装采用第二种方式，这也是下文介绍的主要内容。\n配置静态库工程步骤1：打开 Xcode ，Create a new Xcode project →  iOS →  Cocoa Touch Framework，在 Product Name 中填写名称。（注：这就是最后 framework 的名称。）\n步骤2：假如你的项目依赖某些系统库，那么需要通过点击 Targets → Build Phases →  Link Binary with Libraries ，点击 + 号将它们添加到工程中。\n步骤3：修改 Project 中的 iOS Deployment Target 版本号，选择你的框架最低支持的 iOS 版本。\n步骤4：如果组件中存在 xib 文件，请确保 TARGETS→  Build Phases →  Copy Bundle Resources 下存在该 xib 文件。\n步骤5：将封装好的组件文件夹拖入到项目目录下，选择你要公开的头文件。\n步骤6：点击 TARGETS →  Build Phases →  Headers，目录下有：\n\nPublic : 存放公开的头文件，给外部调用。\nPrivate : 存放私有的 Header，但头文件在编译之后还会存在。一般用来存放项目中需要调用但又不想给别人看到其内部实现的文件。\nProject : 隐藏的文件。\n\n导出 framework选中 Scheme 选择当前项目，然后右边设备依次选中 Generic iOS Device（通用真机版本）和任一模拟器，分别编译（command + B），成功将会自动跳转到打出的 .framework 文件相应的目录下。\n合成 framework为了让用户能统一调用一个 framework ，还需要将二者合成为一个 framework 。这里介绍一种简单的方法：\n\n新建一个 target，依次点击TARGETS 左下角的加号按钮 → Cross-platform →  Other 下的 Aggregate。\n\n点击工程文件，选 TARGETS →  刚才创建的 Aggregate →  Build Phases →  + →  New Run Script Phases。在当前栏目里会多出一个 Run Script ，在里面输入以下脚本：\n\n\n12345678910111213141516171819202122232425262728293031323334353637383940#!/bin/sh#要build的target名TARGET_NAME=$&#123;PROJECT_NAME&#125;if [[ $1 ]]thenTARGET_NAME=$1fiUNIVERSAL_OUTPUT_FOLDER=\"$&#123;SRCROOT&#125;/$&#123;PROJECT_NAME&#125;/\"#创建输出目录，并删除之前的 framework 文件mkdir -p \"$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;\"rm -rf \"$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework\"#分别编译模拟器和真机的 frameworkxcodebuild -target \"$&#123;TARGET_NAME&#125;\" ONLY_ACTIVE_ARCH=NO -configuration $&#123;CONFIGURATION&#125; -sdk iphoneos BUILD_DIR=\"$&#123;BUILD_DIR&#125;\" BUILD_ROOT=\"$&#123;BUILD_ROOT&#125;\" clean buildxcodebuild -target \"$&#123;TARGET_NAME&#125;\" ONLY_ACTIVE_ARCH=NO -configuration $&#123;CONFIGURATION&#125; -sdk iphonesimulator BUILD_DIR=\"$&#123;BUILD_DIR&#125;\" BUILD_ROOT=\"$&#123;BUILD_ROOT&#125;\" clean build#拷贝 framework 到 univer 目录cp -R \"$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;TARGET_NAME&#125;.framework\" \"$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;\"#合并 framework，输出最终的 framework 到 build 目录lipo -create -output \"$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;\" \"$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;\" \"$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;\"#删除编译之后生成的无关的配置文件dir_path=\"$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/\"for file in ls $dir_pathdoif [[ $&#123;file&#125; =~ \".xcconfig\" ]]thenrm -f \"$&#123;dir_path&#125;/$&#123;file&#125;\"fidone#判断 build 文件夹是否存在，存在则删除if [ -d \"$&#123;SRCROOT&#125;/build\" ]thenrm -rf \"$&#123;SRCROOT&#125;/build\"firm -rf \"$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator\" \"$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos\"#打开合并后的文件夹open \"$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;\"\n然后使用脚本进行编译 (command + B)，成功后将会自动跳转到打出的 .framework 文件相应的目录下。\n查看是否成功步骤1：打开终端，进入到你的 framework \n1cd $&#123;yourFrameworkName&#125;.framework文件所在的目录\n\n步骤2：查看架构支持\n1lipo -info $&#123;yourFrameworkName&#125;.framework/$&#123;yourFrameworkName&#125;\n\n于是可以看到输出：\n1Architectures in the fat file: $&#123;yourFrameworkName&#125; are: i386 x86_64 armv7 arm64 (支持的架构显示在这)\n\n*设备的CPU架构(指令集) *\n\n模拟器\ni386: 针对 intel 通用微处理器32架构，如 iPhone 4s-5:\nx86_64: 针对 x86 架构的64位处理器\n\n\n真机\narmv6: iPhone、iPhone 2、iPhone 3G、iPod 1G/2G（Xcode4.5起已不再支持armv6）\narmv7: iPhone 3Gs、iPhone 4、iPhone 4s、iPod 3G/4G/5G、iPad、iPad 2、iPad 3、iPad Mini\narmv7s: iPhone 5、iPhone 5c、iPad 4\narm64: iPhone 5s、iPhone 6(Plus)、iPhone 6s(Plus)、iPad Air(2)、Retina iPad Mini(2,3)\narm64e:  iPhone XS\\XR\\XS Max\n\n\n\n引入 framework 的注意事项引入的 framework 里存在分类的话，编译运行项目会报形如 xxx unrecognized selector sent to class xxx 的错误。\n解决办法：\n选中左边栏的项目文件，然后依次点击 Targets →  Build Settings →  Linking →  Other Linker Flags，在里面添加 -ObjC 再次编译就能正常运行。\n补充知识：\n从 C 代码到可执行文件经历编译步骤是：源代码 &gt; 预处理器 &gt; 编译器 &gt; 汇编器 &gt; 机器码 &gt; 链接器 &gt; 可执行文件。\n在最后一步需要把 .o 文件和 C 语言运行库链接起来，这时需要用到 ld 命令。源文件经过一系列处理后，会生成对应的 .obj 文件，一个项目必然会有多个 .obj 文件，并且这些文件之间存在各种联系，如函数调用等。链接器做的事就是把目标文件和所用的一些库链接在一起形成一个完整的可执行文件。Other Linker Flags 设置的值实际上就是 ld 命令执行时后面所加的参数。下面介绍3个常用参数：\n\n\n\n参数\n描述\n\n\n\n-ObjC\n链接器会把静态库中所有的 Objective-C 类和分类都加载到最后的可执行文件中\n\n\n-all_load\n链接器会让所有找到的目标文件都加载到可执行文件中\n\n\n-force_load\n需要指定要进行全部加载的库文件的路径\n\n\n注意：千万不要随便使用 -all_load 这个参数！假如你使用了不止一个静态库，然后又使用了这个参数，那么很有可能会遇到 ld: duplicate symbol 错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到 -ObjC 失效的情况下使用 -force_load 参数。\nBundle什么是 bundleBundle 可以理解为一个目录，并包含了程序中会用到的资源，如图像、声音、编译好的代码或 nib 文件等。\n创建 bundleBundle 创建有两种方式：\n\n简单的创建 bundle\n创建一个文件夹，强制重命名该文件夹为 yourBundleName.bundle。\n\n通过 Xcode 创建 bundle\n\n新建一个项目，依次 TARGETS →  + →  mac OS → Framework &amp; Library →  Bundle，输入 Product Name 即建立出 bundle 工程；\n\n在 bundle 目录下添加需要的资源文件，编译之后在整个项目工程的 Products 文件夹下得到资源文件 bundle 。\n这样做默认情况下 bundle 里面的 png 图片会被转为 tiff 的格式。因此在编译前需要做一步设置：找到 bundle 的工程，修改：Build Settings →  COMBINE_HIDPI_IMAGES，设置为 NO 之后再编译运行。\n\n\n\n\n","plink":"https://blog.fiteen.top/2018/making-frameworks-and-bundles/"},{"title":"『2017』去年今日此门中","date":"2017-12-31T03:59:02.000Z","date_formatted":{"ll":"Dec 31, 2017","L":"12/31/2017","MM-DD":"12-31"},"updated":"2020-01-13T15:43:07.073Z","content":"步入职场的第二年，做一个简单的总结：\n\n\n工作2017年在职业成长上的几点收获：\n\n年初，获得年度优秀员工\n年中，考出《系统集成项目管理工程师》证书\n年底，入职挖财\n\n考证准备了两三个月，看了好久教学视频，刷了厚厚的一沓题，感觉当初可以直接尝试一下高级证书的考试，怕准备时间不够就报了中级，也许对自己要求高一点，会得到更好的结果。\n接触地更多，才会发现外面的世界越精彩，进步的空间越大。无论什么年纪，都不能停止学习的脚步。每次看到小区外浙大的孩子们意气风发充满朝气的脸，越后悔自己当初没有更用功一点。因为原公司放弃了互联网医疗的项目，顺其自然地换了个工作环境，新公司的大佬很多，从分享会上会发现自己更多不足，我应该更努力地充实自己，无论是技术上还是性格上。\n生活这一年，在生活中遇到了一次严重的打击，堪称价值观的崩塌——朋友 L 插足了别人的家庭，成了一名第三者。我们做了大学四年的同寝室友，毕业后又合租了一年。这件事情确实令我相当震惊和难以接受，L 在我的认知里，是一个非常“神奇”的女孩：\n她家里条件不好，领助学补助。但她很大方，她会拿钱给五保户爷爷买水果，买东西也不还价，别人向她借钱也无二话，自己骑破烂二手自行车，却给初恋男友买死飞；\n她长相白皙清秀，也爱漂亮，对护肤品的消费意识比我们都超前，但头发总是油油腻腻，不怎么讲究卫生，还不愿换掉那件紧巴巴的起球毛呢外套和脏兮兮的发卡；\n她朋友很多，对谁都热情似火，助人为乐，甚至愿意牺牲自己和朋友的利益去成全一个刚认识不久的人的无理请求；\n她很信任别人，几乎无条件的信任，哪怕知道对方可能在骗人，依然说自己愿意相信一切是好的那面。\n也许这是她说服自己接受这个男人的理由，明知对方在老婆孕期出轨跟她交往，愿意相信他前言不搭后语的说辞。\n我很生气，也很难过，朝夕相处的人成为了第三者，她还有千万个理由说自己没有错。也许她真的是个善良的好姑娘，只是过于纯真，也许一切只是她手段高明的伪装。也许真的如她所说的那般，对方的妻子无比的坏，她是在拯救那个男人脱离苦海……\n也许是她变了，也许她一直没变，但无论怎样，我想我们再也做不了朋友了，几年的相识最后化作一抹悲凉。想起那句人们常说的话——愿你出走半生，归来仍是少年。可是去年今日此门中，已是回不去的记忆了。\n","thumbnail":"2017/annual-summary-2017/2017.png","plink":"https://blog.fiteen.top/2017/annual-summary-2017/"},{"title":"iOS 逆向分析之 class-dump","date":"2017-10-04T16:13:05.000Z","date_formatted":{"ll":"Oct 5, 2017","L":"10/05/2017","MM-DD":"10-05"},"updated":"2020-01-17T11:41:02.155Z","content":"class-dumpclass-dump 是一个命令行工具，通过利用 Objective-C 语言的 runtime 特性，提取存储在 Mach-O 文件中的类文件、协议、分类等信息，并统一表现在 .h 头文件中。\n\n\n安装\n下载 class-dump-3.5.dmg（若链接无效，请戳官方网址）\n\n打开终端，输入\n1open &#x2F;usr&#x2F;local&#x2F;bin\n\n将下载拿到的 class-dump 拷贝到 /usr/local/bin 目录下\n\n赋予其可执行权限，终端输入:\n1sudo chmod 777 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;class-dump\n\n至此安装成功，并可以通过 class-dump --help 查看用法和版本\n\n\n使用\n下载一个 ipa 文件，先将文件改为 zip 格式，解压后得到 .app 的目标文件\n终端输入命令，格式为 class-dump -H ${.app文件路径} -o ${输出文件夹路径}\n假如此时输出的文件中未得到目标的 .h，结果中什么都没有或者只有一个 CDStructures.h，说明需要砸壳\n\ndumpdecrypted从 AppStore 下载安装的 App 被苹果默认加了一层壳，需要通过砸壳进行逆向分析。\n工具\ndumpdecrypted.dylib\n\n下载\n\n编译安装\n1、在终端进入下载的解压文件的目录：\n1cd $&#123;filePath&#125;\n\n2、执行 ls 里面存在三个文件：Makefile、README、dumpdecrypted.c\n3、执行 make ，在当前目录下会多出 dumpdecrypted.dylib 和 dumpdecrypted.o，前者就是我们需要的工具\n\n\n\n一台越狱手机\n\n\n操作步骤使用越狱手机前往 AppStore 下载目标 App 并打开。\n1. 使用 ssh 连接手机1.1 越狱手机和电脑连同一个 wifi，查看手机所处当前网络的 IP 地址，打开终端 A，输入指令：\n1ssh root@$&#123;手机当前网络的 IP 地址&#125;\n\n1.2 通过命令ps -e找到目标 App 对应的进程，如果该 App 为当前打开的应用，可以关注最下面的几条进程，形如：\n1$&#123;进程号&#125; ??         $&#123;时间&#125; $&#123;目标 App 在手机中的路径&#125;\n\n路径形如 \n/var/mobile/Containers/Bundle/Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/xx.app/xx\n将其记录下来备用。\n1.3 附加进程指令：cycript -p ${进程号}\n获取 App 在沙盒 Documents 的路径：\n1[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask]\n\n路径形如：/var/mobile/Containers/Data/Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Documents\n将其记录下来备用。\n2. 注入 dumpdecrypted.dylib2.1 新开终端 B（可使用快捷键 command + T）\n2.2 使用 scp 指令将 dumpdecrypted.dylib 拷贝到目标 App 的 Documents 目录下。\n指令为：\n1scp $&#123;dumpdecrypted.dylib 所在的完整路径&#125; root@$&#123;手机当前网络的 IP 地址&#125;:$&#123;目标 App 在手机中路径&#125;\n\n终端会提示输入密码，默认为 alpine。\n3. 砸壳3.1 回到终端 A，cd  进入步骤 1.3 中 App 在沙盒 Documents 的路径\n3.2 执行如下指令：\n1DYLD_INSERT_LIBRARIES&#x3D;dumpdecrypted.dylib $&#123;步骤 1.2 中目标 App 在手机中路径&#125;\n\n3.3 执行 ls 指令查看当前目录下是否有 .decrypted 的文件来确定砸壳是否成功\n4. class-dump 导出 App 头文件4.1 回到终端 B，将.decrypted 文件拷贝到电脑目录下，指令为：\n1scp root@$&#123;手机当前网络的 IP 地址&#125;:$&#123;步骤 1.3 中App 在沙盒 Documents 的路径&#125;&#x2F;WeChat.decrypted $&#123;自定义的电脑目录&#125;\n\n终端会提示输入密码，默认为 alpine。\n4.2 通过如下指令获取目标 App 的所有头文件\n1class-dump -s -S -H --arch $&#123;指令集&#125; $&#123;步骤 4.1 中的.decrypted 文件路径&#125; -o $&#123;自定义的输出目录&#125;\n\n指令集需对应当前越狱手机的型号，参考下表：\n\narmv6：iPhone | iPhone2 | iPhone3G\narmv7：iPhone3GS | iPhone4 | iPhone4S\narmv7s：iPhone5 | iPhone5C\narm64：iPhone5S | iPhone6 | iPhone6Plus | iPhone6S  | iPhone6SPlus | iPhone7 | iPhone7Plus | iPhone8 | iPhone8Plus | iPhoneX\n\n","plink":"https://blog.fiteen.top/2017/class-dump/"},{"title":"iOS 自动布局进阶之巧用 IBInspectable 和 IB_DESIGNABLE","date":"2017-08-24T02:33:20.000Z","date_formatted":{"ll":"Aug 24, 2017","L":"08/24/2017","MM-DD":"08-24"},"updated":"2020-01-14T03:13:29.289Z","content":"交互设计和 UI 设计水准很大程度影响着用户对应用的评价，iOS 开发发展至今已逾10年，开发者对于界面 UI 编码的习惯逐渐分化成三大流派：\n\n\n\ncode - 易追踪、可复用、便于版本控制，但不直观\nxib - 简单便捷、直观、一一对应，但易冲突\nstoryboard - 逻辑清晰、简单易用、直观高效，虽易冲突、复用性不佳，但仍是未来趋势\n\nxib 和 storyboard 均采用了 Interface Builder（IB）来生成 GUI，通过面板上简单的拖拽替代繁琐冗余的 code 来构建页面。但我们经常发现，既有的功能并不能完全满足布局的需要，那么，我们可以通过在特定的位置定义可视化属性 IBInspectable、定义宏 IB_DESIGNABLE 来精简代码。\n下文具体介绍一下如何使用。\n\n【场景】设置按钮：圆角cornerRadius：8pt、边框颜色borderWidth：1pt、边框宽度borderColor：系统蓝色\n\n巧用 IBInspectable【IBInspectable】 这一属性提供了访问功能的新方式：用户自定义的运行时属性，让支持 KVC 的属性能够在身份检查器（Identity Inspector）的 User Defined Runtime Attributes 中配置。\n它支持修饰的属性类型有：\nBOOL、NSNumber、CGPoint、CGSize、CGRect、UIColor、NSString、NSLocalizedString、NSRange、UIImage、NSNull。\n如果想让特定类型的控件设置某个属性，可以为对应的 UIKit 添加分类，为定义该属性时加上 IBInspectable，示例：\n123456789#import &lt;UIKit&#x2F;UIKit.h&gt;@interface UIButton (HTAdditions)@property (nonatomic) IBInspectable CGFloat kCornerRadius;@property (nonatomic) IBInspectable CGFloat kBorderWidth;@property (nonatomic,copy) IBInspectable UIColor *gBorderColor;@end\n\n这时 Xcode 的 Attributes Inspector 栏中就会出现三个新的可编辑属性。\n\n\nIdentity Inspector 下的 User Defined Runtime Attributes 也会出现相应的 key path 和 value 值。\n\n\n设置好后 run 一下工程就能看到场景中要求的效果，但通常开发者不需要所有的按钮都设置圆角、边框，更多的是采用自定义视图的形式统一处理相似风格的 control。为了更高效地开发，接下来介绍宏定义 IB_DESIGNABLE。\n巧用 IB_DESIGNABLE【IB_DESIGNABLE】 在类名前加上此宏定义，初始化、布置和绘制方法将被用来在画布上渲染该类的自定义视图。\n操作步骤：\n\nstoryboard 中拖拽一个 UIButton；\n创建父类是 UIButton 的 HTCustomButton 类文件，并在 .h 的 interface 前定义 IB_DESIGNABLE；\n给步骤1按钮的 Custom Class 关联上 HTCustomButton。\n\n这时我们就可以直接在 User Defined Runtime Attributes 中加入想要的属性，例如圆角、边框宽度等。边框颜色由于 UIColor 类型的特殊性，需要重新定义。\nHTCustomButton.h：\n12345678910#import &lt;UIKit&#x2F;UIKit.h&gt;IB_DESIGNABLE@interface HTCustomButton : UIButton&#x2F;** 设置边框颜色可视化 *&#x2F;@property (nonatomic, strong)IBInspectable UIColor *customBorderColor;@end\nHTCustomButton.m：\n1234567891011121314#import &quot;HTCustomButton.h&quot;@implementation HTCustomButton&#x2F;** *  设置边框颜色 * *  @param customBorderColor 可视化视图传入的值 *&#x2F;- (void)setCustomBorderColor:(UIColor *)customBorderColor &#123;    self.layer.borderColor &#x3D; customBorderColor.CGColor;&#125;@end\n设置好后就可以直接添加或修改相应的属性动态刷新控件，如下图：\n\n\n纯代码开发流派如何借助 IB_DESIGNABLE动态查看布局效果对于很多被强制勒令用纯代码 coding 的开发者来说，下面介绍的干货绝对会大大提升开发效率。\n举个例子：创建基于 UIView 的 HTMasonryView，以及同名的 .xib 文件，并在 Custom Class 中关联好。接下来在 HTMasonryView.m 中创建并布局 masonryButton，注意添加 IB_DESIGNABLE，代码如下：\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#import &quot;HTMasonryView.h&quot;#import &lt;Masonry.h&gt;#import &quot;UIButton+HTAdditions.h&quot;IB_DESIGNABLE@interface HTMasonryView ()@property (nonatomic, strong) UIButton *masonryButton;@end@implementation HTMasonryView- (instancetype)initWithFrame:(CGRect)frame &#123;    if (self &#x3D; [super initWithFrame:frame]) &#123;        [self setupView];    &#125;    return self;&#125;-(instancetype)initWithCoder:(NSCoder *)aDecoder &#123;    if (self &#x3D; [super initWithCoder:aDecoder]) &#123;        [self setupView];    &#125;    return self;&#125;- (void)setupView &#123;    _masonryButton &#x3D; (&#123;        UIButton *btn &#x3D; [UIButton buttonWithType:UIButtonTypeSystem];        btn.kCornerRadius &#x3D; 8.0f;        btn.kBorderWidth &#x3D; 1.0f;        btn.gBorderColor &#x3D; btn.ht_normalTitleColor;        btn.ht_normalTitle &#x3D; @&quot;code创建-Masonry布局的按钮&quot;;        btn.titleLabel.font &#x3D; [UIFont systemFontOfSize:14.0f];        [self addSubview:btn];        btn;    &#125;);    [self layout];&#125;- (void)layout &#123;    __weak __typeof(self) weakSelf &#x3D; self;    [_masonryButton mas_makeConstraints:^(MASConstraintMaker *make) &#123;        make.left.mas_equalTo(30);        make.right.mas_equalTo(-30);        make.top.bottom.mas_equalTo(weakSelf);    &#125;];&#125;@end\n点开 HTMasonryView.xib 查看会发现已经渲染出了 Masonry 的布局效果。\n\n\nps：如果渲染失败，查看 Editor -&gt; Automatically Refresh Views 是否勾选，尝试重启 Xcode。\n开启成功的特点就是 Show the Identity inspector-&gt;Custom Class-&gt;Designables:Up to date(更新完毕)/Updating(更新中)，如果显示 Build failed 建议检查布局代码。\n\n欢迎评论，最后-&gt; Demo传送门\n","plink":"https://blog.fiteen.top/2017/how-to-use-ib-inspectable-and-ib-designable/"},{"title":"iOS 购物车设计模式浅析及代码实现","date":"2017-08-17T01:03:04.000Z","date_formatted":{"ll":"Aug 17, 2017","L":"08/17/2017","MM-DD":"08-17"},"updated":"2020-01-13T16:19:31.611Z","content":"前言早期以淘宝为代表的C2C网站以“入驻店铺”模式强势打破了纯线下的商品交易格局，而近年来，通过不断的尝试与改进，各大电商平台也趋于成熟并自成体系。以京东、聚美优品、网易考拉海购、唯品会、小红书为代表B2C平台也以“自营+入驻店铺”的垂直销售模式进入消费者的视野。但也有不少企业和商家为了避免缴纳高额的入驻保证金和平台年费等，选择开发自己的商城App产品，也就是“自营”模式。\n\n\n购物车作为大多数商城中不可或缺的部分，其逻辑和设计往往也取决于商城本身的交易模式与商品的性质。以美团外卖、饿了么为例，作为一个主张快捷消费产品，加上配送的问题，跨店购物的模式显然不适用它，因此购物车的入口并不在一级菜单下，而是在每家店铺商品列表底部。其购物车显示的内容也相对简单，只需包括已选商品信息（名称、价格、数量、增减按钮）、餐盒费、配送费、总价即可。而对于一个功能完善的商城来说，购物车的逻辑显然会复杂许多，下文中将模仿淘宝购物车的需求，对逻辑功能进行整理和编码。\n基本需求设计1、购物车入口\na）点击App底部菜单的购物车TabbarItem进入\n\n\nb）从商品详情页的购物车按钮进入\n\n这里要注意区分购物车列表高度的问题。\n2、店铺分区当商城支持跨店购物，那么购物车内的所有商品需要按照不同的店铺分区显示，这个分类逻辑的步骤通常由后端完成，我们iOS端只需获取输出的数据在tableView中展示即可。店铺信息在section的headerView中展示，另外还会显示一个店铺选择按钮。\n3、商品cell中展示的信息我们通常将商品cell分为normal、edit两类状态，当然商品信息比较简单的情况下，也可以选择只有Edit状态。购物车中显示的商品信息包括：\n\n1）商品基本信息（展示图片、名称、规格、选择数量、价格（或现价、原价））\n\n\n2）限购信息/降价信息\n\n\n3）购物券满减信息、凑单按钮、活动标志（如狂欢节等）\n\n\n4）选择按钮\n\n\n5）其他\n\n以上信息在显示的时候遵从一定上下顺序，cell的布局会根据以上信息的有无适当调整。\n4、底部核算界面底部界面上功能比较明确——全选按钮、合计标签、结算按钮。\n这部分的关键在于，合计价格和全选按钮的状态都会表单上面的商品选中情况变化。下文中将会分析一下其中的逻辑。\n5、商品的增删改\n商品的添加：1）从商城中添加；2）在购物车列表中增加。添加时需要考虑购物车列表是否已有相同的或是相同店铺的商品。\n\n\n商品的删除：1）normal 状态下侧滑删除；2）点击编辑按钮进入edit 状态，点击删除按钮；3）点击右下角的批量删除。\n\n\n商品的修改：1）批量编辑修改；2）店铺编辑修改。修改内容包括商品数量和规格。\n\n以上五条涵盖了购物车的基本的功能需求，根据业务需要自行拓展。\n\n\n解决思路1、单选/店铺选择/全选联动模式解决思路：\ni）将全选按钮标记为A；\nii）购物车中m个店铺的选中按钮一次标记为A(0),A(1),...,A(m-1)；\niii）第x家店铺（x∈(0,m-1)）下的n个商品的选中按钮依次标记为A(x,0),A(x,1),...,A(x,n-1)。\n那么：\nA(x,0),A(x,1),...,A(x,n-1)全部选中可推导出A(x)选中；\nA(0),A(1),...,A(m-1)全部选中可以推导出A选中。\n点击某商品选择按钮A(m,n)的伪代码如下：\n12345678910111213141516171819202122A(m,n).selected &#x3D; !A(m,n).selected;BOOL shopAllChoose &#x3D; YES;for (int i &#x3D; 0; i &lt; n; i++) &#123;        shopAllChoose &amp;&#x3D; A(m,i).selected;&#125;A(m).selected &#x3D; shopAllChoose;BOOL allChoose &#x3D; YES;for (int j &#x3D; 0; j &lt; m; j++) &#123;        allChoose &amp;&#x3D; A(j).selected;&#125;A.selected &#x3D; allChoose;\n\n点击某店铺全选和所有商品全选的代码原理相似。\n2、编辑模式购物车设计中，出现两类编辑按钮：\n\n① 导航栏上的全选编辑\n\n\n② 每个section右上角的批量编辑\n\n点击①类按钮，①文本变为“完成”，同时②类按钮隐藏，所有的cell进入edit 状态；\n点击②类按钮，当前按钮文本变为“完成”，该section下所有cell进入edit 状态。\n修改商品数量可以通过加减按钮，也可以通过手动输入修改。当然，修改前需要对当前的数量做出判断，是否还能进行加减，或是输入的数据是否合理，如出现限购信息等。\n由于整个购物车的逻辑关系比较多，我们可以考虑将这部分功能单独放在一个UIView中处理，数量变化的具体实现可借鉴PPNumberButton。\n3、删除模式除了上文提到的edit 状态下点击删除按钮以外，还有一种就是在normal 状态左滑删除。\n\n\n\n\ncell在normal 状态时可以左滑删除，而在edit 状态下点击删除，要在下面方法中做出return YES/NO;的判断和区分。\n1- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath &#123;&#125;\n假如要自定义删除键，可以在UITableViewRowAction初始化时在title的定义部分，使用多个空格作为占位符，然后在layoutSubviews中找到cell图层上的UITableViewCellDeleteConfirmationView层添加上新定义的删除键。\n点击navigationItem上的“编辑”后，结算按钮变成删除按钮，可以对选中的商品进行删除，由于是店铺模式的存储形式，需要对模型的更新时机进行区分。\n4、总价计算总价计算公式很简单： 总价=Σ选中的商品的数量 * 选中的商品的单价\n但这个公式中存在两个变化量，一个是“是否选中”，一个是“数量”，也就是说总价刷新出现在以下场景：\n\n有商品的选中状态发生了改变： 点击了单选/店铺选择/全选按钮\n\n\n有选中的商品的数量发生改变：点击了增加/减少或者编辑了数量文本\n\n\n欢迎评论，最后-&gt; Demo传送门\n","thumbnail":"2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/cart.png","plink":"https://blog.fiteen.top/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/"},{"title":"阿里云直播鉴权算法","date":"2017-06-29T02:30:49.000Z","date_formatted":{"ll":"Jun 29, 2017","L":"06/29/2017","MM-DD":"06-29"},"updated":"2020-01-13T15:35:48.857Z","content":"\n阿里云官方给出的文档：用户指南-直播鉴权\n\n\n\n参数描述要配置出正确的鉴权，需要明确以下几个参数：\n推流地址\n完整的推流地址，形如：\nrtmp://video-center.alivecdn.com/{AppName}/{StreamName}?vhost={yourdomain}\n鉴权类型\n阿里云CDN 兼容并支持 A、B、C 三种鉴权方式，具体见 URL 鉴权方式。这里选择的是 A 类型\n鉴权KEY\nprivatekey 字段用户可以自行设置\n时间戳\n时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。\n有效时间\n以秒为单位的整数时间，用来控制直播推流时效\n鉴权方法 用户访问加密 URL ：\n\nrtmp://video-center.alivecdn.com/{AppName}/{StreamName}?vhost={yourdomain}&amp;auth_key={timestamp}-{rand}-{uid}-{hashvalue}\n\n\n\n\nauth_key字段\n描述\n\n\n\ntimestamp\n失效时间=时间戳+有效时间，CDN 服务器拿到请求后，首先会判断请求中的失效时间是否小于当前时间，如果小于，则认为过期失效并返回 HTTP 403 错误。\n\n\nrand\n随机数，一般设成0\n\n\nuid\n暂未使用（设置成0)\n\n\nhashvalue\n通过 md5 加密算法计算出的32位验证串\n\n\nhashvalue 计算方式如下：\n\nsstring = /{AppName}/{StreamName}-{timestamp}-{rand}-{uid}-{privatekey}hashvalue = md5(sstring)\n\n输入OBS中的鉴权内容如下：\n\nrtmpURL：rtmp://video-center.alivecdn.com/{AppName}流密钥：{StreamName}?vhost={yourdomain}&amp;auth_key={timestamp}-{rand}-{uid}-{hashvalue}\n\n","plink":"https://blog.fiteen.top/2017/ali-cloud-live-authentication-algorithm/"},{"title":"iOS 中 atomic 和 nonatomic 的区别","date":"2017-04-08T14:51:03.000Z","date_formatted":{"ll":"Apr 8, 2017","L":"04/08/2017","MM-DD":"04-08"},"updated":"2019-12-04T12:17:23.490Z","content":"nonatomic（非原子性） 和 atomic（原子性） 是 iOS 开发中用 @property 声明属性时，常用的两个关键字。\n\n\n看下面三种属性的声明方式：\n123@property(nonatomic, retain) UITextField *name;@property(atomic, retain) UITextField *name;@property(retain) UITextField *name;\n\n2、3 的意思是一样的，不写的时候默认声明成 atomic。\n内部实现如苹果官方文档中描述的那样，它们系统生成的存取方法是不一样的：\nnonatomic 对象的存取方法实现如下：\n12345678910- (UITextField *) name &#123;    return _name;&#125;- (void) setName:(UITextField *)name &#123;    if (_name !&#x3D; name) &#123;    \t[_name release];    \t_name &#x3D; [name retain];    &#125;&#125;\n\n而系统为 atomic 对象生成的存取方法会进行加锁：\n12345678910111213141516- (UITextField *) name &#123;    UITextField *res &#x3D; nil;    @synchronized(self) &#123;        res &#x3D; [[_name retain] autorelease];    &#125;    return res;&#125;- (void) setName:(UITextField *)name &#123;    @synchronized(self) &#123;    \tif (_name !&#x3D; name) &#123;      \t    [_name release];      \t    _name &#x3D; [name retain];    \t&#125;    &#125;&#125;\n\n线程安全atomic 可以保证 setter 和 getter 操作不受其它线程影响，因为锁的缘故，能够优先执行完当前操作：\n\n线程 A 的 setter 进行到一半，线程 B 调用了 getter，那么会执行完 setter 再执行 getter，线程 B 还是能得到线程 A setter 后完好无损的对象。\n\n那么它能保证整个对象就是线程安全的吗？\n答案是并不能，当几个线程同时调用 setter/getter 时，能得到一个完整的值，但这个值无法确定，举个例子：\n\n线程 A 调了 getter，与此同时线程 B、C 调了 setter，那么 A 最后 getter到的值，可能是\n\nB、C 未 setter 之前的原始值\nB setter 后的值\nC setter 后的值\n\n\n除了存取之外，线程安全还有其它的操作，比如：\n\n线程 A 正在 getter/setter 时，线程 B 同时进行 release，可能会直接 crash。\n\n因此，我们只能认定 atomic 是存取过程中的线程安全，并不是完全线程安全，别的线程也可以进行存取之外的操作，真正的线程安全需要开发者自己来保证。\n而 nonatomic 明显就是线程不安全的，如果有两个线程访问同一个属性，会出现无法预料的结果。因此 nonatomic 耗费的资源少，速度要比 atomic 快，性能也更好。\n使用在 iOS 应用中，大多数情况都是用在主线程上，不存在并发的问题，出于性能考虑，更倾向于用 nonatomic。\n而在 OSX 中，需要考虑多线程通讯，更适合用相对安全的 atomic 处理。\n总结综上，两者的区别可以总结如下：\n\n\n\n\natomic\nnonatomic\n\n\n\n是否默认\n√\n×\n\n\n内部实现\n存取过程中加锁\n存取过程中不加锁\n\n\n是否线程安全\n存取过程中线程安全\n线程不安全\n\n\n性能\n一般\n好\n\n\n适用于\nOSX 系统\niOS 系统\n\n\n","plink":"https://blog.fiteen.top/2017/the-difference-between-the-atomic-and-nonatomic-attributes/"},{"title":"你应该了解的 IDFA","date":"2017-02-07T06:26:10.000Z","date_formatted":{"ll":"Feb 7, 2017","L":"02/07/2017","MM-DD":"02-07"},"updated":"2020-01-14T03:43:57.222Z","content":"何为 IDFAIDFA，苹果 iOS6 开始新增的广告标识符， 全称 Identifier For Advertising，是每台 iOS 设备的唯一 ID，是投放定向广告的唯一方法。\n\n\n在苹果禁用 UDID 后，IDFA 成为了标识 iPhone 用户的标准。通常用于广告追踪，在同一设备的不同 App 间进行信息共享。\nIDFA 是一段16进制的32位字符串，例如D7DFA3F1-0E1C-49CD-AFBC-75601390FEA2。可以通过以下代码获取：\n123#import &lt;AdSupport&#x2F;ASIdentifierManager.h&gt;NSString *idfa &#x3D; [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n\n这个标识符虽然是唯一的，但并不是固定不变的，用户可以通过以下两种方式进行重置：\n\n设置→隐私→广告→还原广告标识符\n设置→通用→还原→还原所有设置/还原位置与信息\n\niOS10 之后，还新增了“限制广告追踪” 的设置，所以在获取 IDFA 之前，最好优先判断一下 [[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled] 返回的 BOOL 值，假如返回的是 YES，则能获取正确的 IDFA，否则获取到的字符串就会变成 00000000-0000-0000-0000-000000000000。\n因此，IDFA 并不能成为精确标识用户唯一性的符号。如果要确保唯一且固定，建议采用 UUID+Keychain 的方式，或者借助 iOS 系统可以获取的参数自定义一套算法去生成标志符。\n检查是否使用 IDFA当 App 提交应用市场审核的时候，苹果会询问“此 App 是否使用广告标识符号（IDFA）”。这里除了本地代码以外，还需要鉴别导入的任何第三方库中，是否使用了 IDFA。检查的方法很简单：\n\n打开终端 cd 到要检查的文件根目录\n执行语句 grep -r advertisingIdentifier .\n\n以含 IDFA 的友盟 SDK 为例，会出现 matches 的记录。\n\n\n\n审核时关于 IDFA 选项的选择那么如果选择了 “是”，就会提示你选择勾选4个选项框：\n\n在 App 内投放广告\n服务应用中的广告。如果你的应用中集成了广告的时候，你需要勾选这一项。\n\n标明此 App 安装来自先前投放的特定广告\n跟踪广告带来的安装。如果你使用了第三方的工具来跟踪广告带来的激活以及一些其他事件，但是应用里并没有展示广告你需要勾选这一项。\n\n标明此 App 中发生的操作来自先前投放的广告\n跟踪广告带来的用户的后续行为。如果你使用了第三方的工具来跟踪广告带来的激活以及一些其他事件，你需要勾选这一项。\n\niOS 中的“限制广告跟踪”设置\n对您的应用使用 IDFA 的目的做下确认，只要您获取了 IDFA，那么这一项都是需要勾选的。\n\n\n\n总结\n\n如果你的应用里只是集成了广告，不追踪广告带来的激活行为，那么选择 1 和 4；\n如果你的应用没有广告，而又获取了 IDFA，选择 2 和 4；\n如果你的应用没有广告，但是需要追踪广告带来的激活行为，那么选择2、3和4；\n如果你的应用里集成了广告，而且使用了sdk等用来追踪广告带来的激活行为，需要选择1,2,3和4 。\n\n\n如果还是无法确定如何选择，可以参考第三方的官方文档，基本上都会在开发文档中体现。\n","plink":"https://blog.fiteen.top/2017/what-is-idfa/"},{"title":"一次搞懂时间复杂度和空间复杂度","date":"2017-01-07T18:17:34.000Z","date_formatted":{"ll":"Jan 8, 2017","L":"01/08/2017","MM-DD":"01-08"},"updated":"2020-01-13T09:20:39.100Z","content":"学习数据结构和算法时，难免提到时间复杂度（asymptotic time complexity）和空间复杂度（space complexity）的概念。\n\n\n时间复杂度概念：描述一个算法执行时间与数据规模的增长关系，记作：T(n) = O(f(n))。\n计算时间复杂度时，需要遵循这一条原则：如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时时间复杂度就是 O(f(n))。\n比如：\nT(n)=n+5，时间复杂度为 O(n)；\nT(n)=n³+n²+1，时间复杂度为 O(n³)；\nT(n)=4n³，时间复杂度为 O(n³)。\n下面举几个例子：\n常数阶我们知道常数项对函数的增长速度影响并不大，所以当 T(n) = c，c 为一个常数时，我们说这个算法的时间复杂度为 O(1)。 哈希算法就是典型的 O(1) 时间复杂度，无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话）。\n123int n = 100;int sum = n * (n + 1) / 2;printf(\"%i\\n\", sum);\n\n像上面这段代码，无论 n 是多少，运行步骤都一样，所以时间复杂度是 O(1)。\n线性阶O(n) 代表数据量增大 n 倍，耗时也增大 n 倍，比如常见的遍历算法。\n对于一个循环，假设循环体的时间复杂度为 O(m)，循环次数为 n，那么循环的时间复杂度为 O(m×n)；\n123for(int i = 0; i &lt; n; i++) &#123;        // 循环次数为 n    printf(\"Hello, World!\\n\");      // 循环体时间复杂度为 O(1)&#125;\n\n此时时间复杂度为 O(1×n)，即 O(n)。\n平方阶Ο(n²)：代表数据量增大 n 倍，时间复杂度就是 n² ，比如冒泡排序。\n对于下面这个多循环，循环次数为 n×n，那么时间复杂度为 O(n × n × 1)，即 O(n²)。\n12345for(int i = 0; i &lt; n; i++) &#123;    for(int j = 0; j &lt; n; j++) &#123;        printf(\"Hello, World!\\n\");    &#125;&#125;\n\n对数阶O(logn)：当数据增大 n 倍时，耗时增大 logn 倍。比如下面这段代码，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度。\n1234for (int i = 1; i &lt;= n; i++) &#123;  i *= 2;  printf(\"%i\\n\", i);&#125;\n\n二分查找的时间复杂度就是 O(logn)。\n对数阶乘以 nO(nlogn)：当数据增大 n 倍时，耗时增大 nlogn 倍，比如。比如下面这段代码，当数据增大256倍时，耗时增大256*8=2048倍，这个复杂度高于线性阶低于平方阶。\n123456for(int i = 0; i &lt; n; i++) &#123;  for (int i = 2; i &lt; n; i++) &#123;    i *= 2;    printf(\"%i\\n\", i);  &#125;&#125;\n\n归并排序的时间复杂度就是 O(nlogn)。\n指数阶O(2^n)：当数据增大 n 倍时，耗时增大 2^n 倍，比如斐波那契数列：\n1234567long aFunc(int n) &#123;  if (n &lt;= 1) &#123;    return 1;  &#125; else &#123;    return aFunc(n - 1) + aFunc(n - 2);  &#125;&#125;\n\n常见的算法时间复杂度由小到大依次为：\nΟ(1)＜Ο(logn)＜Ο(n)＜Ο(nlogn)＜Ο(n²)＜Ο(2^n)\n空间复杂度概念：描述一个算法占用空间与数据规模的增长关系，记作：S(n) = O(f(n))。\n一个算法在计算机上占用的内存包括：程序代码所占用的空间、输入输出数据所占用的空间、辅助变量所占用的空间这三个方面。程序代码所占用的空间取决于算法本身的长短，输入输出数据所占用的空间取决于要解决的问题，是通过参数表调用函数传递而来，只有辅助变量是算法运行过程中临时占用的存储空间，与空间复杂度相关。\n通常来说，只要算法不涉及到动态分配的空间以及递归、栈所需的空间，空间复杂度通常为 O(1)。\n算法的空间复杂度并不是计算实际占用的空间，而是计算整个算法的辅助空间单元的个数，与问题的规模没有关系。\n","plink":"https://blog.fiteen.top/2017/asymptotic-time-complexity-and-space-complexity/"},{"title":"『2016』莫愁前路无知己","date":"2016-12-31T15:59:01.000Z","date_formatted":{"ll":"Dec 31, 2016","L":"12/31/2016","MM-DD":"12-31"},"updated":"2020-01-13T15:38:53.419Z","content":"城西银泰喧闹的跨年倒计时还在进行，明晃晃的照灯和兴奋的人群。\n\n\n往日不可追2016，我终于向四年的大学生活告别，同时也为十六年的学生生涯画上了句点。高考失利后我放弃了复读，又在父母的声声抗议中坚持填报了数学类。我知道自己表面上文静顺从，骨子里却住着一颗叛逆的灵魂。我敏感又骄傲，低调却好强，正义还心软，别扭的性格也使我前行的道路上真的走了许多弯路。\n并不喜欢指挥和领导，却意外接任了校报负责人；\n因为是学院文艺部部长的室友拜托着凑名额参加的校运会，竟也拿到了奖牌；\n毫无数学建模经验，第一次参加美赛，却成为了当年唯一的获奖队伍；\n在学科竞赛、学生工作、志愿者活动之间连轴忙碌依然保持专业第一;\n……\n看起来幸运的人生，自己却知道到底有很辛苦，数不清多少个凌晨，一遍遍修改文案、校正排版、调整样式，不厌其烦地翻遍资料去接触理解陌生的领域。我不喜欢投机取巧，想到坚持自己的初心。\n大学的第一张奖状是军训优秀学员，最后一本证书是浙江省优秀毕业生，某种意义上也算完成了善始善终。感恩每段经历，感恩遇到过的人。我不够左右逢源，也不情愿为了迎合别人的眼光停滞自己的脚步。这个世界上优秀的人数不胜数，有人说强者都是孤独的，弱者才需要成群结队，但我想，强者也总能找到自己的队伍吧。\n来日犹可期得不到的永远在骚动，被偏爱的都有恃无恐。\n还在考研的好友说，好羡慕你，都工作赚钱了。我却对她说，还是读书时候好啊。我当然知道这世界，不会完美无瑕，可我们无法阻止时光的流转，长大了就需要去纠结工资开销、租房买房、柴米油盐、婚姻家庭，也需要足够强大去抵挡诱惑。\n人生很漫长，起码现在的我还热爱着敲击键盘的感觉，热爱每次 run 出美丽图案的惊叹，热爱每个 warning 和 error 被消除的喜悦，那就享受此刻的热爱。\n人生也很短暂，感谢所有的 exception 和 not found，感恩让我选择今天的每一次 switch 和 if。前进的路上，难免孤独，但请记得莫愁前路无知己，天下谁人不识君。\n","thumbnail":"2016/annual-summary-2016/2016.png","plink":"https://blog.fiteen.top/2016/annual-summary-2016/"},{"title":"如何在 Xcode8上安装插件","date":"2016-11-30T04:02:20.000Z","date_formatted":{"ll":"Nov 30, 2016","L":"11/30/2016","MM-DD":"11-30"},"updated":"2020-01-14T03:01:19.620Z","content":"正式推出 Xcode8 已有两个多月，也有不少朋友分享了安装插件的方法，笔者在这里整理了一个亲测有效的方法。\n\n\n\n更新 Xcode，目前最新版本是8.1；\n\n由于安装插件会影响原来的 Xcode 打包上传，我们在应用程序里复制一个 Xcode，并重命名为 XcodeSigner；\n\n\n打开钥匙串，创建新证书，名称填 XcodeSigner，证书类型选择代码签名（Code Signing）；\n\n\n\n\n在终端命令中输入：sudo codesign -f -s XcodeSigner /Applications/XcodeSigner.app耐心等待命令执行完毕；\n\n获得 XcodeSigner 的 UUID；通过在终端命令行输入：defaults read /Applications/XcodeSigner.app/Contents/Info DVTPlugInCompatibilityUUID \n\n在 GitHub 上下载好想安装的插件，以 ESJsonFormat 为例，打开方式选择 XcodeSigner；\n\n\n\n\n检查 info.plist 中是否已经添加了第5步获得的 UUID ，未添加可能会造成 XcodeSigner 闪退。若文件中已经存在，直接运行项目即可；\n\n\n\n运行成功后，关闭 XcodeSigner ，重新启动，这时会弹出如下两类提示框，分别选择“ Load Bundle ”和“允许”（或“始终允许”），这时点击 Window 就能看到列表中多了 ESJsonFormat 了。\n\n\n\n","plink":"https://blog.fiteen.top/2016/install-plugins-on-xcode8/"},{"title":"Git 手册之用 .gitignore 忽略文件","date":"2016-11-21T17:34:57.000Z","date_formatted":{"ll":"Nov 22, 2016","L":"11/22/2016","MM-DD":"11-22"},"updated":"2020-01-14T02:41:03.737Z","content":"提交代码后我们经常发现，即使没有任何代码修改，有一些文件也会提示更新，例如：UserInterfaceState.xcuserstate、.DS_Store 等。\n这种情况可以通过添加 .gitignore 文件解决。\n\n\n如何在项目中添加 .gitignore具体步骤如下：\n\n打开终端 进入项目中 .git 同目录下\n1cd &lt;path&gt;\n\n创建 .gitignore 文件\n1touch .gitignore\n\n打开 .gitignore 文件\n1open .gitignore\n\n参照 .gitignore 模版，找到对应的开发语言，将模版文本粘贴到自己的 .gitignore 中\n\n更新项目\n123git add .gitignoregit commit -m \"feat: add .gitignore file\"git push\n\n\n\n\n\n删除 .DS_Store.DS_Store 是Mac OS 保存文件夹的自定义属性的隐藏文件。如果项目中还没有自动生成 .DS_Store，把它加入到 .gitignore 中即可；但如果项目中已经有了，先从项目中将其删除，再把它加入到 .gitignore 里。步骤如下：\n\n删除项目中的所有 .DS_Store\n1find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch\n\n将 .DS_Store 加入到 .gitignore 文件中\n1echo .DS_Store &gt;&gt; ~/.gitignore\n\n更新项目\n123git add --allgit commit -m \"feat: ignore .DS_Store\"git push\n\n\n\n如果只需要删除磁盘上的 .DS_Store，用下面的命令来删除当前目录及其子目录下的所有 .DS_Store 文件：\n1find . -name '*.DS_Store' -type f -delete\n\n你也可以通过输入这串命令直接禁止生成 .DS_store，重启Mac即可生效：\n1defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE\n\n恢复 .DS_store 生成的命令为：\n1defaults delete com.apple.desktopservices DSDontWriteNetworkStores","plink":"https://blog.fiteen.top/2016/git-ignore/"},{"title":"《Effective Objective-C 2.0》整理（四）：协议与分类","date":"2016-09-28T12:21:06.000Z","date_formatted":{"ll":"Sep 28, 2016","L":"09/28/2016","MM-DD":"09-28"},"updated":"2019-12-05T03:29:58.204Z","content":"第23条：通过委托与数据源协议进行对象间通信Objective-C 开发中广泛使用“委托模式”来实现对象间的通信，该模式的主旨是：定义一套接口，某对象若想接受另一个对象的委托，则需遵从此接口，以便成为其“委托对象”（delegate）。而“另一个对象”则可以给其委托对象回传一些信息，也可以在发生相关事件时通知委托对象。\n\n\n此模式可将数据和业务逻辑解耦。例如，用户界面有个显示一系列数据所用的视图，视图对象的属性中，可以包含负责数据和事件处理的对象。这两种对象分别称为“数据源”（data source）与“委托”（delegate）。\n委托（代理模式）（Delegate）：委托别人办事，自己不处理，交给别人处理；\n协议（Protocol）：使用了这个协议就要按照协议办事\n下面总结一下委托模式的实现，委托方：\n1234567891011121314151617181920212223242526&#x2F;&#x2F; .h 文件中&#x2F;&#x2F; 定义协议@protocol ClassADelegate&#x2F;&#x2F; 协议中不标注，默认为 @required 类型，必须实现- (void)methodA;@optional&#x2F;&#x2F; 特别标注了 @optional 类型，表示可以不实现- (void)methodB;@end@interface ClassA : NSObject&#x2F;&#x2F; 引用，存代理方@property (nonatomic, weak) id &lt;ClassADelegate&gt; delegate;@end&#x2F;&#x2F; .m 中在合适的时机给代理方发消息@implementation ClassB- (void)rightTimeMethod &#123;    &#x2F;&#x2F; 实现 @requiered 方法 methodA    [self.delegate methodA];    &#x2F;&#x2F; 实现 @optional 方法 methodB    if ([self.delegate respondsToSelector:@selector(methodB)]) &#123;        [self.delegate methodB];    &#125;&#125;@end\n\n在这里需要注意的是：delegate 属性需要定义成 weak，而非 strong。因为两者之间必须为“非拥有关系”，否则会造成循环引用，从而导致内存泄漏。\n而代理方则需要：\n12345678910111213141516&#x2F;&#x2F; 遵守协议@interface ClassB() &lt;ClassADelegate&gt;@end@implementation ClassB&#x2F;&#x2F; 实现方法#pragma mark - ClassADelegate- (void)methodA &#123;    &#x2F;&#x2F; how to implementation methodA&#125;&#x2F;&#x2F; 将自己设置为代理方- (void)rightTimeMethod &#123;\tClassA classA &#x3D; [ClassA new];\tclassA.delegate &#x3D; self;&#125;@end\n\n\n\n第24条：将类的实现代码分散到便于管理的数个分类之中当一个类中充斥了大量的方法实现时，可以通过分类这种模式将这个庞大的类打散，例如：\n\nEOCPerson+Friendship(.h/.m)\nEOCPerson+Work(.h/.m)\nEOCPerson+Play(.h/.m)\n\n通过分类机制，可以把类的代码分成多个易于管理的小块，归入不同的“功能区”，以便单独检视，也便于调试。\n在编写准备分享给其他开发者使用的程序库时，可以考虑创建 Private 分类，如果程序库中的某个地方要用到这些方法，那就引入此分类的头文件。而分类的头文件并不随程序库一并公开，于是该库的使用者也就不知道库里还有这些私有方法了。\n第25条：总是为第三方类的分类名称加前缀如果分类中有何原有类同名的方法，会优先调用分类中的方法，同名方法调用的优先级为分类 &gt; 本类 &gt; 父类。如果多个分类中都有和原有类中同名的方法, 那么调用该方法的时候执行谁由编译器决定，编译器会执行最后一个参与编译的分类中的方法。\n为了避免分类覆盖，可以通过给类名和方法名都加专属前缀的方式解决。\n例如：\n123456@interface NSString (ABC_HTTP)&#x2F;&#x2F; Encode a string with URL encoding- (NSString *)abc_urlEncodedString;&#x2F;&#x2F; Decode a URL encode string- (NSString *)abc_urlDecodedString;@end\n\n\n\n第26条：勿在分类中声明属性除了“class-continuation 分类”之外，其他分类都无法向类中新增实例变量。原因是分类无法合成与属性相关的实例变量。分类中可以写 @property，但不会生成 setter/getter 方法，也不会生成实现以及私有的成员变量，会编译通过，但是引用变量会报错。\n简单地说，分类是运行期决议的，在运行期，对象的内存布局已经确定了，如果此时添加实例变量会破坏类的内部结构。\n但是如果一定要添加，也是可以通过分类中为该属性实现存取方法来实现。如下：\n123456789101112131415#import &lt;objc&#x2F;runtime.h&gt;static const char *kFriendsPropertyKey &#x3D; &quot;kFriendsPropertyKey&quot;;@implementation EOCPerson (Friends)- (NSArray *)friends &#123;    return objc_getAssociatedObject(self, kFriendsPropertyKey);&#125;- (void)setFriends:(NSArray *)friends &#123;    objc_setAssociatedObject(self,                             kFriendsPropertyKey,                             friends,                             OBJC_ASSCIATIOM_RETAIN_NONATOMIC);&#125;@end\n\n但是这种做法并不推荐。分类机制，应该理解为一种手段，目标在于拓展类的功能，而非封装数据。最好的做法，就是将封装数据所用的全部属性都定义在主接口里。\n第27条：使用“class-continuation 分类”隐藏实现细节分类的主要作用是为已经存在的类添加方法，因为分类的结构体指针中，没有属性列表，只有方法列表。本章介绍的是一种特殊的分类“class-continuation”，用于定义一些无需对外公布的方法及实例变量。形如：\n12345678#import &quot;ClassA.h&quot;@interface ClassA ()&#x2F;&#x2F; 定义你所需要的私有变量或方法@end@implementation ClassA&#x2F;&#x2F; 实现@end\n\n若想使类所遵循的协议不为人所知，也可以在“class-continuation 分类”中声明。\n第28条：通过协议提供匿名对象协议定义了一系列方法，遵从此协议的对象应该实现它们。于是，我们可以用协议把自己所写的 API 之中的实现细节隐藏起来，将返回的对象设计为遵从此协议的纯 id 类型，这样，想隐藏的类型就不会出现在 API 之中了。例如 ClassA、ClassB 都会遵循某个协议 EOCDelegate，假如指定类型，就会这样约定：\n12@property (nonatomic ,weak) ClassA &lt;EOCDelegate&gt; delegate;@property (nonatomic ,weak) ClassB &lt;EOCDelegate&gt; delegate;\n\n如果不想指明具体使用哪个类，就可以将 delegate 对象约定成 纯 id 类型，这个对象也可以称之为“匿名对象”。\n1@property (nonatomic ,weak) id &lt;EOCDelegate&gt; delegate;\n\n总结一下：\n\n协议可以在某种程度上提供匿名对象，具体的对象类型可以淡化成遵从某协议的 id 类型，协议里规定了对象所应实现的方法。\n使用匿名对象来隐藏类型名称（或类名）。\n如果具体类型不重要，重要的是对象能否处理好一些特定的方法，那么就可以使用这种协议匿名对象来完成。\n\n\n参考资料：《Effective Objective-C 2.0》编写高质量iOS与OS X代码的52个有效方法\n","plink":"https://blog.fiteen.top/2016/eoc2.0-4/"},{"title":"《Effective Objective-C 2.0》整理（三）：接口与 API 设计","date":"2016-09-22T09:55:21.000Z","date_formatted":{"ll":"Sep 22, 2016","L":"09/22/2016","MM-DD":"09-22"},"updated":"2019-11-18T13:17:40.000Z","content":"第15条：用前缀避免命名空间冲突Objective-C 没有其他语言那种内置的命名空间（namespace）机制，我们需要变相实现命名空间。\n而 Apple 宣称其保留使用所有“两字母前缀”的权利，因此我们选用的前缀应该是三个字母的，一般选用与公司、应用程序或与二者有关联之名称作为类名的前缀，并在所有代码中均只用这一前缀。\n\n\n第16条：提供“全能初始化方法”所有对象均要初始化。我们将可为对象提供必要信息以便其能完成工作的初始化方法叫做“全能初始化方法”。\n以某个矩形类为例，它的全能初始化方法为：\n1234567- (id)initWithWidth:(float)width andHeight:(float)height&#123;    if ((self &#x3D; [super init])) &#123;        _width &#x3D; width;        _height &#x3D; height;    &#125;    return self; &#125;\n\n若全能初始化方法与超类不同，则需覆写超类中的对应方法。如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。\n举例，某个正方形类作为矩形类的子类，它需要满足 width 和 height 一致的条件，\n那么它的初始化方法为：\n123- (id)initWithDimension:(float)dimension&#123;    return [super initWithWidth:dimension andHeight:dimension];&#125;\n\n然后覆写矩形类的全能初始化：\n1234- (id)initWithWidth:(float)width andHeight:(float)height&#123;    float dimension &#x3D; MAX(width, height);    return [self initWithDimension:dimension];&#125;\n\n并抛出异常：\n123- (id)initWithWidth:(float)width andHeight:(float)height&#123;    @throw [NSException exceptionWithName:NSInternalInconsistencyException reason:@&quot;Must use initWithDimension: instead.&quot; userInfo:nil];&#125;\n\n第17条：实现 description 方法调试程序时，经常需要打印并查看对象信息。我们通常会使用下面的方法打印：\n1NSLog(@&quot;object &#x3D; %@&quot;, object);\n\n假如 object 是个自定义类，输出的信息形如：\n1object &#x3D; &lt;CustomClass: 0x7fd9a1600600&gt;\n\n想要看到类中完整的信息，需要在类中覆写 description 方法。建议在该方法中打印出类的名字和指针地址。\n123- (NSString*)description&#123;    return [NSString stringWithFormat:@&quot;&lt;%@:%p,\\&quot;%@ %@\\&quot;&gt;&quot;,[self class],self,_parm1,_parm2];&#125;\n\nNSObject 协议中有一个 debugDescription 方法，它是开发者在调试器中以控制台命令打印对象时才调用的。Foundation 框架的 NSArray 类就是实现了 debugDescription。\n第18条：尽量使用不可变对象设计类时，应充分运用属性来封装数据。默认情况下，属性是 read-write，这样设计出来的类都是“可变的”。\n如果把可变对象放入 collection 之后又修改其内容，那么很容易破坏 set 的内部数据结构，使其失去固有的语义，因此应该尽量减少对象中的可变内容，即定义为 readonly 属性。\n不要把可变的 collection 作为属性公开，而应提供相关方法，一次修改对象中的可变collection。例如，某个 EOCPerson 类，假如要改变 friends 数据集，可通过 addFriend 和 removeFriend 实现：\n1234567891011121314#import &lt;Foundation&#x2F;Foundation.h&gt;@interface EOCPerson : NSObject@property(nonatomic,copy,readonly)NSString *firstName;@property(nonatomic,copy,readonly)NSString *lastName;@property(nonatomic,strong,readonly)NSSet *friends;- (id)initWithFirstNmae:(NSString *)firstName               lastName:(NSString *)lastName;- (void)addFriend:(EOCPerson*)person;- (void)removeFriend:(EOCPerson*)person;@end\n\n第19条：使用清晰而协调的命名方式方法命名规则：\n\n如果方法的返回值是新创建的，那么方法名的首个词应是返回值的类型，除非前面还有修饰语，例如localizedString。属性的存取方法不遵循这种命名方式，因为一般认为这些方法不会创建新对象。\n应该把表示参数类型的名词放在次参数前面。\n如果方法要在当前对象上执行操作，那么就应该包含动词；若执行操作时还需要参数，则应该在动词后面加上一个或多个名词。\n不要使用 str 这种简称，应该用 string 这样的全称。\n如果某方法返回非属性的Boolean值，那么应该根据其功能，选用 has 或 is 当前缀。\n将 get 整个前缀留给那些借由“输出参数”来保存返回值的方法，比如说，把返回值填充到“C语言数组”里的那种方法就可以使用这个词做前缀。\n\n类与协议的命名\n\n给方法起名时的第一要务就是确保其风格与你自己的代码所要继承的框架相符。\n\n\n最重要的一点就是，命名方式要协调一致。如果要从其他框架中集成子类，那么务必遵循其命名惯例。\n\n第20条：为私有方法名加前缀编写类的实现代码时，经常要写一些只在内部使用的方法。为这种方法的名称加上某些前缀，这就可以轻易将公共方法和私有方法区分开，有助于调试。\n例如，使用 _p 作为前缀，p 表示 “private”，而下划线可以把这个字母和真正的方法名区隔开：\n12345678@interface EOCObject : NSObject- (void)publicMethod;@end@implementation EOCObject- (void)publicMethod &#123;&#125;- (void)p_privateMethod &#123;&#125;@end\n\n但是，需要注意的是，不要单用一个下划线做私有方法的前缀，因为这种做法是预留给苹果公司的。\n第21条：理解 Objective-C 错误模型不同于 Java 等编程语言，面对异常处理，Objective-C 现在采用的方法是：只有在极其罕见的情况下抛出异常，异常抛出之后，无须考虑恢复问题，而且应用程序此时也应该退出。\n而出现“不那么严重的错误”时，Objective-C 语言所使用的编程范式为：令方法返回 nil/0，或是使用 NSError，以表明其中有错误发生。\nNSError 的用法更加灵活，因为经由此对象，我们可以把导致错误的原因反馈给调用者。NSError 对象里封装了三条信息：\n\nError domain（错误范围，类型为字符串）\nError code（错误码，类型为整数）\nUser info（用户信息/有关此错误的额外信息，类型为字典）\n\nNSError 经常由“输出参数”返回给调用者，例如：\n12345678910111213- (BOOL)doSomething:(NSError**)error &#123;    &#x2F;&#x2F; Do something that may cause an error        if ( &#x2F;* there was an error*&#x2F; ) &#123;        if (error) &#123;            &#x2F;&#x2F; Pass the &#39;error&#39; through the out-parameter            *error &#x3D; [NSError errorWithDomain:domain code:code userInfo:userInfo];        &#125;        return NO; &#x2F;&#x2F;&#x2F;&lt; Indicate failure    &#125; else &#123;        return YES; &#x2F;&#x2F;&#x2F;&lt; Indicate success    &#125;&#125;\n\n调用者可以根据错误类型分别处理各种错误，错误范围应该定义成 NSString 型的全局常量，而错误码则定义成枚举类型为佳，如：\n 1234567891011&#x2F;&#x2F; EOCErrors.hextern NSString *const EocErrorDomain;typedef NS_ENUM(NSUInteger,EOCError) &#123;    EOCErrorUnknown              &#x3D; -1;    EOCErrorInternalInconsistency&#x3D; 100;    EOCErrorGeneralFault         &#x3D; 105;    EOCErrorBadInput             &#x3D; 500;&#125;;&#x2F;&#x2F; EOCErrors.mNSString *const EOCErrorDomain &#x3D; @&quot;EOCErrorDomain&quot;;\n\n第22条：理解 NSCopying 协议在 Objective-C 中，对象的拷贝通过 copy 完成。如果想要自定义的类支持拷贝，那就要实现 NSCopying 协议，该协议只有一个方法：\n1- (id)copyWithZone:(NSZone *)zone;\n\n如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 NSCopying 与 NSMutableCopying 协议。\n1- (id)mutableCopyWithZone:(NSZone *)zone;\n\n复制对象时需决定采用浅拷贝和深拷贝。\n深拷贝：在拷贝对象自身时，将其底层数据也一并复制过去；\n浅拷贝：只拷贝容器对象本身，而不复制其中数据。\n一般情况下应该尽量执行浅拷贝，如：\n12345- (void)copyWithZone:(NSZone *)zone &#123;    EOCPerson *copy &#x3D; [[[self class] allocWithZone:zone] initWithFirstNmae:_firstName lastName:_lastName];    copy-&gt;_friends &#x3D; [_friends mutableCopy];    return copy;&#125;\n\n如果你写的对象需要深拷贝，那么可以考虑新增一个专门执行深拷贝的方法，如下：。\n12345- (void)deepCopy &#123;    EOCPerson *copy &#x3D; [[[self class] alloc]initWithFirstNmae:_firstName lastName:_lastName];    copy-&gt;_friends &#x3D; [[NSMutableSet alloc]initWithSet:_friends copyItems:YES];    return copy;&#125;\n\n\n\n参考资料：《Effective Objective-C 2.0》编写高质量iOS与OS X代码的52个有效方法\n","plink":"https://blog.fiteen.top/2016/eoc2.0-3/"},{"title":"《Effective Objective-C 2.0》整理（二）：对象、消息、运行时","date":"2016-09-19T05:20:00.000Z","date_formatted":{"ll":"Sep 19, 2016","L":"09/19/2016","MM-DD":"09-19"},"updated":"2020-01-17T11:30:54.511Z","content":"第6条：理解“属性”这一概念实例变量一般通过“存取方法”来访问。\n\n获取方法（getter）：读取变量值\n设置方法（setter）：写入变量值\n\n\n\n属性能够访问封装在对象里的数据，意味着编译器会自动写出一套存取方法。\n123@property NSString *firstName; &#x2F;&#x2F; Same as:- (NSString *)firstName;- (void)setFirstName:(NSString *)firstName;\n\n也可以用“点语法”访问属性。\n12345aPerson.firstName &#x3D; @&quot;Bob&quot;; &#x2F;&#x2F; Same as:[aPerson setFirstName:@&quot;Bob&quot;];NSString *lastName &#x3D; aPerson.lastName; &#x2F;&#x2F; Same as:NSString *lastName &#x3D; [aPerson lastName];\n\n下面区分一下3种声明类型：\n\n\n\n声明类型\n描述\n\n\n\n@property\n在头文件中声明 getter 和 setter 方法\n\n\n@synthesize\n在实现文件中生成相应的 getter 和 setter 方法\n\n\n@dynamic\n告诉编译器开发者会自己实现 getter 和 setter 方法。若未实现，编译通过但程序运行时会崩溃\n\n\n属性各种特质设定会影响编译器所生成的存取方法，介绍以下特质：\n原子性\n\natomic：原子性，不声明即默认。存取过程中线程安全，系统会自动的创建 lock 锁，锁定变量。\nnonatomic：非原子性的。线程不安全，性能更好。开发时应使用 nonatomic。\n\n读/写权限\n\nreadwrite： 属性拥有 getter 和 setter，若该属性由 @synthesize 实现，则编译器会自动生成这两个方法。\nreadonly：一种“拥有关系”，设置新值时，设置方法会保留新值，并释放旧值，再将新值设置上去。\n\n内存管理语义\n\nassign： “设置方法”只针对“纯量类型”（CGFloat、NSInteger等）的简单赋值操作。不进行任何 retain 操作。\nstrong：一种“拥有关系”，设置新值时，设置方法会保留新值，并释放旧值，再将新值设置上去。\nweak： 一种“非拥有关系”，设置新值时，既不保留新值，也不释放旧值。在属性所指的对象遭到摧毁时，属性值也会清空。\nunsafe_unretained：语义和 assign 相同，适用于“对象类型”。非拥有（“不保留”，unretained），当属性所指的对象遭到摧毁时，属性值不会自动清空（“不安全”，unsafe）。\ncopy：所属关系与 strong 类似，但设置方法并不保留新值，而是将其 copy。\n\n问题：为什么NSString *要用copy 修饰？答案：因为传递给setter的新值有可能指向一个 NSMutableString 类的实例，它是 NSString 的子类，表示一种可以修改其值的字符串，此时若是不拷贝字符串，那么设置完属性后，字符串的值就可能会在对象不知情的情况下遭人更改。\n方法名\n\ngetter=指定“获取方法”的方法名。12&#x2F;&#x2F; UISwitch类中表示“开关”是否打开的属性如下定义：@property (nonatomic, getter&#x3D;isOn) BOOL on;\nsetter=指定“设置方法”的方法名，用法不常见。\n\n通过上述特质，可以微调由编译器所合成的存取方法。但若是自己实现存取方法，应该保证其具备相关属性所声明的特质。\n第7条：在对象内部尽量直接访问实例变量在对象之外访问实例变量时，总是通过属性来做，但在对象内部访问实例变量一直存在争议。\n笔者建议在读取实例变量时采用直接访问的形式，设置实例变量的时候通过属性来做。\n举例：\n1234567@interface EOCPerson : NSObject@property (nonatomic, copy) NSString *firstName;@property (nonatomic, copy) NSString *lastName;&#x2F;&#x2F; Convenience for firstName + &quot; &quot; + lastName;- (NSString *)fullName;- (void)setFullName:(NSString *)fullName;@end\n\nfullName 和 setFullName 可以这样实现：\n123456789101112131415161718&#x2F;&#x2F; 使用点语法- (NSString *)fullName &#123;    return [NSString stringWithFormat:@&quot;%@ %@&quot;,self.firstName,self.lastName];&#125;- (void)setFullName:(NSString *)fullName &#123;    NSArray *components &#x3D; [fullName componentsSeparatedByString:@&quot; &quot;];    self.firstName &#x3D; [components objectAtIndex:0];    self.lastName &#x3D; [components objectAtIndex:1];&#125;&#x2F;&#x2F; 直接访问实例变量- (NSString *)fullName &#123;    return [NSString stringWithFormat:@&quot;%@ %@&quot;,_firstName,_lastName];&#125;- (void)setFullName:(NSString *)fullName &#123;    NSArray *components &#x3D; [fullName componentsSeparatedByString:@&quot; &quot;];    _firstName &#x3D; [components objectAtIndex:0];    _lastName &#x3D; [components objectAtIndex:1];&#125;\n这两种写法有以下区别：\n\n由于不经过“方法派发”（详见第11条），直接访问实力变量的速度比较快。在这种情况下，编译器所生成的代码会直接访问保存对象实例变量的那块内存。\n直接访问实例变量时，不会调用 setter 方法，那就绕过了第6条所提及的“内存管理语义”，比如：在 ARC 下直接访问一个声明为 copy 的属性，不会拷贝属性，只会保留新值并释放旧值。\n直接访问实例变量，不会触发 KVO 通知。\n通过属性来访问有助于排查与之相关的错误，因为可以给 getter/setter 方法新增断点，监控该属性的调用者及其访问时机。\n\n由此衍生一种折中方案：写入实例变量时，通过其“设置方法”来做，读取时直接访问之。此方法既能提高读取操作的速度，又能控制对属性的写入操作。\n注意：如果使用懒加载，必须通过存取方法来访问属性，否则实例变量永远不会初始化。\n第8条：理解“对象等同性”这一概念NSObject 协议中有两个用于判断等同性的关键方法：\n12- (BOOL)isEqual:(id)object;- (NSUInteger)hash;\nNSObject 类对这两个方法的默认实现是：当且仅当其“指针值”完全相等时，这两个对象才相等。若想在自定义的对象中正确覆写这些方法，就必须先理解其约定。\n如果 “isEqual:” 方法判定两个对象相等，那么其 hash 方法也必须返回同一个值。但是，如果两个对象的 hash 方法返回同一个值，那么 “isEqual:” 方法未必会认为两者相等。\n比如下面这个类：\n12345678910111213141516171819202122232425262728@interface EOCPerson : NSObject@property (nonatomic, copy) NSString *firstName;@property (nonatomic, copy) NSString *lastName;@property (nonatomic, assign) NSUInteger age;@end &#x2F;&#x2F; 我们认为，如果两个 EOCPerson 的所有字段都相等，那么两个对象就相等。- (BOOL)isEqual:(id)object &#123;    if (self &#x3D;&#x3D; object) return YES;    if ([self class] !&#x3D; [object class]) return NO;        EOCPerson *otherPerson &#x3D; (EOCPerson *)object;    if (![_firstName isEqualToString:otherPerson.firstName])        return NO;    if (![_lastName isEqualToString:otherPerson.lastName])        return NO;    if (_age !&#x3D; otherPerson.age)        return NO;    return YES;&#125;- (NSUInteger)hash &#123;    NSUInteger firstNameHash &#x3D; [_firstName hash];    NSUInteger lastNameHash &#x3D; [_lastName hash];    NSUInteger ageHash &#x3D; _age;    return firstNameHash ^ lastNameHash ^ ageHash;&#125;\nisEqual 检测规则：只要其中有不相等的属性，就判定两对象不等，否则两对象相等。\ncollection 在检索哈希表时，会把对象的哈希码做索引。在写 hash 方法时，需要考虑性能以及减小创建字符串的开销，在减少碰撞频度与降低运算复杂程度之间做出取舍。\n特定类所具有的等同性判定方法\n由于 Objective-C 在编译器不做强类型检查，这样容易不小心传入类型错误的对象，因此做判定时应确保所传对象的类型正确性。\n以 EOCPerson 类为例：\n1234567891011121314151617181920- (BOOL)isEqualToPerson:(EOCPerson *)otherPerson &#123;    if (self &#x3D;&#x3D; otherPerson) return YES;        if (![_firstName isEqualToString:otherPerson.firstName])        return NO;    if (![_lastName isEqualToString:otherPerson.lastName])        return NO;    if (_age !&#x3D; otherPerson.age)        return NO;    return YES;&#125;- (BOOL)isEqual:(id)object &#123;    &#x2F;&#x2F; 如果受测参数与接受该消息的对象都属于同一个类，那么调用自己编写的判定方法，否则交由超类来判断。    if ([self class] !&#x3D; [object class]) &#123;        return [self isEqualToPerson:(EOCPerson *)object];    &#125; else &#123;        return [super isEqual:object];    &#125;&#125;\n等同性判定的执行深度\n不要盲目地逐个检测每条属性，而是应该依照具体需求来制定检测方案。\n容器中可变类的等同性\n如果把某对象放入set之后又修改其内容，可能会出现容器中有相同对象的情况，要注意其隐患的发生。\n第9条：以“类族模式”隐藏实现细节“类族”是一种可以隐藏“抽象基类”背后实现细节的模式，在 Objective-C 系统框架中普遍使用。\n创建类族\n举例创建一个处理雇员的类族：\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152typedef NS_ENUM (NSUInteger, EOCEmployeeType) &#123;    EOCEmployeeTypeDeveloper,    EOCEmployeeTypeDesigner,    EOCEmployeeTypeFinance,&#125;;@interface EOCEmployee : NSObject@property (copy) NSString *name;@property NSInteger salary;&#x2F;&#x2F; 创建雇员对象+ (EOCEmployee*)employeeWithType:(EOCEmployeeType)type;&#x2F;&#x2F; 雇员的日常工作- (void)doADaysWork;@end@implementation EOCEmployee+ (EOCEmployee*)employeeWithType:(EOCEmployeeType)type &#123;    switch (type) &#123;        case EOCEmployeeTypeDeveloper:            return [EOCEmployeeDeveloper new];            break;        case EOCEmployeeTypeDesigner:            return [EOCEmployeeDesigner new];            break;        case EOCEmployeeTypeFinance:            return [EOCEmployeeFinance new];            break;    &#125;&#125;- (void)doADaysWork &#123;    &#x2F;&#x2F; 供子类实现&#125;@end&#x2F;&#x2F; 每个“实体子类”都从基类继承而来@interface EOCEmployeeDeveloper:EOCEmployee@end@implementation EOCEmployeeDeveloper- (void)doADaysWork &#123;    [self writeCode];&#125;@end\n\n本例中，基类实现了一个“类方法”，该方法根据待创建的雇员类别分配好对应的雇员类实例。这种“工厂模式”是创建类族方法之一。\nCocoa 里的类族\n系统框架中有许多类族，大部分 collection（集合）类都是类族。例如 NSArray 与其可变版本 NSMutableArray，由此可见实际上有两个抽象基类，一个用于不可变数组，另一个用于可变数组。\n抽象基类：为了给子类继承实现具体的功能，它是”残缺的类“，里面没有抽象方法的具体代码，里面的抽象方法是被子类重写的。\n在 Employee 这个例子中，若是没有“工厂方法”的源代码，就无法向其中新增雇员类别。然而对于 Cocoa 中 NSArray 这样的类族来说，还是有办法新增子类的， 但需要遵守几条规则：\n\n子类应该继承自类族的抽象基类。若要编写 NSArray 类族的子类，则需令其继承自不可变的数组和基类或可变数组的基类。\n\n子类应该定义自己的数据存储方式。NSArray 本身只不过是包在其他隐藏对象外卖的壳，它仅仅定义了所有数组都需具备的一些接口。对于这个自定义的数组子类来说，可以用 NSArray 来保存其实例。\n\n子类应当覆写超类文档中指明需要覆写的方法。在每个抽象基类中，都有一些子类必须覆写的方法。比如说，想要编写 NSArray 的子类，就需要实现 count 及 “objectAtIndex:” 方法。像 lastObject 这种方法则无须实现，因为基类可以根据前两个方法推演它。\n\n\n第10条：在既有类中使用关联对象存放自定义数据要在对象中存放相关信息，我们通常会从对象所属的类中继承一个子类，再改写子类对象。有时候类的实例可能是由某种机制所创建的，这就引入了一个强大的特性——“关联对象”。\n可以给某对象关联许多其他对象，这些对象通过“键”来区分。存储对象值的时候，可以指明“存储策略”，用以维护相应的“内存管理语义”。存储策略由名为 objc_AssociationPolicy 的枚举所定义，下表列出该枚举的取值和与之等效的 @property 属性。\n\n\n\n关联类型\n等效的 @property 属性\n\n\n\nOBJC_ASSOCIATION_ASSIGN\nassign\n\n\nOBJC_ASSOCIATION_RETAIN_NONATOMIC\nnonatomic, retain\n\n\nOBJC_ASSOCIATION_COPY_NONATOMIC\nnonatomic, copy\n\n\nOBJC_ASSOCIATION_RETAIN\nretain\n\n\nOBJC_ASSOCIATION_COPY\ncopy\n\n\n下面的方法可以管理关联对象：\n\nvoid objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)此方法以给定的键和策略为某对象设置关联对象值。\n\nid objc_getAssociatedObject(id object, const void *key)此方法根据给定的键从某对象中获取相应的关联对象值。\n\nvoid objc_removeAssociatedObjects(id object)此方法移除指定对象的全部关联对象。\n\n\n在设置关联对象值时，通常使用静态全局变量做键。\n“关联对象”缺点：常会引入难以查找的bug。\n第11条：理解 objc_msgSend 的作用在对象上调用方法又叫“传递消息”，消息有“名称”（name）或“选择子”（selector），可以接受参数，而且可能还有返回值。传递消息会使用动态绑定机制来决定需要调用的方法。\n给对象发送消息可以这样来写：\n1id returnValue &#x3D; [someObject messageName:parameter];\n\n在本例中，someObject叫做“接受者”（receiver），messageName 叫做“选择子”（selector）。选择子和参数合起来称为“消息”（message）。编译器看到消息后，将其转换为一条标准的C语言函数调用，也是消息传递机制中的核心函数，叫做 objc_msgSend，其“原型”如下：\n1void objc_msgSend(id self, SEL cmd, ...)\n\n这是个“参数个数可变的函数”，能接受两个及以上的参数。第一个参数代表接受者，第二个参数代表选择子（SEL 是选择子的类型），后续参数就是消息中的参数，其顺序不变。编译器会把刚才那个例子中的消息转换为如下函数：\n123id returnValue &#x3D; objc_msgSend(someObject,                              @selector(messageName:),                              parameter);\n\nobjc_msgSend 函数会依据接受者与选择子的类型来调用适当的方法。为了完成此操作，该方法需要在接受者所属的类中搜寻其“方法列表”，如果能找到与选择子名称相符的方法，就跳至其实现代码。若是找不到，就沿着继承体系继续向上查找，找到合适的方法再跳转。如果最终还是找不到相符的方法，就执行“消息转发”操作。\n还有一些特殊情况的函数：\n\nobjc_msgSend_stret：待发送的消息要返回结构体\n\nobjc_msgSend_fpret：消息返回的是浮点数\n\nobjc_msgSendSuper：要给超类发信息，例如 [super message:parameter];\n\n\n第12条：理解消息转发机制编译器无法确定某类型对象到底能解读多少种选择子，因为运行期还可向其中动态新增。\n当对象收到无法解读的消息后，就会启动“消息转发”机制。消息转发流程：\n\n通过运行期的动态方法解析功能，我们可以在需要用到某个方法时再将其加入类中。\n对象可以把其无法解读的某些选择子转交给其他对象来处理。\n经过上述两步之后，如果还是没有办法处理选择子，那就启动完整的消息转发机制。\n\n动态方法解析\n对象在收到无法解读的消息后，首先将调用其所属类的这个类方法：\n1234&#x2F;&#x2F; 表示这个类是否能新增一个实例方法用以处理选择子+ (BOOL)resolveInstanceMethod:(SEL)selector&#x2F;&#x2F; 表示这个类是否能新增一个类方法用以处理选择子+ (BOOL)resolveClassMethod:(SEL)selector\n\n使用此方法的前提：相关方法的实现代码已经写好，只等着运行的时候动态插在类里面。此方案常用来实现@dynamic属性。\n备援接受者\n当前接受者还有第二次处理未知选择子的机会。这一步中，运行期系统会问：能否将这条消息转给其他接受者处理，对应方法：\n1- (id)forwardingTargetForSelector:(SEL)selector\n\n若当前接受者能找到备援对象，则将其返回，若找不到，就返回nil。\n注意：我们无法操作经由这一步所转发的消息，若想在发送给备援接受者之前先修改消息内容，得通过完整的消息转发机制。\n完整的消息转发\n首先创建 NSInvocation 对象，把与尚未处理的那条消息有关的全部细节（包括选择子、目标及参数）都封于其中。在触发 NSInvocation 对象时，“消息派发系统”将亲自出马，把消息指派给目标对象。此步骤会调用：\n1- (void)forwardInvocation:(NSInvocation)\n\n实现此方法时，若发现某调用操作不应由本类处理，则需调用超类的同名方法，直至 NSObject。如果调用了 NSObject 类，那么该方法还会继而调用“doesNotRecognizeSelector:”以抛出异常，此异常表明选择子最终未能得到处理。\n消息转发全流程\n\n第13条：用“方法调配技术”调试“黑盒方法”在运行期，可以向类中新增或替换选择子所对应的方法实现。\n使用另一份实现来替换原有的方法实现，这道工序叫“方法调配”，开发者常用此技术向原有实现中添加新功能。\n类的方法列表会把选择子的名称映射到相关的方法实现之上，使得“动态消息派发系统”能够根据此找到应该调用的方法。这些方法均以函数指针的形式来表示，这种指针叫做IMP，其原型如下：\n1id (*IMP)(id, SEL,...)\n\n以互换NSString大小写的两个方法为例：\n123Method originalMethod &#x3D; class_getInstanceMethod([NSString class], @selector(lowercaseString));Method swappedMethod &#x3D; class_getInstanceMethod([NSString class], @selector(uppercaseString));method_exchangeImplementations(originalMethod, swappedMethod)\n\n一般来说，只有调试程序的时候才需要在运行期修改方法实现，这种做法不宜滥用，否则会令代码变得不易读懂且难以维护。\n第14条：理解”类对象”的用意对象类型并非在编译器就绑定好了，而是在运行期查找。有个特殊的类型叫做 id，它能指代任意的 Objective-C 对象类型。\n“在运行期检视对象类型”这一操作也叫做“类型信息查询”（“内省”），这个强大而有用的特性内置于 Foundation 框架的 NSObject 协议里，凡事由公共根类集成而来的对象都要遵从此协议。\nObjective-C 对象的本质是什么？\n每个 Objective-C 对象实例都是指向某块内存数据的指针。\n1NSString *pointerVariable &#x3D; @&quot;Some string&quot;;\n\n对于通用的对象类型 id，由于其本身已经是指针了，所以可以这样写：\n1id genericTypeString &#x3D; @&quot;Some string&quot;;\n\n假设有个名为 SomeClass 的子类从 NSObject 中继承而来，则其继承体系如下图所示：\n\nsuper_class 指针确立了继承关系，而 isa 指针描述实例所属的类。\n如果对象类型无法在编译器确定，那么就应该使用类型信息查询方法来探知。“isMemberOfClass:”能够判断出对象是否为某个特定类的实例，而“isKindOfClass:” 则能够判断出对象是否为某类或其派生类的实例，例如：\n12345NSMutableDictionary *dict &#x3D; [NSMutableDictionary new];[dict isMemberOfClass:[NSDictionary class]]; &#x2F;&#x2F;&#x2F; &lt;NO[dict isMemberOfClass:[NSMutableDictionary class]]; &#x2F;&#x2F;&#x2F; &lt;YES[dict isKindOfClass:[NSDictionary class]]; &#x2F;&#x2F;&#x2F; &lt;YES[dict isKindOfClass:[NSArray class]]; &#x2F;&#x2F;&#x2F; &lt;NO\n\n尽量使用类型信息查询方法来确定对象类型，而不要直接比较类对象，因为某些对象可能实现了消息转发功能。\n\n参考资料：《Effective Objective-C 2.0》编写高质量iOS与OS X代码的52个有效方法\n","plink":"https://blog.fiteen.top/2016/eoc2.0-2/"},{"title":"《Effective Objective-C 2.0》整理（一）：熟悉Objective-C","date":"2016-08-25T14:55:33.000Z","date_formatted":{"ll":"Aug 25, 2016","L":"08/25/2016","MM-DD":"08-25"},"updated":"2019-12-05T03:30:02.970Z","content":"第1条：了解 Objective-C 语言的起源Objective-C 由消息型语言的鼻祖 Smalltalk 演化而来，是一门面向对象的语言，具有封装、继承、多态的特性。它还包括三大动态特性：\n\n动态类型：id 类型，静态类型是弱类型，动态类型是强类型\n动态绑定：基于动态类型，一旦类型被确定，对象对应的属性和相应消息都被确定\n动态加载：按需加载，例如不同机型适配，加载图片（1x/2x/3x），按需加载可执行代码，而非所有组件\n\n\n\n\n\n\n语言类型\n运行时执行的代码由谁决定\n举例\n\n\n\n消息结构\n运行环境\nObjective-C\n\n\n函数调用\n编译器\nC++\n\n\n因此，Objective-C 使用动态绑定的消息结构，在运行时才会检查对象类型。接受一条消息后，究竟执行何种代码，由运行期环境而非编译器决定。\nObjective-C 的重要工作都由“运行期组件”（ runtime component ）完成，它面向对象所需的全部数据结构及函数特性都在运行期组件里。运行器组件本质上就是一种与开发者所编代码相链接的“动态库”，其代码能把开发者编写的所有程序粘连起来。\nObjective-C 是 C 的超集，因此 C 的所有功能在Objective-C代码中依然适用。理解 C 中的内存模型（ memory model ）有助于理解 Objective-C 的内存模型和“引用计数”（ reference counting ）机制的工作原理。\nObjective-C 语言中的指针是用来指示对象的，对象所占内存总是分配在“堆空间”中，而不会分配在栈上。分配在堆上的内存必须直接管理，而分配在栈上用于保存变量的内存则会在其栈帧弹出时清理。\n第2条：在类的头文件中尽量少引入其他头文件在类的头文件中声明其他类有以下两种选择：\n121 - #import &quot;类名.h&quot; &#x2F;&#x2F; 需要知道该类的全部细节2 - @class 类名; &#x2F;&#x2F; 向前声明，不需要知道该类全部细节，能解决了两个类循环引用的问题\n除非却有必要，否则不要引入头文件。一般，在头文件中向前声明某类，并在实现文件引入某类头文件，这样做可以降低类之间的耦合，以减少编译时间。\n以下情况必须在头文件中引入其他头文件：\n\n如果类继承自某个父类，必须引入定义那个父类的头文件；\n声明的类遵循某个协议，该协议必须有完整定义，且不能使用向前声明。因此最好把协议单独放在一个头文件中。\n\n针对一些委托协议，建议在实现文件中引入头文件，在“ class-continue 分类”中遵循协议。\n第3条：多用字面语法，少用与之等价的方法字面量语法采用类C的定义方式，可以缩减源代码长度，易读性强。\n常规做法：Number *someNumber = [NSNumber numberWithInt:1]; =&gt; 字面量语法：Number * someNumber = @1;\n** 字面数值 **\n1234Number *intNumber &#x3D; @1;Number *floatNumber &#x3D; @2.5f;Number *doubleNumber &#x3D; @3.14159;Number *charNumber &#x3D; @&#39;a&#39;;\n** 字面量数组 **\n 1234567&#x2F;&#x2F; 常规做法NSArray *animals &#x3D; [NSArray arrayWithObjects:@&quot;cat&quot;,@&quot;dog&quot;,@&quot;mouse&quot;,nil]; &#x2F;&#x2F; 发现空值nil创建结束NSString *dog &#x3D; [animals objectAtIndex:1];&#x2F;&#x2F; 字面量语法（更安全，出现nil对象，编译器时就会发现异常）NSArray *animals &#x3D; @[@&quot;cat&quot;,@&quot;dog&quot;,@&quot;mouse&quot;]; &#x2F;&#x2F; 发现空值nil会抛出异常NSString *dog &#x3D; animals[1];\n** 字面量字典 **\n 1234567&#x2F;&#x2F; 常规做法NSDictionary *personData &#x3D; [NSDictionary dictionaryWithObjectsAndKeys:@&quot;Matt&quot;,@&quot;firstName&quot;,[NSNumber numberWithInt:28],@&quot;age&quot;,nil];NSString *firstName &#x3D; [personData objectForKey:@&quot;firstName&quot;];&#x2F;&#x2F; 字面量语法NSDictionary *personData &#x3D; @&#123;@&quot;firstName&quot; : @&quot;Matt&quot;, @&quot;age&quot; : @28&#125;;NSString *firstName &#x3D; personData[@&quot;firstName&quot;];\n** 可变数组与字典 **\n1234567&#x2F;&#x2F; 常规做法[mutableArray replaceObjectAtIndex:1 withObject:@&quot;dog&quot;];[mutableDictionary setObject:@&quot;Matt&quot; forKey:@&quot;firstName&quot;];&#x2F;&#x2F; 字面量语法mutableArray[1] &#x3D; @&quot;dog&quot;;mutableDictionary[@&quot;firstName&quot;] &#x3D; @&quot;Matt&quot;;\n\n注意：用字面量语法创建数组或字典时，务必确保值中不含nil。\n第4条：多用类型常量，少用 #define 预处理指令定义常量时，尽量不要使用 #define 预处理指令，由于没有声明明确的类型信息，会将相同名字的常量值批量替换。取而代之的，采用static const 类型 常量名 = 常量值的形式。\n派发通知时，需要使用字符串来表示此项通知的名称，而这个名字就可以声明为一个外界可见的常值变量。此类常值变量需放在“全局符号表”中，以便在定义的编译单元之外使用，定义方式如下：\n12345&#x2F;&#x2F; In the header fileextern NSString *const EOCStringConstant; &#x2F;&#x2F; 注意const修饰符在常量类型中的位置&#x2F;&#x2F; In the implementation fileNSString *const EOCStringConstant &#x3D; @&quot;VALUE&quot;; &#x2F;&#x2F; 解读：一个常量，而这个常量是指针，指向NSString对象\nextern这个关键字就是告诉编译器无须查看常量的定义，直接允许使用。其他类型的常量也是如此：\n123456&#x2F;&#x2F; 在头文件 EOCAnimatedView.h 中使用extern来声明全局常量&#x2F;&#x2F; 这种常量要出现在全局符号表中，所以其名称通常以与之相关的类名做前缀extern const NSTimeInterval EOCAnimationDuration;&#x2F;&#x2F; 在实现文件 EOCAnimatedView.m 中定义其值const NSTimeInterval EOCAnimationDuration &#x3D; 0.3;\n\n第5条：用枚举表示状态、选项、状态码枚举是一种常量命名方式，某个对象所经历的各种状态可定义为一个简单的枚举集。定义方式如下：\n12345678910111213141516171819&#x2F;&#x2F; 方式一：enum EOCConnectionState &#123;    &#x2F;&#x2F; 编译器会为枚举分配一个独有的编号，从0开始，每个枚举递增1    EOCConnectionStateDisconnected, &#x2F;&#x2F; 0    EOCConnectionStateConnecting, &#x2F;&#x2F; 1    EOCConnectionStateConnected, &#x2F;&#x2F; 2&#125;;enum EOCConnectionState state &#x3D; EOCConnectionStateConnected;&#x2F;&#x2F; 方式二：enum EOCConnectionState &#123;    EOCConnectionStateDisconnected &#x3D; 1, &#x2F;&#x2F; 1    EOCConnectionStateConnecting, &#x2F;&#x2F; 2    EOCConnectionStateConnected, &#x2F;&#x2F; 3&#125;;typedef enum EOCConnectionState EOCConnectionState;EOCConnectionState state &#x3D; EOCConnectionStateConnected;\n\n如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，就将各选项值定义为2的幂，以便通过安位或操作将其组合。\n123456789typedef enum EOCPermittedDirection : int EOCPermittedDirection;enum EOCPermittedDirection : int &#123;    EOCPermittedDirectionUp    &#x3D; 1 &lt;&lt; 0,    EOCPermittedDirectionDown  &#x3D; 1 &lt;&lt; 1,    EOCPermittedDirectionLeft  &#x3D; 1 &lt;&lt; 2,    EOCPermittedDirectionRight &#x3D; 1 &lt;&lt; 3,&#125;;EOCPermittedDirection *permittedDirections &#x3D; EOCPermittedDirectionLeft | EOCPermittedDirectionUp;\n\n用 NS_ENUM（不需要互相组合） 与 NS_OPTIONS（需要安位或组合） 宏来定义枚举类型，并指明其底层数据类型，这样做可以确保枚举是开发者所选的底层数据类型实现出来的。\n在处理枚举类型的switch语句中不要实现default分支。因为这样相当于加入了一种新的枚举类型。\n\n参考资料：《Effective Objective-C 2.0》编写高质量iOS与OS X代码的52个有效方法\n","plink":"https://blog.fiteen.top/2016/eoc2.0-1/"},{"title":"Hello World","date":"2016-08-12T16:00:00.000Z","date_formatted":{"ll":"Aug 13, 2016","L":"08/13/2016","MM-DD":"08-13"},"updated":"2020-01-13T08:40:04.861Z","content":"标题是 Hexo 默认生成的，却没来由得契合。『Hello，World』——计算机发展史上的里程碑式的一笔，每一门编程语言的入门示例，Brian Kernighan 在《C 程序设计语言》中第一次引用的 Hello World 程序，源自他1973年编写的一部讲授B语言的编程教程：\n\n\n12345678main() &#123;extrn a,b,c;putchar(a); putchar(b); putchar(c); putchar('!*n');&#125;a 'hell';b 'o, w';c 'orld';\n\n『Hello，World』，总令我想起那高亢的一句：“这世界我来了 任凭风暴漩涡”。临世，是随机事件，可人们无法计算概率，只晓得0 | 1、false | true、fail | success。巅峰时簇拥欢呼，落寞时笑骂离开，艰难困苦大都无人问津。矛盾是事物发展的源泉和动力，这世界温情又冷漠，有人清醒有人混沌，七亿网民被快餐文化蚕食着，或又被欲望鲸吞。\n最近发生了一些事，或许吵吵嚷嚷的人其实最不舍，说出来的是情绪，分别却需要勇气。也许我也该学着接受一些人的处世手段和方式。果然戏剧来源于生活不假，毕竟这是一个弱肉强食的社会，我们都是因为互补的需要相遇，我无法理解的状态在旁人看来却只是简单的各取所需。\n尽管我不是一个偏执的人，却也有小任性，也许若干年的自己想如今只剩一句“你还是太年轻！”，可是啊，哪怕这不是一个合适的时机，人总有追求更多拥有真善美的权利吧。愿你出走半生，归来仍是少年。这样初心不改的期盼到底会不会在岁月的洪流中被侵蚀，未来谁又说得好呢？\n最近在社交平台上删除了许多青春时期敏感晦涩的字句，小女孩啊，总有那么多悲春伤秋，我还是没有足够强大去面对曾经的自己，仿佛记忆会随着删除按钮的点击一同清空。文字很奇妙，它比滔滔不绝的喜悦或怨气要安宁些，四通八达的网络，不知道会让哪个陌生的你与我在此遇见，但祝愿我们都爱世人，察世事，做不到兼济天下，也要先独善其身。\n","thumbnail":"2016/hello-world/hello-world.png","plink":"https://blog.fiteen.top/2016/hello-world/"},{"title":"0001. Two Sum","date":"2020-01-14T15:46:07.980Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:27:56.599Z","content":"English ｜ 简体中文\nQGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\nBecause nums[0] + nums[1] = 2 + 7 = 9,return [0, 1].\n\nA12345678910111213class Solution &#123;    func twoSum(_ nums: [Int], _ target: Int) -&gt; [Int] &#123;        var dic = [Int: Int]()        for (i, n) in nums.enumerated() &#123;            let complement = target - n             if dic.keys.contains(complement) &amp;&amp; i != dic[complement] &#123;                return [dic[complement]!, i]            &#125;            dic[n] = i        &#125;        return [];    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0001-en/"},{"title":"0001.两数之和","date":"2020-01-14T15:46:10.449Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:27:19.962Z","content":"English｜ 简体中文\n题目描述给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n示例：\n\n给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]\n\n题解12345678910111213class Solution &#123;    func twoSum(_ nums: [Int], _ target: Int) -&gt; [Int] &#123;        var dic = [Int: Int]()        for (i, n) in nums.enumerated() &#123;            let complement = target - n             if dic.keys.contains(complement) &amp;&amp; i != dic[complement] &#123;                return [dic[complement]!, i]            &#125;            dic[n] = i        &#125;        return [];    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0001/"},{"title":"0002. Add Two Numbers","date":"2020-01-14T15:58:31.861Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:58:31.861Z","content":"English ｜ 简体中文\nQYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample:\n\nInput: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)Output: 7 -&gt; 0 -&gt; 8Explanation: 342 + 465 = 807.\n\nA123456789101112131415161718192021222324252627282930313233/** * Definition for singly-linked list. * public class ListNode &#123; *     public var val: Int *     public var next: ListNode? *     public init(_ val: Int) &#123; *         self.val = val *         self.next = nil *     &#125; * &#125; */class Solution &#123;    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -&gt; ListNode? &#123;        var p1 = l1, p2 = l2, node : ListNode?, pointer : ListNode?        var flag = 0        while p1 != nil || p2 != nil || flag == 1  &#123;            let t1 : Int =  p1?.val ?? 0            let t2 : Int =  p2?.val ?? 0            let sum = flag + t1 + t2            if node == nil &#123;                node = ListNode(sum % 10);            &#125; else &#123;                node?.next = ListNode(sum % 10)                node = node?.next            &#125;            pointer = pointer ?? node            p1 = p1?.next            p2 = p2?.next            flag = sum / 10        &#125;        return pointer    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0002-en/"},{"title":"0002. 两数相加","date":"2020-01-14T15:58:28.971Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:58:28.971Z","content":"English｜ 简体中文\n题目描述给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n示例：\n\n输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807\n\n题解123456789101112131415161718192021222324252627282930313233/** * Definition for singly-linked list. * public class ListNode &#123; *     public var val: Int *     public var next: ListNode? *     public init(_ val: Int) &#123; *         self.val = val *         self.next = nil *     &#125; * &#125; */class Solution &#123;    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -&gt; ListNode? &#123;        var p1 = l1, p2 = l2, node : ListNode?, pointer : ListNode?        var flag = 0        while p1 != nil || p2 != nil || flag == 1  &#123;            let t1 : Int =  p1?.val ?? 0            let t2 : Int =  p2?.val ?? 0            let sum = flag + t1 + t2            if node == nil &#123;                node = ListNode(sum % 10);            &#125; else &#123;                node?.next = ListNode(sum % 10)                node = node?.next            &#125;            pointer = pointer ?? node            p1 = p1?.next            p2 = p2?.next            flag = sum / 10        &#125;        return pointer    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0002/"},{"title":"0003. 无重复字符的最长字串","date":"2020-01-14T15:58:41.480Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:58:41.480Z","content":"English｜ 简体中文\n题目描述给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n示例 1：\n\n输入：“abcabcbb”输出：3解释：因为无重复字符的最长子串是 “abc”，所以其长度为 3。\n\n示例 2：\n\n输入：“bbbbb”输出：1解释：因为无重复字符的最长子串是 “b”，所以其长度为 1。\n\n示例 3：\n\n输入：“pwwkew”输出：3解释：因为无重复字符的最长子串是 “wke”，所以其长度为 3。          请注意，你的答案必须是 子串 的长度，”pwke” 是一个 子序列，不是子串。\n\n题解123456789101112131415class Solution &#123;    func lengthOfLongestSubstring(_ s: String) -&gt; Int &#123;        var chars = [Character: Int]()        var length : Int = 0        var i : Int = 0        for (j, ch) in s.enumerated() &#123;            if let head = chars[ch] &#123;                i = max(head + 1, i)            &#125;            chars[ch] = j            length = max(j - i + 1, length)        &#125;        return length    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0003/"},{"title":"0003. Longest Substring Without Repeating Characters","date":"2020-01-14T16:57:54.915Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:57:54.915Z","content":"English ｜ 简体中文\nQGiven a string, find the length of the longest substring without repeating characters.\nExample 1:\n\nInput: “abcabcbb”Output: 3Explanation: The answer is “abc”, with the length of 3. \n\nExample 2:\n\nInput: “bbbbb”Output: 1Explanation: The answer is “b”, with the length of 1.\n\nExample 3:\n\nInput: “pwwkew”Output: 3Explanation: The answer is “wke”, with the length of 3.            Note that the answer must be a substring, “pwke” is a subsequence and not a substring.\n\nA123456789101112131415class Solution &#123;    func lengthOfLongestSubstring(_ s: String) -&gt; Int &#123;        var chars = [Character: Int]()        var length : Int = 0        var i : Int = 0        for (j, ch) in s.enumerated() &#123;            if let head = chars[ch] &#123;                i = max(head + 1, i)            &#125;            chars[ch] = j            length = max(j - i + 1, length)        &#125;        return length    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0003-en/"},{"title":"0004. Median of Two Sorted Arrays","date":"2020-01-14T15:58:46.007Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:58:46.007Z","content":"English ｜ 简体中文\nQThere are two sorted arrays nums1 and nums2 of size m and n respectively.\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\nYou may assume nums1 and nums2 cannot be both empty.\nExample 1:\n\nnums1 = [1, 3]nums2 = [2]\nThe median is 2.0\n\nExample 2:\n\nnums1 = [1, 2]nums2 = [3, 4]\nThe median is (2 + 3)/2 = 2.5\n\nA12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Solution &#123;    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -&gt; Double &#123;        var m : Int = nums1.count, n : Int = nums2.count        var A : [Int] = nums1, B : [Int] = nums2        if m &gt; n &#123;            let temp : [Int] = A            A = B            B = temp            let t : Int = m            m = n            n = t        &#125;        let halfLength : Int = (m + n + 1) / 2        var iMin : Int = 0, iMax : Int = m        while iMin &lt;= iMax &#123;            let i : Int = (iMin + iMax) / 2            let j = halfLength - i            if i &lt; iMax &amp;&amp; A[i] &lt; B[j - 1] &#123;                iMin = i + 1            &#125; else if i &gt; iMin &amp;&amp; B[j] &lt; A[i - 1] &#123;                iMax = i - 1            &#125; else &#123;                var leftMax : Int, rightMin : Int                if i == 0 &#123;                    leftMax = B[j - 1]                &#125; else if j == 0 &#123;                    leftMax = A[i - 1]                &#125; else &#123;                    leftMax = max(A[i - 1], B[j - 1])                &#125;                if (m + n) % 2 == 1 &#123;                    return Double(leftMax)                &#125;                if (i == m) &#123;                    rightMin = B[j]                &#125; else if (j == n) &#123;                    rightMin = A[i]                &#125; else &#123;                    rightMin = min(A[i], B[j])                &#125;                return Double(leftMax + rightMin) / 2            &#125;        &#125;        return 0.0    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0004-en/"},{"title":"0004. 寻找两个有序数组的中位数","date":"2020-01-14T15:58:50.234Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:58:50.234Z","content":"English｜ 简体中文\n题目描述给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。\n请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。\n你可以假设 nums1 和 nums2 不会同时为空。\n示例 1：\n\nnums1 = [1, 3]nums2 = [2]\n则中位数是 2.0\n\n示例 2：\n\nnums1 = [1, 2]nums2 = [3, 4]\n则中位数是 (2 + 3)/2 = 2.5\n\n题解12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Solution &#123;    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -&gt; Double &#123;        var m : Int = nums1.count, n : Int = nums2.count        var A : [Int] = nums1, B : [Int] = nums2        if m &gt; n &#123;            let temp : [Int] = A            A = B            B = temp            let t : Int = m            m = n            n = t        &#125;        let halfLength : Int = (m + n + 1) / 2        var iMin : Int = 0, iMax : Int = m        while iMin &lt;= iMax &#123;            let i : Int = (iMin + iMax) / 2            let j = halfLength - i            if i &lt; iMax &amp;&amp; A[i] &lt; B[j - 1] &#123;                iMin = i + 1            &#125; else if i &gt; iMin &amp;&amp; B[j] &lt; A[i - 1] &#123;                iMax = i - 1            &#125; else &#123;                var leftMax : Int, rightMin : Int                if i == 0 &#123;                    leftMax = B[j - 1]                &#125; else if j == 0 &#123;                    leftMax = A[i - 1]                &#125; else &#123;                    leftMax = max(A[i - 1], B[j - 1])                &#125;                if (m + n) % 2 == 1 &#123;                    return Double(leftMax)                &#125;                if (i == m) &#123;                    rightMin = B[j]                &#125; else if (j == n) &#123;                    rightMin = A[i]                &#125; else &#123;                    rightMin = min(A[i], B[j])                &#125;                return Double(leftMax + rightMin) / 2            &#125;        &#125;        return 0.0    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0004/"},{"title":"0005. Longest Palindromic Substring","date":"2020-01-14T15:58:54.131Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:58:54.131Z","content":"English ｜ 简体中文\nQGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\nExample 1:\n\nInput: “babad”Output: “bab”Note: “aba” is also a valid answer.\n\nExample 2:\n\nInput: “cbbd”Output: “bb”\n\nA12345678910111213141516171819202122232425262728293031323334class Solution &#123;    func longestPalindrome(_ s: String) -&gt; String &#123;        if s.count == 0 &#123;            return \"\"        &#125;        var S = [Character]()        for c in s &#123;            S.append(c)        &#125;        var startIndex : Int = 0, endIndex : Int = 0        for (i, _) in s.enumerated()  &#123;            let addLen = expandCenter(S, i, i)            let evenLen = expandCenter(S, i, i + 1)            let len = max(addLen, evenLen)            if len &gt; endIndex - startIndex &#123;                startIndex = i - (len - 1) / 2                endIndex = i + len / 2            &#125;        &#125;        let leftIndex = s.index(s.startIndex, offsetBy: startIndex)        let rightIndex = s.index(s.startIndex, offsetBy: endIndex + 1)        let sub = s[leftIndex..&lt;rightIndex]        return String(sub)    &#125;        func expandCenter(_ s: [Character], _ left: Int, _ right: Int) -&gt; Int &#123;        var L : Int = left, R : Int = right        while  L &gt;= 0 &amp;&amp; R &lt; s.count &amp;&amp; s[L] == s[R] &#123;            L -= 1            R += 1        &#125;        return R - L - 1    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0005-en/"},{"title":"0005. 最长回文子串","date":"2020-01-14T15:58:58.249Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:58:58.249Z","content":"English｜ 简体中文\n题目描述给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。\n示例 1：\n\n输入：“babad”输出：“bab”注意：“aba” 也是一个有效答案。\n\n示例 2：\n\n输入：“cbbd”输出：“bb”\n\n题解12345678910111213141516171819202122232425262728293031323334class Solution &#123;    func longestPalindrome(_ s: String) -&gt; String &#123;        if s.count == 0 &#123;            return \"\"        &#125;        var S = [Character]()        for c in s &#123;            S.append(c)        &#125;        var startIndex : Int = 0, endIndex : Int = 0        for (i, _) in s.enumerated()  &#123;            let addLen = expandCenter(S, i, i)            let evenLen = expandCenter(S, i, i + 1)            let len = max(addLen, evenLen)            if len &gt; endIndex - startIndex &#123;                startIndex = i - (len - 1) / 2                endIndex = i + len / 2            &#125;        &#125;        let leftIndex = s.index(s.startIndex, offsetBy: startIndex)        let rightIndex = s.index(s.startIndex, offsetBy: endIndex + 1)        let sub = s[leftIndex..&lt;rightIndex]        return String(sub)    &#125;        func expandCenter(_ s: [Character], _ left: Int, _ right: Int) -&gt; Int &#123;        var L : Int = left, R : Int = right        while  L &gt;= 0 &amp;&amp; R &lt; s.count &amp;&amp; s[L] == s[R] &#123;            L -= 1            R += 1        &#125;        return R - L - 1    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0005/"},{"title":"0006. ZigZag Conversion","date":"2020-01-14T15:59:06.786Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:59:06.786Z","content":"English ｜ 简体中文\nQThe string &quot;PAYPALISHIRING&quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n123P   A   H   NA P L S I I GY   I   R\nAnd then read line by line: &quot;PAHNAPLSIIGYIR&quot;\nWrite the code that will take a string and make this conversion given a number of rows:\n1string convert(string s, int numRows);\n\nExample 1:\n12Input: s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 3Output: &quot;PAHNAPLSIIGYIR&quot;\n\nExample 2:\n12345678Input: s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 4Output: &quot;PINALSIGYAHRPI&quot;Explanation:P     I    NA   L S  I GY A   H RP     I\n\n\nA1234567891011121314151617181920class Solution &#123;    func convert(_ s: String, _ numRows: Int) -&gt; String &#123;        if numRows == 1 &#123;            return s        &#125;        let zCount = 2 * numRows - 2        var list : Dictionary = [Int:String]()        for (i, c) in s.enumerated() &#123;            let index = i % zCount &gt;= numRows ? zCount - i % zCount : i % zCount            var rowContent : String = list[index] ?? \"\"            rowContent.append(c)            list[index] = rowContent        &#125;        var newS : String = \"\"        for i in 0...list.count &#123;            newS += list[i] ?? \"\"        &#125;        return newS    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0006-en/"},{"title":"0006. Z 字形变换","date":"2020-01-14T17:14:28.939Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:14:28.939Z","content":"English｜ 简体中文\n题目描述将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n比如输入字符串为 &quot;LEETCODEISHIRING&quot; 行数为 3 时，排列如下：\n123L   C   I   RE T O E S I I GE   D   H   N\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&quot;LCIRETOESIIGEDHN&quot;。\n请你实现这个将字符串进行指定行数变换的函数：\n1string convert(string s, int numRows);\n\n示例 1：\n12输入：s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 3输出：&quot;LCIRETOESIIGEDHN&quot;\n\n示例 2：\n12345678输入：s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 4输出：&quot;LDREOEIIECIHNTSG&quot;解释：L     D     RE   O E   I IE C   I H   NT     S     G\n\n\n\n题解1234567891011121314151617181920class Solution &#123;    func convert(_ s: String, _ numRows: Int) -&gt; String &#123;        if numRows == 1 &#123;            return s        &#125;        let zCount = 2 * numRows - 2        var list : Dictionary = [Int:String]()        for (i, c) in s.enumerated() &#123;            let index = i % zCount &gt;= numRows ? zCount - i % zCount : i % zCount            var rowContent : String = list[index] ?? \"\"            rowContent.append(c)            list[index] = rowContent        &#125;        var newS : String = \"\"        for i in 0...list.count &#123;            newS += list[i] ?? \"\"        &#125;        return newS    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0006/"},{"title":"0007. Reverse Integer","date":"2020-01-14T16:07:22.741Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:07:22.741Z","content":"English ｜ 简体中文\nQGiven a 32-bit signed integer, reverse digits of an integer.\nExample 1:\n\nInput: 123Output: 321\n\nExample 2:\n\nInput: -123Output: -321\n\nExample 3:\n\nInput: 120Output: 21\n\nNote:\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\nA1234567891011121314151617class Solution &#123;    func reverse(_ x: Int) -&gt; Int &#123;        var n = 0, y = x        while y != 0 &#123;            let pop = y % 10            y /= 10            if n &gt; INT32_MAX / 10 || (n == INT32_MAX / 10 &amp;&amp; pop &gt; 7) &#123;                return 0            &#125;            if n &lt; (-INT32_MAX - 1) / 10 || (n == (-INT32_MAX - 1) / 10 &amp;&amp; pop &lt; -8) &#123;                return 0            &#125;            n = 10 * n + pop        &#125;        return n    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0007-en/"},{"title":"0007. 整数反转","date":"2020-01-14T16:06:22.342Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:06:22.342Z","content":"English｜ 简体中文\n题目描述给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n示例 1：\n\n输入：123输出：321\n\n示例 2：\n\n输入：-123输出： -321\n\n示例 3：\n\n输入：120输出：21\n\n注意:\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n题解1234567891011121314151617class Solution &#123;    func reverse(_ x: Int) -&gt; Int &#123;        var n = 0, y = x        while y != 0 &#123;            let pop = y % 10            y /= 10            if n &gt; INT32_MAX / 10 || (n == INT32_MAX / 10 &amp;&amp; pop &gt; 7) &#123;                return 0            &#125;            if n &lt; (-INT32_MAX - 1) / 10 || (n == (-INT32_MAX - 1) / 10 &amp;&amp; pop &lt; -8) &#123;                return 0            &#125;            n = 10 * n + pop        &#125;        return n    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0007/"},{"title":"0008. String to Integer (atoi)","date":"2020-01-14T16:07:35.602Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:07:35.602Z","content":"English ｜ 简体中文\nQImplement atoi which converts a string to an integer.\nThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\nThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\nIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\nIf no valid conversion could be performed, a zero value is returned.\nNote:\n\nOnly the space character ‘ ‘ is considered as whitespace character.\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. If the numerical value is out of the range of representable values, INT_MAX (2^31 − 1) or INT_MIN (−2^31) is returned.\n\nExample 1:\n\nInput: “42”Output: 42\n\nExample 2:\n\nInput: “   -42”Output: -42Explanation: The first non-whitespace character is ‘-‘, which is the minus sign.            Then take as many numerical digits as possible, which gets 42.\n\nExample 3:\n\nInput: “4193 with words”Output: 4193Explanation: Conversion stops at digit ‘3’ as the next character is not a numerical digit.\n\nExample 4:\n\nInput: “words and 987”Output: 0Explanation: The first non-whitespace character is ‘w’, which is not a numerical            digit or a +/- sign. Therefore no valid conversion could be performed.\n\nExample 5:\n\nInput: “-91283472332”Output: -2147483648Explanation: The number “-91283472332” is out of the range of a 32-bit signed integer.            Thefore INT_MIN (−2^31) is returned.\n\nA123456789101112131415161718192021222324252627282930313233class Solution &#123;    func myAtoi(_ str: String) -&gt; Int &#123;        var sign : Int = 0        var iStr : String = \"\"        var realFirst = 0        for (i, c) in str.enumerated() &#123;            if c == \" \" &amp;&amp; sign == 0 &#123;                realFirst = i + 1                continue            &#125;            if i == realFirst &#123;                if c == \"+\" || c == \"-\" &#123;                    sign = c == \"-\" ? -1 : 1                &#125; else if c &gt;= \"0\" &amp;&amp; c &lt;= \"9\" &#123;                    sign = 1                    iStr.append(c)                &#125; else &#123;                    return 0                &#125;            &#125; else &#123;                if c &gt;= \"0\" &amp;&amp; c &lt;= \"9\" &#123;                    if iStr.count &gt;= 9 &amp;&amp; (Int(iStr)! &gt; Int(INT32_MAX) / 10 || (Int(iStr)! == Int(INT32_MAX) / 10 &amp;&amp; (sign &gt; 0 ? c &gt; \"7\" : c &gt; \"8\"))) &#123;                        return sign &gt; 0 ? Int(INT32_MAX) : -Int(INT32_MAX) - 1                    &#125;                    iStr.append(c)                &#125; else &#123;                    break                &#125;            &#125;        &#125;        return sign * (Int(iStr) ?? 0)    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0008-en/"},{"title":"0008. 字符串转换整数（atoi）","date":"2020-01-14T16:06:30.044Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:06:30.044Z","content":"English｜ 简体中文\n题目描述请你来实现一个 atoi 函数，使其能将字符串转换成整数。\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。\n当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。\n该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。\n在任何情况下，若函数不能进行有效的转换时，请返回 0。\n说明：\n假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31,  2^31 − 1]。如果数值超过这个范围，请返回  INT_MAX (2^31 − 1) 或 INT_MIN (−2^31) 。\n示例 1：\n\n输入：“42”输出：42\n\n示例 2：\n\n输入：“   -42”输出：-42解释：第一个非空白字符为 ‘-‘, 它是一个负号。           我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n\n示例 3：\n\n输入：“4193 with words”输出：4193解释：转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。\n\n示例 4：\n\n输入：“words and 987”输出：0解释：第一个非空字符是 ‘w’, 但它不是数字或正、负号。    因此无法执行有效的转换。\n\n示例 5：\n\n输入：“-91283472332”输出：-2147483648解释：数字 “-91283472332” 超过 32 位有符号整数范围。    因此返回 INT_MIN (−231) 。\n\nA123456789101112131415161718192021222324252627282930313233class Solution &#123;    func myAtoi(_ str: String) -&gt; Int &#123;        var sign : Int = 0        var iStr : String = \"\"        var realFirst = 0        for (i, c) in str.enumerated() &#123;            if c == \" \" &amp;&amp; sign == 0 &#123;                realFirst = i + 1                continue            &#125;            if i == realFirst &#123;                if c == \"+\" || c == \"-\" &#123;                    sign = c == \"-\" ? -1 : 1                &#125; else if c &gt;= \"0\" &amp;&amp; c &lt;= \"9\" &#123;                    sign = 1                    iStr.append(c)                &#125; else &#123;                    return 0                &#125;            &#125; else &#123;                if c &gt;= \"0\" &amp;&amp; c &lt;= \"9\" &#123;                    if iStr.count &gt;= 9 &amp;&amp; (Int(iStr)! &gt; Int(INT32_MAX) / 10 || (Int(iStr)! == Int(INT32_MAX) / 10 &amp;&amp; (sign &gt; 0 ? c &gt; \"7\" : c &gt; \"8\"))) &#123;                        return sign &gt; 0 ? Int(INT32_MAX) : -Int(INT32_MAX) - 1                    &#125;                    iStr.append(c)                &#125; else &#123;                    break                &#125;            &#125;        &#125;        return sign * (Int(iStr) ?? 0)    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0008/"},{"title":"0009. Palindrome Number","date":"2020-01-14T16:07:41.065Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:07:41.065Z","content":"English ｜ 简体中文\nQDetermine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\nExample 1:\n\nInput: 121Output: true\n\nExample 2:\n\nInput: -121Output: falseExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\nExample 3:\n\nInput: 10Output: falseExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\nFollow up:\nCoud you solve it without converting the integer to a string?\nA12345678910111213class Solution &#123;    func isPalindrome(_ x: Int) -&gt; Bool &#123;        if x &lt; 0 || x != 0 &amp;&amp; x % 10 == 0 &#123;            return false        &#125;        var palindrome = 0, y = x        while palindrome &lt; y &#123;            palindrome = y % 10 + palindrome * 10            y /= 10        &#125;        return y == palindrome || y == palindrome / 10    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0009-en/"},{"title":"0009. 回文数","date":"2020-01-14T16:06:36.951Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:06:36.951Z","content":"English｜ 简体中文\n题目描述判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n示例 1：\n\n输入：121输出：true\n\n示例 2：\n\n输入：-121输出：false解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n\n示例 3：\n\n输入：10输出：false解释：从右向左读, 为 01 。因此它不是一个回文数。\n\n进阶:\n你能不将整数转为字符串来解决这个问题吗？\n题解12345678910111213class Solution &#123;    func isPalindrome(_ x: Int) -&gt; Bool &#123;        if x &lt; 0 || x != 0 &amp;&amp; x % 10 == 0 &#123;            return false        &#125;        var palindrome = 0, y = x        while palindrome &lt; y &#123;            palindrome = y % 10 + palindrome * 10            y /= 10        &#125;        return y == palindrome || y == palindrome / 10    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0009/"},{"title":"0010. Regular Expression Matching","date":"2020-01-14T17:15:48.833Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:15:48.833Z","content":"English ｜ 简体中文\nQGiven an input string (s) and a pattern (p), implement regular expression matching with support for &#39;.&#39; and &#39;*&#39;.\n\n‘.’ Matches any single character.‘*‘ Matches zero or more of the preceding element.The matching should cover the entire input string (not partial).\n\nNote:\n\ns could be empty and contains only lowercase letters a-z.\np could be empty and contains only lowercase letters a-z, and characters like . or *.\n\nExample 1:\n\nInput:s = “aa”p = “a”Output: falseExplanation: “a” does not match the entire string “aa”.\n\nExample 2:\n\nInput:s = “aa”p = “a*“Output: trueExplanation: ‘*’ means zero or more of the precedeng element, ‘a’. Therefore, by repeating ‘a’ once, it becomes “aa”.\n\nExample 3:\n\nInput:s = “ab”p = “.*“Output: trueExplanation: “.*“ means “zero or more (*) of any character (.)”.\n\nExample 4:\n\nInput:s = “aab”p = “cab”Output: trueExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches “aab”.\n\nExample 5:\n\nInput:s = “mississippi”p = “mis*is*p*.”Output: false\n\nA1234567891011121314class Solution &#123;    func isMatch(_ s: String, _ p: String) -&gt; Bool &#123;        if p.isEmpty &#123;            return s.isEmpty        &#125;        let sArr = Array(s), pArr = Array(p)        let isFirstMatch : Bool = (!s.isEmpty) &amp;&amp; (pArr[0] == sArr[0] || pArr[0] == \".\")        if (pArr.count &gt;= 2 &amp;&amp; pArr[1] == \"*\") &#123;            return isFirstMatch &amp;&amp; isMatch(String(s.suffix(s.count - 1)), p) || isMatch(s, String(p.suffix(p.count - 2)))        &#125; else &#123;            return isFirstMatch &amp;&amp; isMatch(String(s.suffix(s.count - 1)), String(p.suffix(p.count - 1)))        &#125;    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0010-en/"},{"title":"0011. Container With Most Water","date":"2020-01-14T16:11:58.930Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:11:58.930Z","content":"English ｜ 简体中文\nQGiven n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\nNote: You may not slant the container and n is at least 2.\n\nThe above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\nExample:\n\nInput: [1,8,6,2,5,4,8,3,7]Output: 49\n\nA1234567891011121314class Solution &#123;    func maxArea(_ height: [Int]) -&gt; Int &#123;        var i = 0, j = height.count - 1, area = 0        while i &lt; j &#123;            area = max(area, min(height[i], height[j]) * (j - i))            if height[i] &lt; height[j] &#123;                i += 1            &#125; else &#123;                j -= 1            &#125;        &#125;        return area    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0011-en/"},{"title":"0010. 正则表达式匹配","date":"2020-01-14T17:15:52.681Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:15:52.681Z","content":"English｜ 简体中文\n题目描述给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 &#39;.&#39; 和 &#39;*&#39; 的正则表达式匹配。\n\n‘.’ 匹配任意单个字符‘*‘ 匹配零个或多个前面的那一个元素所谓匹配，是要涵盖 整个 字符串 s 的，而不是部分字符串。\n\n说明：\n\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。\n\n示例 1：\n\n输入：s = “aa”p = “a”输出：false解释：“a” 无法匹配 “aa” 整个字符串。\n\n示例 2：\n\n输入：s = “aa”p = “a*“输出：true解释： 因为 ‘*’ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。\n\n示例 3：\n\n输入：s = “ab”p = “.*“输出：true解释：“.*“ 表示可匹配零个或多个（’*’）任意字符（’.’）。\n\n示例 4：\n\n输入：s = “aab”p = “cab”输出：true解释：因为 ‘*’ 表示零个或多个，这里 ‘c’ 为 0 个, ‘a’ 被重复一次。因此可以匹配字符串 “aab”。\n\n示例 5：\n\n输入：s = “mississippi”p = “mis*is*p*.”输出：false\n\n题解1234567891011121314class Solution &#123;    func isMatch(_ s: String, _ p: String) -&gt; Bool &#123;        if p.isEmpty &#123;            return s.isEmpty        &#125;        let sArr = Array(s), pArr = Array(p)        let isFirstMatch : Bool = (!s.isEmpty) &amp;&amp; (pArr[0] == sArr[0] || pArr[0] == \".\")        if (pArr.count &gt;= 2 &amp;&amp; pArr[1] == \"*\") &#123;            return isFirstMatch &amp;&amp; isMatch(String(s.suffix(s.count - 1)), p) || isMatch(s, String(p.suffix(p.count - 2)))        &#125; else &#123;            return isFirstMatch &amp;&amp; isMatch(String(s.suffix(s.count - 1)), String(p.suffix(p.count - 1)))        &#125;    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0010/"},{"title":"0011. 盛最多水的容器","date":"2020-01-14T16:13:06.837Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:13:06.837Z","content":"English｜ 简体中文\n题目描述给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n说明：你不能倾斜容器，且 n 的值至少为 2。\n\n图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n示例：\n\n输入： [1,8,6,2,5,4,8,3,7]输出： 49\n\n题解1234567891011121314class Solution &#123;    func maxArea(_ height: [Int]) -&gt; Int &#123;        var i = 0, j = height.count - 1, area = 0        while i &lt; j &#123;            area = max(area, min(height[i], height[j]) * (j - i))            if height[i] &lt; height[j] &#123;                i += 1            &#125; else &#123;                j -= 1            &#125;        &#125;        return area    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0011/"},{"title":"0012. Integer to Roman","date":"2020-01-14T17:23:14.830Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:23:14.830Z","content":"English ｜ 简体中文\nQRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n123456789Symbol              ValueI                   1V                   5X                   10L                   50C                   100D                   500M                   1000\n\nFor example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written asXXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.\nExample 1:\n\nInput: 3Output: “III”\n\nExample 2:\n\nInput: 4Output: “IV”\n\nExample 3:\n\nInput: 9Output: “IX”\n\nExample 4:\n\nInput: 58Output: “LVIII”Explanation: L = 50, V = 5, III = 3.\n\nExample 5:\n\nInput: 1994Output: “MCMXCIV”Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\nA123456789101112131415161718192021class Solution &#123;    func intToRoman(_ num: Int) -&gt; String &#123;        let value = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]        let symbol = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]        var roman = \"\", n = num, i = 0        while n &gt; 0 &#123;            for index in i...value.count - 1 &#123;                let m = value[index]                if n &gt;= m &#123;                    i = index                    let count = n / m                    for _ in 1...count &#123;                        n -= m                        roman.append(symbol[i])                    &#125;                &#125;            &#125;        &#125;        return roman    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0012-en/"},{"title":"0012. 整数转罗马数字","date":"2020-01-14T17:21:31.296Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:21:31.296Z","content":"English｜ 简体中文\n题目描述罗马数字包含以下七种字符：I, V, X, L, C, D and M.\n123456789字符                数值I                   1V                   5X                   10L                   50C                   100D                   500M                   1000\n\n例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：\nI 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。\n给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。\n示例 1：\n\n输入： 3输出： “III”\n\n示例 2：\n\n输入： 4输出：“IV”\n\n示例 3：\n\n输入： 9输出：“IX”\n\n示例 4：\n\n输入： 58输出：“LVIII”解释：L = 50, V = 5, III = 3.\n\n示例 5：\n\n输入： 1994输出：“MCMXCIV”解释：M = 1000, CM = 900, XC = 90, IV = 4.\n\n题解123456789101112131415161718192021class Solution &#123;    func intToRoman(_ num: Int) -&gt; String &#123;        let value = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]        let symbol = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]        var roman = \"\", n = num, i = 0        while n &gt; 0 &#123;            for index in i...value.count - 1 &#123;                let m = value[index]                if n &gt;= m &#123;                    i = index                    let count = n / m                    for _ in 1...count &#123;                        n -= m                        roman.append(symbol[i])                    &#125;                &#125;            &#125;        &#125;        return roman    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0012/"},{"title":"0013.  Roman to Integer","date":"2020-01-14T17:23:05.782Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:23:05.782Z","content":"English ｜ 简体中文\nQRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n123456789Symbol              ValueI                   1V                   5X                   10L                   50C                   100D                   500M                   1000\n\nFor example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written asXXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\nExample 1:\n\nInput: “III”Output: 3\n\nExample 2:\n\nInput: “IV”Output: 4\n\nExample 3:\n\nInput: “IX”Output: 9\n\nExample 4:\n\nInput: “LVIII”Output: 58Explanation: L = 50, V= 5, III = 3.\n\nExample 5:\n\nInput: “MCMXCIV”Output: 1994Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\nA12345678910111213141516171819class Solution &#123;    func romanToInt(_ s: String) -&gt; Int &#123;        let map = [\"M\": 1000, \"D\": 500, \"C\": 100, \"L\": 50, \"X\": 10, \"V\": 5,  \"I\": 1]        let special = [\"CM\": 900, \"CD\": 400, \"XC\": 90, \"XL\": 40, \"IX\": 9, \"IV\": 4]        var reducedRoman = s, value = 0        for sp in special &#123;            if reducedRoman.contains(sp.key) &#123;                value += sp.value                reducedRoman = reducedRoman.replacingOccurrences(of: sp.key, with: \"\")            &#125;        &#125;        for c in reducedRoman &#123;            if map.keys.contains(String(c)) &#123;                value += map[String(c)] ?? 0            &#125;        &#125;        return value    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0013-en/"},{"title":"0013.  罗马数字转整数","date":"2020-01-14T17:22:27.792Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:22:27.792Z","content":"English｜ 简体中文\n题目描述罗马数字包含以下七种字符：I, V, X, L, C, D and M.\n123456789字符                数值I                   1V                   5X                   10L                   50C                   100D                   500M                   1000\n\n例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：\nI 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。\n给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。\n示例 1：\n\n输入： “III”输出： 3\n\n示例 2：\n\n输入： “IV”输出： 4\n\n示例 3：\n\n输入： “IX”输出： 9\n\n示例 4：\n\n输入： “LVIII”输出： 58解释： L = 50, V= 5, III = 3.\n\n示例 5：\n\n输入： “MCMXCIV”输出： 1994解释： M = 1000, CM = 900, XC = 90, IV = 4.\n\n题解12345678910111213141516171819class Solution &#123;    func romanToInt(_ s: String) -&gt; Int &#123;        let map = [\"M\": 1000, \"D\": 500, \"C\": 100, \"L\": 50, \"X\": 10, \"V\": 5,  \"I\": 1]        let special = [\"CM\": 900, \"CD\": 400, \"XC\": 90, \"XL\": 40, \"IX\": 9, \"IV\": 4]        var reducedRoman = s, value = 0        for sp in special &#123;            if reducedRoman.contains(sp.key) &#123;                value += sp.value                reducedRoman = reducedRoman.replacingOccurrences(of: sp.key, with: \"\")            &#125;        &#125;        for c in reducedRoman &#123;            if map.keys.contains(String(c)) &#123;                value += map[String(c)] ?? 0            &#125;        &#125;        return value    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0013/"},{"title":"0014.  Longest Common Prefix","date":"2020-01-14T16:39:22.907Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:39:22.907Z","content":"English ｜ 简体中文\nQWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string &quot;&quot;.\nExample 1:\n\nInput: [“flower”,”flow”,”flight”]Output: “fl”\n\nExample 2:\n\nInput: [“dog”,”racecar”,”car”]Output: “”Explanation: There is no common prefix among the input strings.\n\nNote:\nAll given inputs are in lowercase letters a-z.\nA123456789101112131415161718192021class Solution &#123;    func longestCommonPrefix(_ strs: [String]) -&gt; String &#123;        if strs.count == 0 &#123;            return \"\"        &#125;        var p = strs[0]        if strs.count == 1 &#123;            return p        &#125;        for i in 1...strs.count - 1 &#123;            let s = strs[i]            while s.prefix(p.count) != p &#123;                p = String(p.prefix(p.count - 1))                if p.isEmpty &#123;                    return \"\"                &#125;            &#125;        &#125;        return p    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0014-en/"},{"title":"0014. 最长公共前缀","date":"2020-01-14T16:20:42.045Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:20:42.045Z","content":"English｜ 简体中文\n题目描述编写一个函数来查找字符串数组中的最长公共前缀。\n如果不存在公共前缀，返回空字符串 &quot;&quot;。\n示例 1：\n\n输入： [“flower”,”flow”,”flight”]输出： “fl”\n\n示例 2：\n\n输入： [“dog”,”racecar”,”car”]输出： “”解释： 输入不存在公共前缀。\n\n说明：\n所有输入只包含小写字母 a-z 。\n题解123456789101112131415161718192021class Solution &#123;    func longestCommonPrefix(_ strs: [String]) -&gt; String &#123;        if strs.count == 0 &#123;            return \"\"        &#125;        var p = strs[0]        if strs.count == 1 &#123;            return p        &#125;        for i in 1...strs.count - 1 &#123;            let s = strs[i]            while s.prefix(p.count) != p &#123;                p = String(p.prefix(p.count - 1))                if p.isEmpty &#123;                    return \"\"                &#125;            &#125;        &#125;        return p    &#125;&#125;\n","plink":"https://blog.fiteen.top/leetcode/0014/"},{"title":"0015. 三数之和","date":"2020-01-14T17:28:12.270Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:28:12.270Z","content":"English｜ 简体中文\n题目描述给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。\n注意：答案中不可以包含重复的三元组。\n示例：\n\n给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n满足要求的三元组集合为：[ [-1, 0, 1], [-1, -1, 2]]\n\n题解1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123;    func threeSum(_ nums: [Int]) -&gt; [[Int]] &#123;        var res = [[Int]]()        let sortedNums = nums.sorted()        if nums.count &lt; 3 &#123;            return []        &#125;        for i in 0...nums.count - 1 &#123;            if i &gt; 0, sortedNums[i - 1] == sortedNums[i] &#123;                continue            &#125;            var j = i + 1, k = nums.count - 1            while j &lt; k &#123;                let target = -sortedNums[i]                let sum = sortedNums[j] + sortedNums[k]                if sum &lt; target &#123;                    j += 1                    while j &lt; k, sortedNums[j] == sortedNums[j - 1] &#123;                        j += 1                    &#125;                &#125; else if sum &gt; target &#123;                    k -= 1                    while j &lt; k, sortedNums[k] == sortedNums[k + 1] &#123;                        k -= 1                    &#125;                &#125; else &#123;                    res.append([-target, sortedNums[j], sortedNums[k]])                    j += 1                    k -= 1                    while j &lt; k, sortedNums[j] == sortedNums[j - 1] &#123;                        j += 1                    &#125;                    while j &lt; k, sortedNums[k] == sortedNums[k + 1] &#123;                        k -= 1                    &#125;                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0015/"},{"title":"0015. 3Sum","date":"2020-01-14T17:28:07.202Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:28:07.202Z","content":"English ｜ 简体中文\nQGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNote:\nThe solution set must not contain duplicate triplets.\nExample:\n\nGiven array nums = [-1, 0, 1, 2, -1, -4],\nA solution set is:[ [-1, 0, 1], [-1, -1, 2]]\n\nA1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123;    func threeSum(_ nums: [Int]) -&gt; [[Int]] &#123;        var res = [[Int]]()        let sortedNums = nums.sorted()        if nums.count &lt; 3 &#123;            return []        &#125;        for i in 0...nums.count - 1 &#123;            if i &gt; 0, sortedNums[i - 1] == sortedNums[i] &#123;                continue            &#125;            var j = i + 1, k = nums.count - 1            while j &lt; k &#123;                let target = -sortedNums[i]                let sum = sortedNums[j] + sortedNums[k]                if sum &lt; target &#123;                    j += 1                    while j &lt; k, sortedNums[j] == sortedNums[j - 1] &#123;                        j += 1                    &#125;                &#125; else if sum &gt; target &#123;                    k -= 1                    while j &lt; k, sortedNums[k] == sortedNums[k + 1] &#123;                        k -= 1                    &#125;                &#125; else &#123;                    res.append([-target, sortedNums[j], sortedNums[k]])                    j += 1                    k -= 1                    while j &lt; k, sortedNums[j] == sortedNums[j - 1] &#123;                        j += 1                    &#125;                    while j &lt; k, sortedNums[k] == sortedNums[k + 1] &#123;                        k -= 1                    &#125;                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0015-en/"},{"title":"0016. 3Sum Closest","date":"2020-01-14T16:24:09.132Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:24:09.132Z","content":"English ｜ 简体中文\nQGiven an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\nExample:\n\nGiven array nums = [-1, 2, 1, -4], and target = 1.\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\nA1234567891011121314151617181920212223242526class Solution &#123;    func threeSumClosest(_ nums: [Int], _ target: Int) -&gt; Int &#123;        let sortedNums = nums.sorted()        var res = sortedNums[0] + sortedNums[1] + sortedNums[2]        for i in 0...sortedNums.count &#123;            if i - 1 &gt;= 0, i &lt; sortedNums.count, sortedNums[i - 1] == sortedNums[i] &#123;                continue            &#125;            var j = i + 1, k = sortedNums.count - 1            while j &lt; k &#123;                let sum = sortedNums[i] + sortedNums[j] + sortedNums[k]                if abs(sum - target) &lt; abs(res - target) &#123;                    res = sum                &#125;                if sum &lt; target &#123;                    j += 1                &#125; else if sum &gt; target &#123;                    k -= 1                &#125; else &#123;                    return res                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0016-en/"},{"title":"0016. 3Sum Closest","date":"2020-01-14T16:24:43.877Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:24:43.877Z","content":"English｜ 简体中文\n题目描述给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。\n示例：\n\n例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.\n与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).\n\n题解1234567891011121314151617181920212223242526class Solution &#123;    func threeSumClosest(_ nums: [Int], _ target: Int) -&gt; Int &#123;        let sortedNums = nums.sorted()        var res = sortedNums[0] + sortedNums[1] + sortedNums[2]        for i in 0...sortedNums.count &#123;            if i - 1 &gt;= 0, i &lt; sortedNums.count, sortedNums[i - 1] == sortedNums[i] &#123;                continue            &#125;            var j = i + 1, k = sortedNums.count - 1            while j &lt; k &#123;                let sum = sortedNums[i] + sortedNums[j] + sortedNums[k]                if abs(sum - target) &lt; abs(res - target) &#123;                    res = sum                &#125;                if sum &lt; target &#123;                    j += 1                &#125; else if sum &gt; target &#123;                    k -= 1                &#125; else &#123;                    return res                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0016/"},{"title":"0017. Letter Combinations of a Phone Number","date":"2020-01-15T18:46:47.099Z","date_formatted":{"ll":"Jan 16, 2020","L":"01/16/2020","MM-DD":"01-16"},"updated":"2020-01-14T16:39:01.198Z","content":"English ｜ 简体中文\nQGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\nExample:\n\nInput: “23”Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].\n\nNote:\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\nA12345678910111213141516171819202122class Solution &#123;    func letterCombinations(_ digits: String) -&gt; [String] &#123;        let map: [Character : String] = [\"2\": \"abc\", \"3\": \"def\", \"4\": \"ghi\", \"5\": \"jkl\", \"6\": \"mno\", \"7\": \"pqrs\", \"8\": \"tuv\", \"9\":\"wxyz\"]        var res : [String] = []        for c in digits &#123;            let temp = res            res.removeAll()            for s in map[c]! &#123;                if temp.count == 0 &#123;                    res.append(String(s))                &#125; else &#123;                    for t in temp &#123;                        var a = t                        a.append(s)                        res.append(a)                    &#125;                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0017-en/"},{"title":"0018. 4Sum","date":"2020-01-14T16:31:12.727Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:31:12.727Z","content":"English ｜ 简体中文\nQGiven an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a +b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\nNote:\nThe solution set must not contain duplicate quadruplets.\nExample:\n\nGiven array nums = [1, 0, -1, 0, -2, 2], and target = 0.\nA solution set is:[ [-1,  0, 0, 1], [-2, -1, 1, 2], [-2,  0, 0, 2]]\n\nA123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution &#123;    func fourSum(_ nums: [Int], _ target: Int) -&gt; [[Int]] &#123;        let sortNums = nums.sorted()        var res : [[Int]] = []        if nums.count &lt; 4 &#123;            return []        &#125;        for i in 0...sortNums.count - 4 &#123;            if i != 0 &amp;&amp; sortNums[i - 1] == sortNums[i] &#123;                continue            &#125;            for j in i + 1...sortNums.count - 2 &#123;                if j != i + 1 &amp;&amp; sortNums[j - 1] == sortNums[j] &#123;                    continue                &#125;                var k = j + 1, l = sortNums.count - 1                while k &lt; l &#123;                    let sum = sortNums[i] + sortNums[j] + sortNums[k] + sortNums[l]                    if sum &lt; target &#123;                        k += 1                        while k &lt; l, sortNums[k] == sortNums[k - 1] &#123;                            k += 1                        &#125;                    &#125; else if sum &gt; target&#123;                        l -= 1                        while k &lt; l, sortNums[l] == sortNums[l + 1] &#123;                            l -= 1                        &#125;                    &#125; else &#123;                        res.append([sortNums[i], sortNums[j], sortNums[k], sortNums[l]])                        k += 1                        l -= 1                        while k &lt; l, sortNums[k] == sortNums[k - 1] &#123;                            k += 1                        &#125;                        while k &lt; l, sortNums[l] == sortNums[l + 1] &#123;                            l -= 1                        &#125;                    &#125;                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0018-en/"},{"title":"0017. 电话号码的字母组合","date":"2020-01-14T16:26:59.896Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:26:59.896Z","content":"English｜ 简体中文\n题目描述给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n示例:\n\n输入：“23”输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].\n\n说明:\n尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。\n题解12345678910111213141516171819202122class Solution &#123;    func letterCombinations(_ digits: String) -&gt; [String] &#123;        let map: [Character : String] = [\"2\": \"abc\", \"3\": \"def\", \"4\": \"ghi\", \"5\": \"jkl\", \"6\": \"mno\", \"7\": \"pqrs\", \"8\": \"tuv\", \"9\":\"wxyz\"]        var res : [String] = []        for c in digits &#123;            let temp = res            res.removeAll()            for s in map[c]! &#123;                if temp.count == 0 &#123;                    res.append(String(s))                &#125; else &#123;                    for t in temp &#123;                        var a = t                        a.append(s)                        res.append(a)                    &#125;                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0017/"},{"title":"0018. 四数之和","date":"2020-01-14T16:29:47.761Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:29:47.761Z","content":"English｜ 简体中文\n题目描述给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。\n注意：\n答案中不可以包含重复的四元组。\n示例：\n\n给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。\n满足要求的四元组集合为：[ [-1,  0, 0, 1], [-2, -1, 1, 2], [-2,  0, 0, 2]]\n\nA123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution &#123;    func fourSum(_ nums: [Int], _ target: Int) -&gt; [[Int]] &#123;        let sortNums = nums.sorted()        var res : [[Int]] = []        if nums.count &lt; 4 &#123;            return []        &#125;        for i in 0...sortNums.count - 4 &#123;            if i != 0 &amp;&amp; sortNums[i - 1] == sortNums[i] &#123;                continue            &#125;            for j in i + 1...sortNums.count - 2 &#123;                if j != i + 1 &amp;&amp; sortNums[j - 1] == sortNums[j] &#123;                    continue                &#125;                var k = j + 1, l = sortNums.count - 1                while k &lt; l &#123;                    let sum = sortNums[i] + sortNums[j] + sortNums[k] + sortNums[l]                    if sum &lt; target &#123;                        k += 1                        while k &lt; l, sortNums[k] == sortNums[k - 1] &#123;                            k += 1                        &#125;                    &#125; else if sum &gt; target&#123;                        l -= 1                        while k &lt; l, sortNums[l] == sortNums[l + 1] &#123;                            l -= 1                        &#125;                    &#125; else &#123;                        res.append([sortNums[i], sortNums[j], sortNums[k], sortNums[l]])                        k += 1                        l -= 1                        while k &lt; l, sortNums[k] == sortNums[k - 1] &#123;                            k += 1                        &#125;                        while k &lt; l, sortNums[l] == sortNums[l + 1] &#123;                            l -= 1                        &#125;                    &#125;                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0018/"},{"title":"0019. Remove Nth Node From End of List","date":"2020-01-14T16:31:13.942Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:31:13.942Z","content":"English ｜ 简体中文\nQGiven a linked list, remove the n-th node from the end of list and return its head.\nExample:\n\nGiven linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.\nAfter removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.\n\nNote:\nGiven n will always be valid.\nFollow up:\nCould you do this in one pass?\nA12345678910111213141516class Solution &#123;    func removeNthFromEnd(_ head: ListNode?, _ n: Int) -&gt; ListNode? &#123;        let p = ListNode(0)        p.next = head        var q = p, r = p        for _ in 0..&lt;n &#123;            q = q.next!        &#125;        while q.next != nil &#123;            q = q.next!            r = r.next!        &#125;        r.next = r.next?.next        return p.next    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0019-en/"},{"title":"0019. 删除链表的倒数第 N 个节点","date":"2020-01-14T16:30:45.158Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:30:45.158Z","content":"English｜ 简体中文\n题目描述给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。\n示例：\n\n给定一个链表：1-&gt;2-&gt;3-&gt;4-&gt;5，和 n = 2。\n当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5。\n\n说明：\n给定的 n 保证是有效的。\n进阶：\n你能尝试使用一趟扫描实现吗？\n题解12345678910111213141516class Solution &#123;    func removeNthFromEnd(_ head: ListNode?, _ n: Int) -&gt; ListNode? &#123;        let p = ListNode(0)        p.next = head        var q = p, r = p        for _ in 0..&lt;n &#123;            q = q.next!        &#125;        while q.next != nil &#123;            q = q.next!            r = r.next!        &#125;        r.next = r.next?.next        return p.next    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0019/"},{"title":"0020. Valid Parentheses","date":"2020-01-14T16:31:25.410Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:31:25.410Z","content":"English ｜ 简体中文\nQGiven a string containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\n\nNote that an empty string is also considered valid.\nExample 1:\n\nInput: “()”Output: true\n\nExample 2:\n\nInput: “()[]{}”Output: true\n\nExample 3:\n\nInput: “(]”Output: false\n\nExample 4:\n\nInput: “([)]”Output: false\n\nExample 5:\n\nInput: “{[]}”Output: true\n\nA123456789101112131415161718class Solution &#123;    func isValid(_ s: String) -&gt; Bool &#123;        var str : [Character] = []        for c in s &#123;            if str.count == 0 &#123;                str.append(c)                continue            &#125;            let combine = String(str.last!) + String(c)            if combine == \"[]\" || combine == \"&#123;&#125;\" || combine == \"()\" &#123;                str.removeLast()            &#125; else &#123;                str.append(c)            &#125;        &#125;        return str.count == 0    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0020-en/"},{"title":"0020. 有效的括号","date":"2020-01-14T16:31:58.022Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:31:58.022Z","content":"English｜ 简体中文\n题目描述给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n示例 1：\n\n输入： “()”输出： true\n\n示例 2：\n\n输入： “()[]{}”输出： true\n\n示例 3：\n\n输入： “(]”输出： false\n\n示例 4：\n\n输入： “([)]”输出： false\n\n示例 5：\n\n输入： “{[]}”输出： true\n\n题解123456789101112131415161718class Solution &#123;    func isValid(_ s: String) -&gt; Bool &#123;        var str : [Character] = []        for c in s &#123;            if str.count == 0 &#123;                str.append(c)                continue            &#125;            let combine = String(str.last!) + String(c)            if combine == \"[]\" || combine == \"&#123;&#125;\" || combine == \"()\" &#123;                str.removeLast()            &#125; else &#123;                str.append(c)            &#125;        &#125;        return str.count == 0    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0020/"},{"title":"0021. Merge Two Sorted Lists","date":"2020-01-14T16:34:28.303Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:34:28.303Z","content":"English ｜ 简体中文\nQMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\nExample:\n\nInput: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\n\nA12345678910111213141516171819class Solution &#123;    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -&gt; ListNode? &#123;        var p = ListNode(-1)        var ll1 = l1, ll2 = l2        let q = p        while ll1 != nil &amp;&amp; ll2 != nil &#123;            if ll1!.val &lt; ll2!.val &#123;                p.next = ll1                ll1 = ll1?.next            &#125; else &#123;                p.next = ll2                ll2 = ll2?.next            &#125;            p = p.next!        &#125;        p.next = ll1 == nil ? ll2 : ll1        return q.next    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0021-en/"},{"title":"0022. Generate Parentheses","date":"2020-01-14T16:36:34.798Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:36:34.798Z","content":"English ｜ 简体中文\nQGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nFor example, given n = 3, a solution set is:\n\n[   “((()))”,   “(()())”,   “(())()”,   “()(())”,   “()()()”]\n\nA1234567891011121314151617class Solution &#123;    func generateParenthesis(_ n: Int) -&gt; [String] &#123;        var res: [String] = []        if n == 0 &#123;            res.append(\"\")        &#125; else &#123;            for i in 0...n-1 &#123;                for left in generateParenthesis(i) &#123;                    for right in generateParenthesis(n-i-1) &#123;                        res.append(\"(\" + left + \")\" + right)                    &#125;                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0022-en/"},{"title":"0021. 合并两个有序链表","date":"2020-01-14T16:39:46.794Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:39:46.794Z","content":"English｜ 简体中文\n题目描述将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n示例：\n\n输入： 1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出： 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\n\n题解12345678910111213141516171819class Solution &#123;    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -&gt; ListNode? &#123;        var p = ListNode(-1)        var ll1 = l1, ll2 = l2        let q = p        while ll1 != nil &amp;&amp; ll2 != nil &#123;            if ll1!.val &lt; ll2!.val &#123;                p.next = ll1                ll1 = ll1?.next            &#125; else &#123;                p.next = ll2                ll2 = ll2?.next            &#125;            p = p.next!        &#125;        p.next = ll1 == nil ? ll2 : ll1        return q.next    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0021/"},{"title":"0022. 括号生成","date":"2020-01-14T16:41:05.520Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:41:05.520Z","content":"English｜ 简体中文\n题目描述给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。\n例如，给出 n = 3，生成结果为：\n\n[     “((()))”,     “(()())”,     “(())()”,     “()(())”,     “()()()”]\n\n题解1234567891011121314151617class Solution &#123;    func generateParenthesis(_ n: Int) -&gt; [String] &#123;        var res: [String] = []        if n == 0 &#123;            res.append(\"\")        &#125; else &#123;            for i in 0...n-1 &#123;                for left in generateParenthesis(i) &#123;                    for right in generateParenthesis(n-i-1) &#123;                        res.append(\"(\" + left + \")\" + right)                    &#125;                &#125;            &#125;        &#125;        return res    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0022/"},{"title":"0023. Merge k Sorted Lists","date":"2020-01-14T16:43:56.075Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:43:56.075Z","content":"English ｜ 简体中文\nQMerge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\nExample:\n\nInput:[   1-&gt;4-&gt;5,   1-&gt;3-&gt;4,   2-&gt;6]Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n\nA1234567891011121314151617181920class Solution &#123;    func mergeKLists(_ lists: [ListNode?]) -&gt; ListNode? &#123;        var vals = [Int]()        for list in lists &#123;            var p = list            while p != nil &#123;                vals.append(p!.val)                p = p!.next            &#125;        &#125;        vals.sort()        var q : ListNode = ListNode(Int.min)        let res = q        for val in vals &#123;            q.next = ListNode(val)            q = q.next!        &#125;        return res.next    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0023-en/"},{"title":"0023. 合并K个排序链表","date":"2020-01-14T17:33:27.522Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:33:27.522Z","content":"English｜ 简体中文\n题目描述合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。\n示例：\n\n输入：[     1-&gt;4-&gt;5,     1-&gt;3-&gt;4,     2-&gt;6]输出： 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n\n题解1234567891011121314151617181920class Solution &#123;    func mergeKLists(_ lists: [ListNode?]) -&gt; ListNode? &#123;        var vals = [Int]()        for list in lists &#123;            var p = list            while p != nil &#123;                vals.append(p!.val)                p = p!.next            &#125;        &#125;        vals.sort()        var q : ListNode = ListNode(Int.min)        let res = q        for val in vals &#123;            q.next = ListNode(val)            q = q.next!        &#125;        return res.next    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0023/"},{"title":"0024. Swap Nodes in Pairs","date":"2020-01-14T16:45:19.413Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:45:19.413Z","content":"English ｜ 简体中文\nQGiven a linked list, swap every two adjacent nodes and return its head.\nYou may not modify the values in the list’s nodes, only nodes itself may be changed.\nExample:\n\nGiven 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.\n\nA1234567891011class Solution &#123;    func swapPairs(_ head: ListNode?) -&gt; ListNode? &#123;        if head == nil || head?.next == nil &#123;            return head        &#125;        let next = head?.next        head?.next = swapPairs(next?.next)        next?.next = head        return next    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0024-en/"},{"title":"0026. Remove Duplicates from Sorted Array","date":"2020-01-14T17:32:42.843Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:32:42.843Z","content":"English ｜ 简体中文\nQGiven a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nExample 1:\n\nGiven nums = [1,1,2],\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\nIt doesn’t matter what you leave beyond the returned length.\n\nExample 2:\n\nGiven nums = [0,0,1,1,1,2,2,3,3,4],\nYour function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.\nIt doesn’t matter what values are set beyond the returned length.\n\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\nInternally you can think of this:\n12345678&#x2F;&#x2F; **nums** is passed in by reference. (i.e., without making a copy)int len &#x3D; removeDuplicates(nums);&#x2F;&#x2F; any modification to **nums** in your function would be known by the caller.&#x2F;&#x2F; using the length returned by your function, it prints the first **len** elements.for (int i &#x3D; 0; i &lt; len; i++) &#123;    print(nums[i]);&#125;\n\n\n\nA123456789101112131415class Solution &#123;    func removeDuplicates(_ nums: inout [Int]) -&gt; Int &#123;        if nums.count == 0 &#123;            return 0        &#125;        var i = 0        for num in nums &#123;            if nums[i] != num &#123;                i += 1                nums[i] = num            &#125;        &#125;        return i + 1    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0026-en/"},{"title":"0024. 两两交换链表的节点","date":"2020-01-14T17:33:32.396Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:33:32.396Z","content":"English｜ 简体中文\n题目描述给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\n你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。\n示例：\n\n给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.\n\n题解1234567891011class Solution &#123;    func swapPairs(_ head: ListNode?) -&gt; ListNode? &#123;        if head == nil || head?.next == nil &#123;            return head        &#125;        let next = head?.next        head?.next = swapPairs(next?.next)        next?.next = head        return next    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0024/"},{"title":"0027. Remove Element","date":"2020-01-14T17:34:50.309Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:34:50.309Z","content":"English ｜ 简体中文\nQGiven an array nums and a value val, remove all instances of that value in-place and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nThe order of elements can be changed. It doesn’t matter what you leave beyond the new length.\nExample 1：\n\nGiven nums = [3,2,2,3], val = 3,\nYour function should return length = 2, with the first two elements of nums being 2.\nIt doesn’t matter what you leave beyond the returned length.\n\nExample 2:\n\nGiven nums = [0,1,2,2,3,0,4,2], val = 2,\nYour function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\nNote that the order of those five elements can be arbitrary.\nIt doesn’t matter what values are set beyond the returned length.\n\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\nInternally you can think of this:\n12345678910111213141516171819202122232425262728&#x2F;&#x2F; **nums** is passed in by reference. (i.e., without making a copy)int len &#x3D; removeElement(nums, val);&#x2F;&#x2F; any modification to **nums** in your function would be known by the caller.&#x2F;&#x2F; using the length returned by your function, it prints the first **len** elements.for (int i &#x3D; 0; i &lt; len; i++) &#123;    print(nums[i]);&#125;&#96;&#96;## A&#96;&#96;&#96;swiftclass Solution &#123;    func removeElement(_ nums: inout [Int], _ val: Int) -&gt; Int &#123;        var i &#x3D; 0        for num in nums &#123;            if num !&#x3D; val &#123;                nums[i] &#x3D; num                i +&#x3D; 1            &#125;        &#125;        return i    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0027-en/"},{"title":"0026. 删除排序数组中的重复项","date":"2020-01-14T17:33:38.209Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:33:38.209Z","content":"English｜ 简体中文\n题目描述给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n示例 1：\n\n给定数组 nums = [1,1,2], \n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 \n你不需要考虑数组中超出新长度后面的元素。\n\n示例 2：\n\n给定 nums = [0,0,1,1,1,2,2,3,3,4],\n函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n你不需要考虑数组中超出新长度后面的元素。\n\n说明：\n为什么返回数值是整数，但输出的答案是数组呢?\n请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n你可以想象内部操作如下:\n12345678&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len &#x3D; removeDuplicates(nums);&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i &#x3D; 0; i &lt; len; i++) &#123;    print(nums[i]);&#125;\n\n\n\n题解123456789101112131415class Solution &#123;    func removeDuplicates(_ nums: inout [Int]) -&gt; Int &#123;        if nums.count == 0 &#123;            return 0        &#125;        var i = 0        for num in nums &#123;            if nums[i] != num &#123;                i += 1                nums[i] = num            &#125;        &#125;        return i + 1    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0026/"},{"title":"0027. 移除元素","date":"2020-01-14T17:35:05.248Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:35:05.248Z","content":"English｜ 简体中文\n题目描述给定一个数组 nums 和一个值 val*，你需要原地移除所有数值等于 *val 的元素，返回移除后数组的新长度。\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n示例 1：\n\n给定 nums = [3,2,2,3], val = 3,\n函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n你不需要考虑数组中超出新长度后面的元素。\n\n示例 2：\n\n给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n注意这五个元素可为任意顺序。\n你不需要考虑数组中超出新长度后面的元素。\n\n说明：\n为什么返回数值是整数，但输出的答案是数组呢?\n请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n你可以想象内部操作如下:\n12345678&#x2F;&#x2F; **nums** 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len &#x3D; removeElement(nums, val);&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中**该长度范围内**的所有元素。for (int i &#x3D; 0; i &lt; len; i++) &#123;    print(nums[i]);&#125;\n\n\n\n题解123456789101112class Solution &#123;    func removeElement(_ nums: inout [Int], _ val: Int) -&gt; Int &#123;        var i = 0        for num in nums &#123;            if num != val &#123;                nums[i] = num                i += 1            &#125;        &#125;        return i    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0027/"},{"title":"0028. Implement strStr()","date":"2020-01-14T16:46:37.149Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:46:37.149Z","content":"English ｜ 简体中文\nQImplement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nExample 1:\n\nInput: haystack = “hello”, needle = “ll”Output: 2\n\nExample 2:\n\nInput: haystack = “aaaaa”, needle = “bba”Output: -1\n\nClarification:\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().\nA123456789101112131415161718192021222324class Solution &#123;    func strStr(_ haystack: String, _ needle: String) -&gt; Int &#123;        let nCount = needle.count        if nCount == 0 &#123;            return 0        &#125;        let haystackArr = Array(haystack), hCount = haystack.count        let needleArr = Array(needle)        var i = 0, j = 0        while j &lt; nCount &amp;&amp; i + j &lt; hCount &#123;            if haystackArr[i + j] == needleArr[j] &#123;                if  j == nCount - 1 &#123;                    return i                &#125; else &#123;                    j += 1                &#125;            &#125; else &#123;                j = 0                i += 1            &#125;        &#125;        return -1    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0028-en/"},{"title":"0029. Divide Two Integers","date":"2020-01-14T16:47:00.105Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T16:47:00.105Z","content":"English ｜ 简体中文\nQGiven two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.\nReturn the quotient after dividing dividend by divisor.\nThe integer division should truncate toward zero.\nExample 1:\n\nInput: dividend = 10, divisor = 3Output: 3\n\nExample 2:\n\nInput: dividend = 7, divisor = -3Output: -2\n\nNote:\n\nBoth dividend and divisor will be 32-bit signed integers.\nThe divisor will never be 0.\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 2^31 − 1 when the division result overflows.\n\nA12345678910111213141516171819202122class Solution &#123;    func divide(_ dividend: Int, _ divisor: Int) -&gt; Int &#123;        let INT_MAX = Int(INT32_MAX)        if divisor == 0 &#123;            return INT_MAX        &#125;        let flag = (dividend &gt; 0) == (divisor &gt; 0)        var d1 = abs(dividend), d2 = abs(divisor), count = 0        while d1 &gt;= d2 &#123;            var shift = 0            while d1 &gt;= d2 &lt;&lt; shift &#123;                shift += 1            &#125;            d1 -= d2 &lt;&lt; (shift - 1)            count += 1 &lt;&lt; (shift - 1)        &#125;        if count &gt; INT_MAX &amp;&amp; flag &#123;            return INT_MAX        &#125;        return flag ? count : -count    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0029-en/"},{"title":"0028. 实现 strStr()","date":"2020-01-14T17:33:53.980Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:33:53.980Z","content":"English｜ 简体中文\n题目描述实现 strStr() 函数。\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\n示例 1：\n\n输入： haystack = “hello”, needle = “ll”输出： 2\n\n示例 2：\n\n输入： haystack = “aaaaa”, needle = “bba”输出： -1\n\n说明：\n当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。\n题解123456789101112131415161718192021222324class Solution &#123;    func strStr(_ haystack: String, _ needle: String) -&gt; Int &#123;        let nCount = needle.count        if nCount == 0 &#123;            return 0        &#125;        let haystackArr = Array(haystack), hCount = haystack.count        let needleArr = Array(needle)        var i = 0, j = 0        while j &lt; nCount &amp;&amp; i + j &lt; hCount &#123;            if haystackArr[i + j] == needleArr[j] &#123;                if  j == nCount - 1 &#123;                    return i                &#125; else &#123;                    j += 1                &#125;            &#125; else &#123;                j = 0                i += 1            &#125;        &#125;        return -1    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0028/"},{"title":"0029. 两数相除","date":"2020-01-14T17:34:05.106Z","date_formatted":{"ll":"Jan 15, 2020","L":"01/15/2020","MM-DD":"01-15"},"updated":"2020-01-14T17:34:05.106Z","content":"English｜ 简体中文\n题目描述给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。\n返回被除数 dividend 除以除数 divisor 得到的商。\n示例 1：\n\n输入： dividend = 10, divisor = 3输出： 3\n\n示例 2：\n\n输入： dividend = 7, divisor = -3输出： -2\n\n说明：\n\n被除数和除数均为 32 位有符号整数。\n除数不为 0。\n假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。本题中，如果除法结果溢出，则返回 2^31 − 1。\n\n题解12345678910111213141516171819202122class Solution &#123;    func divide(_ dividend: Int, _ divisor: Int) -&gt; Int &#123;        let INT_MAX = Int(INT32_MAX)        if divisor == 0 &#123;            return INT_MAX        &#125;        let flag = (dividend &gt; 0) == (divisor &gt; 0)        var d1 = abs(dividend), d2 = abs(divisor), count = 0        while d1 &gt;= d2 &#123;            var shift = 0            while d1 &gt;= d2 &lt;&lt; shift &#123;                shift += 1            &#125;            d1 -= d2 &lt;&lt; (shift - 1)            count += 1 &lt;&lt; (shift - 1)        &#125;        if count &gt; INT_MAX &amp;&amp; flag &#123;            return INT_MAX        &#125;        return flag ? count : -count    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0029/"},{"title":"0035. Search Insert Position","date":"2020-01-14T15:59:16.723Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:59:16.723Z","content":"English ｜ 简体中文\nQGiven a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou may assume no duplicates in the array.\nExample 1:\n\nInput: [1,3,5,6], 5Output: 2\n\nExample 2:\n\nInput: [1,3,5,6], 2Output: 1\n\nExample 3:\n\nInput: [1,3,5,6], 7Output: 4\n\nExample 4:\n\nInput: [1,3,5,6], 0Output: 0\n\nA12345678910class Solution &#123;    func searchInsert(_ nums: [Int], _ target: Int) -&gt; Int &#123;        for (i, n) in nums.enumerated() &#123;            if n &gt;= target &#123;                return i            &#125;        &#125;        return nums.count    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0035-en/"},{"title":"LeetCode Solutions（Swift）","date":"2019-06-29T16:00:00.000Z","date_formatted":{"ll":"Jun 30, 2019","L":"06/30/2019","MM-DD":"06-30"},"updated":"2020-01-15T10:23:51.868Z","content":"简体中文 ｜ English ｜ \nEasy\n0001. Two Sum\n0007. Reverse Integer\n0009. Palindrome Number\n0013. Roman to Integer\n0014. Longest Common Prefix\n0020. Valid Parentheses\n0021. Merge Two Sorted Lists\n0026. Remove Duplicates from Sorted Array\n0027. Remove Element\n0028. Implement strStr()\n0035. Search Insert Position\n\nMedium\n0002. Add Two Numbers\n0003. Longest Substring Without Repeating Characters\n0005. Longest Palindromic Substring \n0006. ZigZag Conversion\n0008. String to Integer (atoi)\n0011. Container With Most Water\n0012. Integer to Roman\n0015. 3Sum\n0016. 3Sum Closest\n0017. Letter Combinations of a Phone Number\n0018. 4Sum\n0019. Remove Nth Node From End of List\n0022. Generate Parentheses\n0024. Swap Nodes in Pairs\n0029. Divide Two Integers\n\nHard\n0004. Median of Two Sorted Arrays\n0010. Regular Expression Matching\n0023. Merge k Sorted Lists\n\n","plink":"https://blog.fiteen.top/leetcode/index-en/"},{"title":"0035. 搜索插入位置","date":"2020-01-14T15:59:20.222Z","date_formatted":{"ll":"Jan 14, 2020","L":"01/14/2020","MM-DD":"01-14"},"updated":"2020-01-14T15:59:20.222Z","content":"English｜ 简体中文\n题目描述给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n你可以假设数组中无重复元素。\n示例 1：\n\n输入： [1,3,5,6], 5输出： 2\n\n示例 2：\n\n输入： [1,3,5,6], 2输出： 1\n\n示例 3：\n\n输入： [1,3,5,6], 7输出： 4\n\n示例 4：\n\n输入： [1,3,5,6], 0输出： 0\n\n题解12345678910class Solution &#123;    func searchInsert(_ nums: [Int], _ target: Int) -&gt; Int &#123;        for (i, n) in nums.enumerated() &#123;            if n &gt;= target &#123;                return i            &#125;        &#125;        return nums.count    &#125;&#125;\n\n","plink":"https://blog.fiteen.top/leetcode/0035/"},{"title":"LeetCode 刷题记录（Swift）","date":"2019-06-29T16:00:00.000Z","date_formatted":{"ll":"Jun 30, 2019","L":"06/30/2019","MM-DD":"06-30"},"updated":"2020-01-17T11:06:32.863Z","content":"简体中文 ｜ English ｜ \n简单\n0001. 两数之和\n0007. 整数反转\n0009. 回文数\n0013. 罗马数字转整数\n0014. 最长公共前缀\n0020. 有效的括号\n0021. 合并两个有序链表\n0026. 删除排序数组中的重复项\n0027. 移除元素\n0028. 实现 strStr()\n0035. 搜索插入位置\n\n中等\n0002. 两数相加\n0003. 无重复字符的最长字串\n0005. 最长回文子串\n0006. Z 字形变换\n0008. 字符串转换整数（atoi）\n0011. 盛最多水的容器\n0012. 整数转罗马数字\n0015. 三数之和\n0016. 最接近的三数之和\n0017. 电话号码的字母组合\n0018. 四数之和\n0019. 删除链表的倒数第N个节点\n0022. 括号生成\n0024. 两两交换链表中的节点\n0029. 两数相除\n\n困难\n0004. 寻找两个有序数组的中位数\n0010. 正则表达式匹配\n0023. 合并K个排序链表\n\n","plink":"https://blog.fiteen.top/leetcode/"},{"title":"Charles Mac 版破解","date":"2020-01-09T12:08:11.046Z","date_formatted":{"ll":"Jan 9, 2020","L":"01/09/2020","MM-DD":"01-09"},"updated":"2020-01-09T12:08:11.046Z","content":"\n⚠️⚠️⚠️ 请支持正版，仅供技术交流。\n\n\n下载最新版的安装包。\n\n在Charles 在线破解工具网站上生成破解后的 charles.jar 文件\n\n替换本地/Applications/Charles.app/Contents/Java 目录下的 charles.jar 文件\n\n\n","plink":"https://blog.fiteen.top/resources/charles/"},{"title":"Cornerstone 破解","date":"2020-01-09T12:08:36.201Z","date_formatted":{"ll":"Jan 9, 2020","L":"01/09/2020","MM-DD":"01-09"},"updated":"2020-01-09T12:08:36.201Z","content":"\n⚠️⚠️⚠️ 请支持正版，仅供技术交流。\n\n网上直接搜索破解版例如：吾爱破解提供的百度网盘下载地址  密码:3ycy\n自行破解方案一（未安装软件）如果之前未安装，直接把当前系统时间改成未来的某个时间，再安装，成功运行一次后可以退出程序，将系统时间还原。\n方案二（已安装软件）如果安装前未修改系统日期，需要通过修改 plist 文件的方式破解。步骤如下：\n\n显示系统隐藏文件。\n在终端中输入以下命令：\n1defaults write    ~&#x2F;Library&#x2F;Preferences&#x2F;com.apple.finder AppleShowAllFiles -bool true\n\n这里 true 改成 false 就可以不再显示隐藏文件。\n\n重启 Finder。\n按住 Command+Option+esc 打开对话框，选中Finder，点击“重新开启”。\n\n删除安装记录。\n前往目录 ~/Library/Preferences/ByHost，找到 GlobalPreferences.XXXX.plist 文件，XXXX 是一串数字，删掉包含 com.zennaware.Cornerstone:2.0 字样的一行，然后保存。\n\n重新安装。\n卸载应用，按照方法一的步骤再次安装，就能得到永久破解版。\n\n\n","plink":"https://blog.fiteen.top/resources/cornerstone/"},{"title":"Dash 破解","date":"2020-01-09T12:09:05.030Z","date_formatted":{"ll":"Jan 9, 2020","L":"01/09/2020","MM-DD":"01-09"},"updated":"2020-01-09T12:09:05.030Z","content":"\n⚠️⚠️⚠️ 请支持正版，仅供技术交流。\n\n破解步骤\n下载 Dash4 并安装\n\n本地建一个文件，命名为 license.dash-license，文件内写入内容：\n123456789101112131415161718192021222324&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple Computer&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;&lt;plist version&#x3D;&quot;1.0&quot;&gt;&lt;dict&gt;    &lt;key&gt;Product&lt;&#x2F;key&gt;    &lt;string&gt;Dash&lt;&#x2F;string&gt;    &lt;key&gt;Name&lt;&#x2F;key&gt;    &lt;string&gt;Yang Wang&lt;&#x2F;string&gt;    &lt;key&gt;Email&lt;&#x2F;key&gt;    &lt;string&gt;lizhixiangwang@gmail.com&lt;&#x2F;string&gt;    &lt;key&gt;Licenses&lt;&#x2F;key&gt;    &lt;string&gt;1&lt;&#x2F;string&gt;    &lt;key&gt;Timestamp&lt;&#x2F;key&gt;    &lt;string&gt;1487632616&lt;&#x2F;string&gt;    &lt;key&gt;Version&lt;&#x2F;key&gt;    &lt;string&gt;4&lt;&#x2F;string&gt;    &lt;key&gt;TransactionID&lt;&#x2F;key&gt;    &lt;string&gt;KAP170220-3181-48919&lt;&#x2F;string&gt;    &lt;key&gt;Signature&lt;&#x2F;key&gt;   &lt;data&gt;DxmY4cUBFC&#x2F;iYn&#x2F;zRodj&#x2F;5EwhL&#x2F;7TD5BKyqXAOHoE&#x2F;K19lNCorbnTvWKGmTrWJC242&#x2F;mT8DJ7Zoddb5J98m8h0Q&#x2F;YOfDHeDTyTkz5o5gYRAplIzBOqCGwdUjn1YHOI4OsMKH6LIML5VoHIpkxAOQwmmHiHrpg4CHXopKW1uB45Q&#x3D;&lt;&#x2F;data&gt;&lt;&#x2F;dict&gt;&lt;&#x2F;plist&gt;\n双击打开这个 dash-license 文件，会自动导入授权文件，看到如下提示，则破解成功。\n\n\n","plink":"https://blog.fiteen.top/resources/dash/"},{"title":"FinalShell Mac 版安装","date":"2020-01-07T11:08:01.751Z","date_formatted":{"ll":"Jan 7, 2020","L":"01/07/2020","MM-DD":"01-07"},"updated":"2020-01-07T11:08:01.751Z","content":"官方网站\n一键安装脚本1curl -o finalshell_install.sh www.hostbuf.com&#x2F;downloads&#x2F;finalshell_install.sh;chmod +x finalshell_install.sh;sudo .&#x2F;finalshell_install.sh\n\n直接下载下载地址\n","plink":"https://blog.fiteen.top/resources/final-shell/"},{"title":"Mac 实用工具 ｜ 让工作更高效","date":"2016-08-12T16:00:00.000Z","date_formatted":{"ll":"Aug 13, 2016","L":"08/13/2016","MM-DD":"08-13"},"updated":"2020-01-15T09:54:39.054Z","content":"\n📖表示开源软件，点击进入开源仓库；🆓表示所有或部分主要功能支持免费使用；🔨表示支持破解，点击查看破解方法；🔗表示工具相关的插件，点击查看插件列表。\n\n本文中列举的，仅限本人用过且体验较好的工具，在精不在多。不定时更新，如有推荐欢迎补充。\n\n开发相关IDE\nSublime Text - 一个比较简洁大方带插件管理系统的流行编辑器。（程序员必备）🆓🔗\nXcode - 开发 iOS 和 MacOS 工程的官方 IDE。（iOS 开发必备）🆓\nAndroid Studio - 谷歌推出的 Android 集成开发工具，基于 Intellij IDEA。（Android 开发必备）📖🆓🔗\nVisual Studio Code - 微软推出，免费开源的轻量级代码编辑器。（前端开发必备）📖🆓🔗\nIntelliJ IDEA - Java 编程语言开发的集成环境。在业界被公认为最好的 Java 开发工具之一。（后端开发必备）🔨🔗\nEclipse - 开源、基于 Java 的可扩展开发平台。📖🆓🔗\n\n终端\niTerm2 - 免费的终端工具，可替代系统自带的 Terminal。📖🆓\nZsh - 为交互使用而设计的一款 shell，同时它也是一个强大的脚本语言。 📖🆓🔗\n\nAPI 开发与分析\nPostman - API 调试工具。🆓\n\nSSH\nFinalShell - 良心国货，好用的中文 SSH 工具。🆓\n\n版本控制\nSourceTree - 强大的 Git 跨平台客户端。🆓\nGitHub Desktop - GitHub 官方桌面客户端。🆓\nCornerstone - SVN 客户端工具，还能与 Xcode、BBEdit、TextMate、Coda 等开发工具无缝集成使用。🔨\n\n网络分析\nCharles - 代理工具，通过过将自己设置成系统（电脑或浏览器）的网络访问代理服务器，然后截取请求和请求结果达到分析抓包的目的。🔨\n\nHelper\nDash - API文档浏览器以及代码片段管理工具。🔨\n\n设计&amp;产品设计\nSketch 混合矢量/位图布局应用，特别适用于用户界面，Web 和移动设计。🔗\n\n\n\n\n原型流程\nProcessOn - 国产在线作图平台，支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图等，可以免费保存 5 个文件。🆓\ndraw.io - 流程图在线绘制工具，也支持客户端离线使用，没有保存文件的数量限制。📖🆓\nStarUML - 超好用的UML画图工具。📖🆓🔨\nXMind - 思维导图软件。🆓\n\n图片处理\ngifsicle - 用于操作 GIF 图片的命令行工具，可以修改 gif 文件的尺寸大小、颜色、帧率等。 🆓\nImageOptim - 图片优化无损压缩工具。📖🆓\n智图 - 腾讯 ISUX 前端团队开发的一个专门用于图片压缩和图片格式转换的平台，其功能包括针对png、jpeg、gif 等各类格式图片的压缩，以及为上传图片自动选择最优的图片格式。🆓\n\n\n\n写作MarkDown\nCmd Markdown - 在线 MarkDown 编辑阅读器，支持实时同步预览。🆓\nTypora - “读写一体” 简约 Markdown 编辑器。🆓\nMacDown - 开源的 Markdown 编辑器，参照 Mou。📖🆓\n\n截图&amp;录屏\niShot - 免费、功能全面的录屏、区域截图、窗口截图、长截图、延时截图、快速标注、贴图工具。🆓\nGifox - 专业的 GIF 动图制作工具，支持截选区域录屏导出 GIF 动图并进行压缩处理，支持预览和编辑帧文件。\n\n图床\nuPic - 支持免费上传到多种图床（SM.MS、 又拍云 USS、七牛云 KODO、 阿里云 OSS、 腾讯云 COS、微博、Github、 Gitee、 Amazon S3、自定义上传接口），开源的图床客户端。📖🆓\niPic - 上传到指定的新浪图床免费，其它的需要付费升级高级版，用户体验相对较优，可以配合 Typora 直接食用。🆓\nPicGo - 全平台开源的图床工具，支持免费上传到多种图床（SM.MS、 又拍云 USS、七牛云 KODO、 阿里云 OSS、 腾讯云 COS、微博、Github、Imgur）。用户可以通过 PicGo-Core 搭建个人图床工具，例如 Visual Studio Code 的 vs-picgo 插件。📖🆓🔗\n\nOffice\nWPS - 跨平台的办公室软件套件。🆓\n\n笔记\nEvernote - 支持数据同步的的笔记本应用程序，支持 MarkDown。🆓\n\nRSS\nReeder 4 - 强大的 RSS 阅读器🔨\n\n科学上网\nLantern - 简单易用的老牌科学上网软件，每月500M高速免费流量。🆓\nShadowsocksX-NG - Shadowsocks 客户端软件 🆓\nV2rayU - v2ray 的客户端软件，支持 vmess｜shadowsocks｜socks5等服务协议，支持二维码、剪贴板导入、手动配置、二维码分享、订阅等。（搭建v2ray服务，可伪装成正常网站，防封锁。）🆓\n\n系统相关\nCleanMyMac X - 经典好用的 Mac 清理工具，需要付费使用。\n柠檬清理 - 腾讯出品的免费的 Mac 系统清理软件。🆓\n\n办公\nThe Unarchiver － 解压不同类型的存档文件。📖🆓\nTeamViewer - 远程协助及在线协作和会议功能的软件，商业软件个人使用免费。🆓\n\n\n归纳了一下上文中支持破解的工具：\n\n⚠️⚠️⚠️ 请支持正版，仅供技术交流。\n\n\nJetbrains Mac 版全系列 IDE 永久破解教程\nCornerstone 破解\nCharles Mac 版破解\nDash 破解\nStarUML Mac 版破解\nReeder 4 Mac 版破解\n\n","plink":"https://blog.fiteen.top/resources/"},{"title":"Jetbrains Mac 版全系列 IDE 永久破解教程","date":"2020-01-10T07:14:08.738Z","date_formatted":{"ll":"Jan 10, 2020","L":"01/10/2020","MM-DD":"01-10"},"updated":"2020-01-10T07:14:08.738Z","content":"\n⚠️⚠️⚠️ 请支持正版，仅供技术交流。学生凭学生证可免费申请正版授权。创业公司可五折购买正版授权。\n\n注意事项现在 http://idea.lanyus.com/ 里的激活码已经不能用的，如果你曾经在 /private/etc/hosts 文件里 Jetbrains 相关的项⽬，请先删除。\n以下教程适用于 Jetbrains 全系列产品2019.3.1及以下版本。，下文以 IntelliJ IDEA 的破解为例。\n激活步骤\n下载安装包。前往官网下载正版的 IDEA。\n\n点击下载（提取码：412x）补丁文件，可以将补丁文件 jetbrains-agent.jar 放在 IDEA 安装目录的 bin 文件夹（即 /Applications/IntelliJ IDEA.app/Contents/bin）下。\n\n启动 IDE，点击激活窗口的 Evalutate for free，开启试用。\n\n修改配置。\n进入欢迎页，在下图中的 Configure 中选择 Edit Custom VM Options …。\n\n如下图所示，在弹出的 idea.vmoptions 文件的最后一行加入 -javaagent:/Applications/IntelliJ IDEA.app/Contents/bin/jetbrains-agent.jar。\n\n\n重启 IDE。（这一步切记不要遗漏。）\n\n在欢迎页  Configure 中选择 Manage License...，选择 License server ⽅式，点击 Discover Server 按钮应该会⾃动填充上地址：http://jetbrains-license-server。然后点击 Activate 按钮，看到如下 Licensed to XXX 则激活完毕。\n\n如果不成功，尝试一下 Activation code 方式离线激活。将 ACTIVATION_CODE.txt 中的激活码粘贴到内容框中。你也可以选择自定义激活码。\n看到如下页面则激活完毕。\n\n\n\n\n参考链接：Jetbrains 系列产品2019.3.1最新激活方法[持续更新]\n","plink":"https://blog.fiteen.top/resources/jetbrains-series/"},{"title":"Reeder 4 Mac 版破解","date":"2020-01-09T15:49:02.168Z","date_formatted":{"ll":"Jan 9, 2020","L":"01/09/2020","MM-DD":"01-09"},"updated":"2020-01-09T15:49:02.168Z","content":"\n⚠️⚠️⚠️ 请支持正版，仅供技术交流。\n\n可以在网上直接搜到破解版。例如百度网盘 密码：7rg1\n","plink":"https://blog.fiteen.top/resources/reeder/"},{"title":"StarUML Mac 版破解","date":"2020-01-09T12:07:10.261Z","date_formatted":{"ll":"Jan 9, 2020","L":"01/09/2020","MM-DD":"01-09"},"updated":"2020-01-09T12:07:10.261Z","content":"\n⚠️⚠️⚠️ 请支持正版，仅供技术交流。\n\n破解步骤\n下载并安装 Node.js，如已安装可以跳过。\n\n下载并安装 dmg 包。\n\n安装 asar：\n1sudo npm install -g asar\n\n进入 app.asar 目录：\n1cd &#x2F;Applications&#x2F;StarUML.app&#x2F;Contents&#x2F;Resources&#x2F;\n\n解压 app.asar\n1asar extract app.asar app\n\n修改源码绕过注册弹窗\n1open app&#x2F;src&#x2F;engine&#x2F;license-manager.js\n\n找到 checkLicenseValidity 方法，改成下图所示：\n\n\n重新打包，替换 app.asar\n1asar pack app app.asar\n\n\n\n\n至此，破解完成。\n","plink":"https://blog.fiteen.top/resources/star-uml/"}]