{"title":"十大经典排序算法解析","date":"2017-01-10T13:50:46.000Z","date_formatted":{"ll":"Jan 10, 2017","L":"01/10/2017","MM-DD":"01-10"},"link":"sorting-algorithm","tags":["C","数据结构"],"categories":["算法"],"updated":"2019-12-11T15:18:52.626Z","content":"<p>排序算法是程序员必备的基础知识，弄明白它们的原理和实现很有必要。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"概述\">概述<a href=\"sorting-algorithm#概述\"></a></h2><p>我们可以将常见的排序算法可以分成两类：</p>\n<img src=\"/sorting-algorithm/sort-category.png\" class=\"article-img\">\n\n<p><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，时间复杂度为 $O(nlog_2n)～O(n^2)$</p>\n<p><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，其时间复杂度可以突破  $O(nlog_2n)$，以线性时间运行。</p>\n<p>它们的时间复杂度和空间复杂度如下表：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"center\">排序算法</th>\n<th align=\"center\">时间复杂度（平均）</th>\n<th align=\"center\">时间复杂度（最坏）</th>\n<th align=\"center\">时间复杂度（最好）</th>\n<th align=\"center\">空间复杂度</th>\n<th align=\"center\">稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">插入排序</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(n)$</td>\n<td align=\"center\">$O(1)$</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">希尔排序</td>\n<td align=\"center\">$O(n^{1.3})$</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(n)$</td>\n<td align=\"center\">$O(1)$</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">直接选择排序</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(1)$</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">堆排序</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">$O(1)$</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">冒泡排序</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(n)$</td>\n<td align=\"center\">$O(1)$</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">快速排序</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">归并排序</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">$O(nlog_2n)$</td>\n<td align=\"center\">$O(n)$</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">计数排序</td>\n<td align=\"center\">$O(n+k)$</td>\n<td align=\"center\">$O(n+k)$</td>\n<td align=\"center\">$O(n+k)$</td>\n<td align=\"center\">$O(n+k)$</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">桶排序</td>\n<td align=\"center\">$O(n+k)$</td>\n<td align=\"center\">$O(n^2)$</td>\n<td align=\"center\">$O(n)$</td>\n<td align=\"center\">$O(n+k)$</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">基数排序</td>\n<td align=\"center\">$O(n*k)$</td>\n<td align=\"center\">$O(n*k)$</td>\n<td align=\"center\">$O(n*k)$</td>\n<td align=\"center\">$O(n+k)$</td>\n<td align=\"center\">稳定</td>\n</tr>\n</tbody></table></div></div>\n<p>排序算法的<strong>稳定性</strong>是指，假设待排序序列中两元素相等，排序前后这两个相等元素的相对位置不变，则认为是稳定的。</p>\n<h2 id=\"冒泡排序\">冒泡排序<a href=\"sorting-algorithm#冒泡排序\"></a></h2><p>冒泡排序（Bubble Sort），顾名思义，就是指越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h3 id=\"算法原理\">算法原理<a href=\"sorting-algorithm#算法原理\"></a></h3><ol>\n<li>从左到右，依次比较相邻的元素大小，<strong>更大的元素交换到右边</strong>；</li>\n<li>从第一组相邻元素比较到最后一组相邻元素，这一步结束最后一个元素必然是参与比较的元素中最大的元素；</li>\n<li>按照大的居右原则，重新从左到后比较，<strong>前一轮中得到的最后一个元素不参与比较</strong>，得出新一轮的最大元素；</li>\n<li>按照上述规则，每一轮结束会减少一个元素参与比较，直到没有任何一组元素需要比较。</li>\n</ol>\n<h3 id=\"动图演示\">动图演示<a href=\"sorting-algorithm#动图演示\"></a></h3><img src=\"/sorting-algorithm/bubble-sort.gif\" class=\"article-img\">\n\n<h3 id=\"代码实现\">代码实现<a href=\"sorting-algorithm#代码实现\"></a></h3><h3 id=\"算法分析\">算法分析<a href=\"sorting-algorithm#算法分析\"></a></h3><div class=\"is-snippet\"><script>(function(){\n  if (!window.MathJax || !MathJax.Hub) {\n    const script = document.createElement('script'); \n    script.src='//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML';\n    document.head.appendChild(script);\n  } else MathJax.Hub.Queue(['Typeset', MathJax.Hub, document.querySelector('main')]);\n})();</script></div>","prev":{"title":"你应该了解的 IDFA","link":"IDFA"},"next":{"title":"一次搞懂时间复杂度和空间复杂度","link":"asymptotic-time-complexity-and-space-complexity "},"plink":"https://fiteen.top/sorting-algorithm/","toc":[{"title":"概述","id":"概述","index":"1"},{"title":"冒泡排序","id":"冒泡排序","index":"2","children":[{"title":"算法原理","id":"算法原理","index":"2.1"},{"title":"动图演示","id":"动图演示","index":"2.2"},{"title":"代码实现","id":"代码实现","index":"2.3"},{"title":"算法分析","id":"算法分析","index":"2.4"}]}],"copyright":{"author":"FiTeen","link":"<a href=\"https://fiteen.top/sorting-algorithm/\" title=\"十大经典排序算法解析\">https://fiteen.top/sorting-algorithm/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}